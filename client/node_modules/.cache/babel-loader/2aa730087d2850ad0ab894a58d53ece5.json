{"ast":null,"code":"import _slicedToArray from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Tools/Font.js\";\nimport React, { useState, useContext } from 'react';\nimport { EditorContext } from '../../../Context/EditorContext';\nimport ButtonTemplate from '../Templates/ButtonTemplate';\nimport { Menu, MenuItem } from '@material-ui/core';\nvar fontOptions = [{\n  font: 'arial'\n}, {\n  font: 'helvetica'\n}, {\n  font: 'Times New Roman'\n}, {\n  font: 'Time'\n}, {\n  font: 'Courier New'\n}, {\n  font: 'Courier'\n}, {\n  font: 'Verdana'\n}, {\n  font: 'Georgia'\n}, {\n  font: 'Palatino'\n}, {\n  font: 'Garamond'\n}, {\n  font: 'Bookman'\n}, {\n  font: 'Comic Sans MS'\n}, {\n  font: 'Trebuchet MS'\n}, {\n  font: 'Arial Black'\n}, {\n  font: 'Impact'\n}];\nexport default (function (_ref) {\n  var margin = _ref.margin,\n      xs = _ref.xs;\n  var holder = useContext(EditorContext);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      anchorEl = _useState2[0],\n      setAnchorEl = _useState2[1];\n\n  var handleOpen = function handleOpen(e) {\n    return setAnchorEl(e.currentTarget);\n  };\n\n  var handleClose = function handleClose() {\n    return setAnchorEl(null);\n  };\n\n  var wrapper = function wrapper(font) {\n    holder.handleFont(font);\n    handleClose();\n  };\n\n  var fontSwitch = function fontSwitch() {\n    var sectionEl = holder.sectionMode.el;\n    var font;\n\n    if (sectionEl !== 'jumbotron' && sectionEl !== 'image') {\n      console.log(sectionEl);\n      font = holder[sectionEl].font;\n    }\n\n    switch (sectionEl) {\n      case 'body':\n        if (sectionEl === 'image') {\n          return React.createElement(ButtonTemplate, {\n            margin: margin,\n            locked: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81\n            },\n            __self: this\n          });\n        }\n\n        return React.createElement(ButtonTemplate, {\n          margin: margin,\n          font: font,\n          handleOpen: handleOpen,\n          xs: xs,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        });\n\n      case 'title':\n        return React.createElement(ButtonTemplate, {\n          margin: margin,\n          font: font,\n          handleOpen: handleOpen,\n          xs: xs,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        });\n\n      case 'description':\n        return React.createElement(ButtonTemplate, {\n          margin: margin,\n          font: font,\n          handleOpen: handleOpen,\n          xs: xs,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        });\n\n      case 'readLength':\n        return React.createElement(ButtonTemplate, {\n          margin: margin,\n          font: font,\n          handleOpen: handleOpen,\n          xs: xs,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        });\n\n      default:\n        return React.createElement(ButtonTemplate, {\n          margin: margin,\n          locked: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        });\n    }\n  };\n\n  return React.createElement(React.Fragment, null, fontSwitch(), React.createElement(Menu, {\n    id: \"textSize\",\n    anchorEl: anchorEl,\n    keepMounted: true,\n    open: Boolean(anchorEl),\n    onClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, fontOptions.map(function (item) {\n    return React.createElement(MenuItem, {\n      style: {\n        textTransform: 'capitalize',\n        fontFamily: \"\".concat(item.font, \", Helvetica, Arial, sans-serif\")\n      },\n      onClick: function onClick() {\n        return wrapper(item.font);\n      },\n      key: item.font,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, item.font);\n  })));\n});","map":{"version":3,"sources":["/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Tools/Font.js"],"names":["React","useState","useContext","EditorContext","ButtonTemplate","Menu","MenuItem","fontOptions","font","margin","xs","holder","anchorEl","setAnchorEl","handleOpen","e","currentTarget","handleClose","wrapper","handleFont","fontSwitch","sectionEl","sectionMode","el","console","log","Boolean","map","item","textTransform","fontFamily"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { EditorContext } from '../../../Context/EditorContext';\n\nimport ButtonTemplate from '../Templates/ButtonTemplate';\n\nimport { Menu, MenuItem } from '@material-ui/core';\n\nconst fontOptions = [\n    {\n        font: 'arial'\n    },\n    {\n        font: 'helvetica'\n    },\n    {\n        font: 'Times New Roman'\n    },\n    {\n        font: 'Time'\n    },\n    {\n        font: 'Courier New'\n    },\n    {\n        font: 'Courier'\n    },\n    {\n        font: 'Verdana'\n    },\n    {\n        font: 'Georgia'\n    },\n    {\n        font: 'Palatino'\n    },\n    {\n        font: 'Garamond'\n    },\n    {\n        font: 'Bookman'\n    },\n    {\n        font: 'Comic Sans MS'\n    },\n    {\n        font: 'Trebuchet MS'\n    },\n    {\n        font: 'Arial Black'\n    },\n    {\n        font: 'Impact'\n    }\n];\n\nexport default ({ margin, xs }) => {\n\n    const holder = useContext(EditorContext);\n\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const handleOpen = (e) => setAnchorEl(e.currentTarget);\n    const handleClose = () => setAnchorEl(null);\n\n    const wrapper = (font) => {\n        holder.handleFont(font);\n        handleClose();\n    };\n\n    const fontSwitch = () => {\n        const sectionEl = holder.sectionMode.el;\n        let font;\n        if (sectionEl !== 'jumbotron' && sectionEl !== 'image') {\n            console.log(sectionEl);\n            font = holder[sectionEl].font;\n        }\n\n        switch (sectionEl) {\n            case 'body':\n                if (sectionEl === 'image') {\n                    return <ButtonTemplate margin={margin} locked={true} />;\n                }\n                return <ButtonTemplate\n                    margin={margin}\n                    font={font}\n                    handleOpen={handleOpen}\n                    xs={xs}\n                />;\n            case 'title':\n                return <ButtonTemplate\n                    margin={margin}\n                    font={font}\n                    handleOpen={handleOpen}\n                    xs={xs}\n                />;\n            case 'description':\n                return <ButtonTemplate\n                    margin={margin}\n                    font={font}\n                    handleOpen={handleOpen}\n                    xs={xs}\n                />;\n            case 'readLength':\n                return <ButtonTemplate\n                    margin={margin}\n                    font={font}\n                    handleOpen={handleOpen}\n                    xs={xs}\n                />;\n            default:\n                return <ButtonTemplate margin={margin} locked={true} />;\n        }\n    };\n\n    return (\n        <>\n            {fontSwitch()}\n\n            <Menu\n                id=\"textSize\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                {fontOptions.map((item) => {\n                    return (\n                        <MenuItem\n                            style={{\n                                textTransform: 'capitalize',\n                                fontFamily: `${item.font}, Helvetica, Arial, sans-serif`,\n                            }}\n                            onClick={() => wrapper(item.font)}\n                            key={item.font}\n                        >\n                            {item.font}\n                        </MenuItem>\n                    );\n                })}\n            </Menu>\n        </>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}