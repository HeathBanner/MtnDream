{"ast":null,"code":"var _jsxFileName = \"/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Preview.js\";\nimport React, { useContext, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography, TextField, IconButton, Avatar, CircularProgress, Icon } from '@material-ui/core';\nimport Jumbotron from './Tools/Jumbotron';\nimport Image from './Tools/Image';\nimport { EditorContext } from '../../Context/EditorContext';\nvar fontSizes = {\n  h1: '6rem',\n  h2: '3.75rem',\n  h3: '3rem',\n  h4: '2.125rem',\n  h5: '1.5rem',\n  h6: '1.25rem'\n};\nvar mobileFontSizes = {\n  h1: '2.125rem',\n  h2: '2.125em',\n  h3: '1.5rem',\n  h4: '1.5rem',\n  h5: '1.25rem',\n  h6: '1rem'\n};\nvar months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nexport default (function (_ref) {\n  var title = _ref.title,\n      xs = _ref.xs,\n      md = _ref.md;\n  var holder = useContext(EditorContext); // Once the component mounts, it will send the url parameter to the context\n  // to have it update with the currently selected article\n\n  useEffect(function () {\n    holder.editArticle(title);\n  }, []); // The makeStyles hook was added within the component due to the reliance of\n  // the context information\n\n  var useStyles = makeStyles(function () {\n    return {\n      container: {\n        marginTop: 120 + parseInt(holder.title.marginTop),\n        padding: 40,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'flex-start',\n        flexWrap: 'wrap'\n      },\n      typo: {\n        fontSize: xs ? mobileFontSizes[holder.title.textStyle] : fontSizes[holder.title.textStyle],\n        fontFamily: \"\".concat(holder.title.font, \", Helvetica, Arial, sans-serif\"),\n        fontWeight: holder.title.bold ? 'bold' : 'normal',\n        fontStyle: holder.title.italic ? 'italic' : 'normal',\n        textDecoration: holder.title.underline ? 'underline' : 'none',\n        textAlign: holder.title.justify,\n        color: holder.title.color,\n        backgroundColor: holder.title.highlight ? '#ffff00' : 'inherit',\n        padding: 0,\n        width: '100%',\n        lineHeight: 1.17\n      },\n      description: {\n        fontSize: xs ? mobileFontSizes[holder.description.textStyle] : fontSizes[holder.description.textStyle],\n        fontFamily: \"\".concat(holder.description.font, \", Helvetica, Arial, sans-serif\"),\n        color: holder.description.color,\n        textAlign: holder.description.justify,\n        marginTop: 20,\n        padding: 0,\n        lineHeight: 1.17\n      },\n      jumboContainer: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: holder.jumbotron.justify\n      },\n      newSectionContainers: {\n        flexGrow: 1,\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      newSectionButtons: {\n        padding: 10,\n        marginTop: 20,\n        backgroundColor: 'rgb(0, 0, 0, 0.1)',\n        transition: 'background-color .4s ease',\n        '&:hover': {\n          backgroundColor: 'rgb(0, 0, 0, 0.2)'\n        }\n      },\n      inputs: {\n        width: '100%',\n        padding: 0,\n        lineHeight: '1.5rem'\n      },\n      infoContainer: {\n        position: 'relative',\n        height: 60,\n        marginTop: 20,\n        paddingLeft: 80,\n        display: 'inline-flex',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        alignContent: 'center',\n        flexWrap: 'wrap',\n        flexBasis: 'auto'\n      },\n      avatar: {\n        height: 60,\n        width: 60,\n        position: 'absolute',\n        top: 0,\n        left: 0\n      },\n      readLength: {\n        color: 'rgba(0, 0, 0, 0.54)'\n      }\n    };\n  });\n  var classes = useStyles(); // This function generate the current date and parses it to be applied to the\n  // elements below\n\n  var generateDate = function generateDate() {\n    var now = new Date();\n    return \"\".concat(months[now.getMonth()], \" \").concat(now.getDate());\n  };\n\n  if (title && title !== 'new' && !holder.title.text) {\n    return React.createElement(Grid, {\n      className: classes.container,\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(CircularProgress, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Grid, {\n    className: classes.container,\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    style: {\n      width: '100%',\n      marginBottom: parseInt(holder.title.marginBottom)\n    },\n    inputProps: {\n      className: classes.typo\n    },\n    InputProps: {\n      className: classes.inputs\n    },\n    value: holder.title.text,\n    onClick: function onClick() {\n      return holder.handleSectionMode({\n        el: 'title'\n      });\n    },\n    onChange: function onChange(e) {\n      return holder.handleInput(e.target.value, {\n        El: 'title'\n      });\n    },\n    multiline: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    style: {\n      width: '100%'\n    },\n    inputProps: {\n      className: classes.description\n    },\n    InputProps: {\n      className: classes.inputs\n    },\n    value: holder.description.text,\n    onClick: function onClick() {\n      return holder.handleSectionMode({\n        el: 'description'\n      });\n    },\n    onChange: function onChange(e) {\n      return holder.handleInput(e.target.value, {\n        El: 'description'\n      });\n    },\n    multiline: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: classes.infoContainer,\n    style: {\n      width: holder.readLength.justify === 'flex-start' ? '100%' : 'auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(Avatar, {\n    className: classes.avatar,\n    src: \"https://media.licdn.com/dms/image/C4E03AQESXvxigX8NfQ/profile-displayphoto-shrink_800_800/0?e=1571875200&v=beta&t=jVs0jK8YKBHrOOcmnghTMtN9bhPfu7rH9MHADyTboBY\",\n    alt: \"Terri Banner Profile Photo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, \"Terri Banner\")), React.createElement(Typography, {\n    className: classes.readLength,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, generateDate(), \" \\u2022\"), React.createElement(TextField, {\n    style: {\n      width: 20,\n      padding: 0\n    },\n    inputProps: {\n      className: classes.readLength,\n      style: {\n        textAlign: 'center',\n        padding: 0\n      }\n    },\n    InputProps: {\n      className: classes.inputs\n    },\n    value: holder.readLength.text,\n    onClick: function onClick() {\n      return holder.handleSectionMode({\n        el: 'readLength'\n      });\n    },\n    onChange: function onChange(e) {\n      return holder.handleInput(e.target.value, {\n        El: 'readLength'\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    className: classes.readLength,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, \"min read\")), React.createElement(\"div\", {\n    className: classes.jumboContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, React.createElement(Jumbotron, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  })), holder.body.map(function (section, index) {\n    if (section.isText) {\n      return React.createElement(TextField, {\n        style: {\n          width: '100%',\n          marginTop: parseInt(holder.body[index].marginTop),\n          marginBottom: parseInt(holder.body[index].marginBottom)\n        },\n        multiline: true,\n        inputProps: {\n          style: {\n            width: '100%',\n            fontSize: xs ? mobileFontSizes[holder.body.textStyle] : fontSizes[holder.body[index].textStyle],\n            fontFamily: \"\".concat(holder.body[index].font, \", Helvetica, Arial, sans-serif\"),\n            fontWeight: holder.body[index].bold ? 'bold' : 'normal',\n            fontStyle: holder.body[index].italic ? 'italic' : 'normal',\n            textDecoration: holder.body[index].underline ? 'underline' : 'none',\n            textAlign: holder.body[index].justify,\n            color: holder.body[index].color,\n            backgroundColor: holder.body[index].highlight ? '#ffff00' : 'inherit',\n            lineHeight: 1.17\n          }\n        },\n        InputProps: {\n          className: classes.inputs\n        },\n        value: holder.body[index].text,\n        onClick: function onClick() {\n          return holder.handleSectionMode({\n            el: 'body',\n            index: index\n          });\n        },\n        onChange: function onChange(e) {\n          return holder.handleInput(e.target.value, {\n            El: 'body',\n            index: index\n          });\n        },\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      });\n    }\n\n    if (section.isImage) {\n      return React.createElement(\"div\", {\n        style: {\n          width: '100%',\n          display: 'flex',\n          justifyContent: section.justify,\n          marginTop: parseInt(holder.body[index].marginTop),\n          marginBottom: parseInt(holder.body[index].marginBottom)\n        },\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, React.createElement(Image, {\n        src: section.src,\n        index: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }));\n    }\n  }), React.createElement(\"div\", {\n    className: classes.newSectionContainers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    className: classes.newSectionButtons,\n    onClick: holder.handleNewBody,\n    style: {\n      marginRight: xs ? 0 : 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292\n    },\n    __self: this\n  }, \"view_headline_outlined\"))), React.createElement(\"div\", {\n    className: classes.newSectionContainers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    className: classes.newSectionButtons,\n    onClick: holder.newImgEl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302\n    },\n    __self: this\n  }, \"add_to_photos_outlined\")))));\n});","map":{"version":3,"sources":["/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Preview.js"],"names":["React","useContext","useEffect","makeStyles","Grid","Typography","TextField","IconButton","Avatar","CircularProgress","Icon","Jumbotron","Image","EditorContext","fontSizes","h1","h2","h3","h4","h5","h6","mobileFontSizes","months","title","xs","md","holder","editArticle","useStyles","container","marginTop","parseInt","padding","display","justifyContent","alignItems","flexWrap","typo","fontSize","textStyle","fontFamily","font","fontWeight","bold","fontStyle","italic","textDecoration","underline","textAlign","justify","color","backgroundColor","highlight","width","lineHeight","description","jumboContainer","jumbotron","newSectionContainers","flexGrow","newSectionButtons","transition","inputs","infoContainer","position","height","paddingLeft","alignContent","flexBasis","avatar","top","left","readLength","classes","generateDate","now","Date","getMonth","getDate","text","marginBottom","className","handleSectionMode","el","e","handleInput","target","value","El","style","body","map","section","index","isText","isImage","src","handleNewBody","marginRight","newImgEl"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n    Grid,\n    Typography,\n    TextField,\n    IconButton,\n    Avatar,\n    CircularProgress,\n    Icon\n} from '@material-ui/core';\n\nimport Jumbotron from './Tools/Jumbotron';\nimport Image from './Tools/Image';\n\nimport { EditorContext } from '../../Context/EditorContext';\n\nconst fontSizes = {\n    h1: '6rem',\n    h2: '3.75rem',\n    h3: '3rem',\n    h4: '2.125rem',\n    h5: '1.5rem',\n    h6: '1.25rem',\n};\nconst mobileFontSizes = {\n    h1: '2.125rem',\n    h2: '2.125em',\n    h3: '1.5rem',\n    h4: '1.5rem',\n    h5: '1.25rem',\n    h6: '1rem',\n};\nconst months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n];\n\nexport default ({ title, xs, md}) => {\n\n    const holder = useContext(EditorContext);\n\n    // Once the component mounts, it will send the url parameter to the context\n    // to have it update with the currently selected article\n    useEffect(() => {\n        holder.editArticle(title);\n    }, []);\n\n    // The makeStyles hook was added within the component due to the reliance of\n    // the context information\n    const useStyles = makeStyles(() => ({\n        container: {\n            marginTop: 120 + parseInt(holder.title.marginTop),\n            padding: 40,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'flex-start',\n            flexWrap: 'wrap',\n        },\n        typo: {\n            fontSize: xs ? mobileFontSizes[holder.title.textStyle] : fontSizes[holder.title.textStyle],\n            fontFamily: `${holder.title.font}, Helvetica, Arial, sans-serif`,\n            fontWeight: holder.title.bold ? 'bold' : 'normal',\n            fontStyle: holder.title.italic ? 'italic' : 'normal',\n            textDecoration: holder.title.underline ? 'underline' : 'none',\n            textAlign: holder.title.justify,\n            color: holder.title.color,\n            backgroundColor: holder.title.highlight ? '#ffff00' : 'inherit',\n            padding: 0,\n            width: '100%',\n            lineHeight: 1.17,\n        },\n        description: {\n            fontSize: xs ? mobileFontSizes[holder.description.textStyle] : fontSizes[holder.description.textStyle],\n            fontFamily: `${holder.description.font}, Helvetica, Arial, sans-serif`,\n            color: holder.description.color,\n            textAlign: holder.description.justify,\n            marginTop: 20,\n            padding: 0,\n            lineHeight: 1.17,\n        },\n        jumboContainer: {\n            width: '100%',\n            display: 'flex',\n            justifyContent: holder.jumbotron.justify,\n        },\n        newSectionContainers: {\n            flexGrow: 1,\n            display: 'flex',\n            justifyContent: 'center',\n        },\n        newSectionButtons: {\n            padding: 10,\n            marginTop: 20,\n            backgroundColor: 'rgb(0, 0, 0, 0.1)',\n            transition: 'background-color .4s ease',\n            '&:hover': {\n                backgroundColor: 'rgb(0, 0, 0, 0.2)',\n            },\n        },\n        inputs: {\n            width: '100%',\n            padding: 0,\n            lineHeight: '1.5rem',\n        },\n        infoContainer: {\n            position: 'relative',\n            height: 60,\n            marginTop: 20,\n            paddingLeft: 80,\n            display: 'inline-flex',\n            justifyContent: 'flex-start',\n            alignItems: 'center',\n            alignContent: 'center',\n            flexWrap: 'wrap',\n            flexBasis: 'auto',\n        },\n        avatar: {\n            height: 60,\n            width: 60,\n            position: 'absolute',\n            top: 0,\n            left: 0,\n        },\n        readLength: {\n            color: 'rgba(0, 0, 0, 0.54)',\n        },\n    }));\n    \n    const classes = useStyles();\n\n    // This function generate the current date and parses it to be applied to the\n    // elements below\n    const generateDate = () => {\n        const now = new Date();\n        return `${months[now.getMonth()]} ${now.getDate()}`;\n    };\n\n    if ( (title) && (title !== 'new') && (!holder.title.text) ) {\n        return (\n            <Grid className={classes.container} item xs={12}>\n                <CircularProgress />\n            </Grid>\n        );\n    }\n    return (\n        <>\n            <Grid className={classes.container} item xs={12}>\n\n                <TextField\n                    style={{\n                        width: '100%',\n                        marginBottom: parseInt(holder.title.marginBottom),\n                    }}\n                    inputProps={{ className: classes.typo }}\n                    InputProps={{ className: classes.inputs }}\n                    value={holder.title.text}\n                    onClick={() => holder.handleSectionMode({ el: 'title' })}\n                    onChange={(e) => holder.handleInput(e.target.value, { El: 'title' })}\n                    multiline={true}\n                />\n\n                <TextField\n                    style={{ width: '100%' }}                \n                    inputProps={{ className: classes.description }}\n                    InputProps={{ className: classes.inputs }}\n                    value={holder.description.text}\n                    onClick={() => holder.handleSectionMode({ el: 'description' })}\n                    onChange={(e) => holder.handleInput(e.target.value, { El: 'description' })}\n                    multiline={true}\n                />\n\n                <div\n                    className={classes.infoContainer}\n                    style={{ width: holder.readLength.justify === 'flex-start' ? '100%' : 'auto' }}\n                >\n\n                    <Avatar\n                        className={classes.avatar}\n                        src={`https://media.licdn.com/dms/image/C4E03AQESXvxigX8NfQ/profile-displayphoto-shrink_800_800/0?e=1571875200&v=beta&t=jVs0jK8YKBHrOOcmnghTMtN9bhPfu7rH9MHADyTboBY`}\n                        alt=\"Terri Banner Profile Photo\"\n                    />\n\n                    <div style={{ width: '100%' }}>\n                        <Typography>\n                            Terri Banner\n                        </Typography>\n                    </div>\n\n                    <Typography className={classes.readLength}>\n                        {generateDate()} &#8226;\n                    </Typography>\n\n                    <TextField\n                        style={{ width: 20, padding: 0 }}                \n                        inputProps={{\n                            className: classes.readLength,\n                            style: { textAlign: 'center', padding: 0 },\n                        }}\n                        InputProps={{ className: classes.inputs }}\n                        value={holder.readLength.text}\n                        onClick={() => holder.handleSectionMode({ el: 'readLength' })}\n                        onChange={(e) => holder.handleInput(e.target.value, { El: 'readLength' })}\n                    />\n\n                    <Typography className={classes.readLength}>\n                        min read\n                    </Typography>\n\n                </div>\n                \n                <div className={classes.jumboContainer}>\n\n                    <Jumbotron />\n                \n                </div>\n                \n                {/* Since the body object contains both image and text elements,\n                a conditional was required to render both */}\n                { \n                    holder.body.map((section, index) => {\n                        \n                        if (section.isText) {\n                            return (\n                                <TextField\n                                    style={{\n                                        width: '100%',\n                                        marginTop: parseInt(holder.body[index].marginTop),\n                                        marginBottom: parseInt(holder.body[index].marginBottom),\n                                    }}\n                                    multiline={true}\n                                    inputProps={{\n                                        style: {\n                                            width: '100%',\n                                            fontSize: xs ? mobileFontSizes[holder.body.textStyle] : fontSizes[holder.body[index].textStyle],\n                                            fontFamily: `${holder.body[index].font}, Helvetica, Arial, sans-serif`,\n                                            fontWeight: holder.body[index].bold ? 'bold' : 'normal',\n                                            fontStyle: holder.body[index].italic ? 'italic' : 'normal',\n                                            textDecoration: holder.body[index].underline ? 'underline' : 'none',\n                                            textAlign: holder.body[index].justify,\n                                            color: holder.body[index].color,\n                                            backgroundColor: holder.body[index].highlight ? '#ffff00' : 'inherit',\n                                            lineHeight: 1.17,\n                                        } \n                                    }}\n                                    InputProps={{ className: classes.inputs }}\n                                    value={holder.body[index].text}\n                                    onClick={() => holder.handleSectionMode({ el: 'body', index: index })}\n                                    onChange={(e) => holder.handleInput(e.target.value, { El: 'body', index: index })}\n                                    key={index}\n                                />\n                            );\n                        }\n                        if (section.isImage) {\n                            return (\n                                <div\n                                    style={{\n                                        width: '100%',\n                                        display: 'flex',\n                                        justifyContent: section.justify,\n                                        marginTop: parseInt(holder.body[index].marginTop),\n                                        marginBottom: parseInt(holder.body[index].marginBottom),\n                                    }}\n                                    key={index}\n                                >\n                                    <Image\n                                        src={section.src}\n                                        index={index}\n                                    />\n                                </div>\n                            );\n                        }\n                    })\n                }\n                <div className={classes.newSectionContainers}>\n                    <IconButton\n                        className={classes.newSectionButtons}\n                        onClick={holder.handleNewBody}\n                        style={{ marginRight: xs ? 0 : 20 }}\n                    >\n                        <Icon>\n                            view_headline_outlined\n                        </Icon>\n                    </IconButton>\n                </div>\n                <div className={classes.newSectionContainers}>\n                    <IconButton\n                        className={classes.newSectionButtons}\n                        onClick={holder.newImgEl}\n                    >\n                        <Icon>\n                            add_to_photos_outlined\n                        </Icon>\n                    </IconButton>\n                </div>\n\n            </Grid>\n        </>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}