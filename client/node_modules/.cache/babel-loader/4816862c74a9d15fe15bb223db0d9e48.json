{"ast":null,"code":"import _slicedToArray from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Tools/Image.js\";\nimport React, { useContext, useState, Fragment } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Popover, Typography, Button, TextField } from '@material-ui/core';\nimport { EditorContext } from '../../../Context/EditorContext';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    paper: {\n      padding: 20,\n      width: 350\n    }\n  };\n});\n\nvar Image = function Image(props) {\n  var classes = useStyles();\n  var holder = useContext(EditorContext);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      anchorEl = _useState2[0],\n      setAnchorEl = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    setAnchorEl(e.currentTarget);\n  };\n\n  var handleClose = function handleClose() {\n    setAnchorEl(null);\n  };\n\n  var open = Boolean(anchorEl);\n  var id = open ? 'simple-popover' : undefined;\n\n  if (props.src) {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      style: {\n        width: '100%',\n        height: 'auto',\n        margin: '20px 0px'\n      },\n      src: props.src,\n      alt: props.alt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    })), React.createElement(Popover, {\n      PaperProps: {\n        className: classes.paper\n      },\n      modalClasses: classes.paper,\n      id: id,\n      open: open,\n      anchorEl: anchorEl,\n      onClose: handleClose,\n      anchorOrigin: {\n        vertical: 'center',\n        horizontal: 'center'\n      },\n      transformOrigin: {\n        vertical: 'center',\n        horizontal: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      label: \"Paste Url\",\n      variant: \"outlined\",\n      value: props.src,\n      onChange: function onChange(e) {\n        return holder.handleInput(e, {\n          El: 'image'\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })));\n  } else {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Button, {\n      style: {\n        marginTop: 40\n      },\n      variant: \"contained\",\n      onClick: handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Add Jumbotron\"), React.createElement(Popover, {\n      PaperProps: {\n        className: classes.paper\n      },\n      id: id,\n      open: open,\n      anchorEl: anchorEl,\n      onClose: handleClose,\n      anchorOrigin: {\n        vertical: 'center',\n        horizontal: 'center'\n      },\n      transformOrigin: {\n        vertical: 'center',\n        horizontal: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      label: \"Paste Url\",\n      variant: \"outlined\",\n      value: holder.jumbotron,\n      onChange: function onChange(e) {\n        return holder.handleInput(e, {\n          El: 'image'\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    })));\n  }\n\n  ;\n};\n\nexport default Image;","map":{"version":3,"sources":["/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Tools/Image.js"],"names":["React","useContext","useState","Fragment","makeStyles","Popover","Typography","Button","TextField","EditorContext","useStyles","theme","paper","padding","width","Image","props","classes","holder","anchorEl","setAnchorEl","handleClick","e","currentTarget","handleClose","open","Boolean","id","undefined","src","height","margin","alt","className","vertical","horizontal","handleInput","El","marginTop","jumbotron"],"mappings":"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","sourcesContent":["import React, { useContext, useState, Fragment } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Popover, Typography, Button, TextField } from '@material-ui/core';\n\nimport { EditorContext } from '../../../Context/EditorContext';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        padding: 20,\n        width: 350,\n    },\n}));\n\nconst Image = (props) => {\n    const classes = useStyles();\n    const holder = useContext(EditorContext);\n\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const handleClick = e => {\n        setAnchorEl(e.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popover' : undefined;\n\n    if (props.src) {\n        return (\n            <Fragment>\n\n                <Button onClick={handleClick}>\n\n                    <img \n                        style={{ width: '100%', height: 'auto', margin: '20px 0px' }} \n                        src={props.src} \n                        alt={props.alt} \n                    />\n\n                </Button>\n\n                <Popover\n                    PaperProps={{ className: classes.paper }}\n                    modalClasses={classes.paper}\n                    id={id}\n                    open={open}\n                    anchorEl={anchorEl}\n                    onClose={handleClose}\n                    anchorOrigin={{\n                        vertical: 'center',\n                        horizontal: 'center',\n                    }}\n                    transformOrigin={{\n                        vertical: 'center',\n                        horizontal: 'center',\n                    }}\n                > \n\n                    <TextField \n                        label=\"Paste Url\"\n                        variant=\"outlined\"\n                        value={props.src}\n                        onChange={(e) => holder.handleInput(e, { El: 'image' })}\n                    />\n\n                </Popover> \n\n            </Fragment>\n        );\n    } else {\n        return (\n            <Fragment>\n\n                <Button style={{ marginTop: 40 }} variant=\"contained\" onClick={handleClick}>\n                    Add Jumbotron\n                </Button>\n\n                <Popover\n                    PaperProps={{ className: classes.paper }}\n                    id={id}\n                    open={open}\n                    anchorEl={anchorEl}\n                    onClose={handleClose}\n                    anchorOrigin={{\n                        vertical: 'center',\n                        horizontal: 'center',\n                    }}\n                    transformOrigin={{\n                        vertical: 'center',\n                        horizontal: 'center',\n                    }}\n                > \n\n                    <TextField \n                        label=\"Paste Url\"\n                        variant=\"outlined\"\n                        value={holder.jumbotron}\n                        onChange={(e) => holder.handleInput(e, { El: 'image' })}\n                    />\n\n                </Popover>\n\n            </Fragment>\n        );\n    };\n};\n\nexport default Image;\n"]},"metadata":{},"sourceType":"module"}