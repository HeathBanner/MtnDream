{"ast":null,"code":"var _jsxFileName = \"/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Preview.js\";\nimport React, { useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography, TextField, Button } from '@material-ui/core';\nimport Jumbotron from './Tools/Jumbotron';\nimport Image from './Tools/Image';\nimport { EditorContext } from '../../Context/EditorContext';\nvar fontSizes = {\n  h1: '6rem',\n  h2: '3.75rem',\n  h3: '3rem',\n  h4: '2.125rem',\n  h5: '1.5rem',\n  h6: '1.25rem'\n};\n\nvar Preview = function Preview() {\n  var holder = useContext(EditorContext);\n  var useStyles = makeStyles(function (theme) {\n    return {\n      container: {\n        marginTop: 120\n      },\n      typo: {\n        fontSize: fontSizes[holder.title.textStyle],\n        fontFamily: \"\".concat(holder.title.font, \", Helvetica, Arial, sans-serif\"),\n        fontWeight: holder.title.bold ? 'bold' : 'normal',\n        fontStyle: holder.title.italic ? 'italic' : 'normal',\n        textDecoration: holder.title.underline ? 'underline' : 'none',\n        textAlign: holder.title.justify,\n        color: holder.title.color,\n        backgroundColor: holder.title.highlight ? '#ffff00' : 'none'\n      },\n      body: {\n        width: '100%',\n        fontSize: fontSizes[holder.title.textStyle],\n        fontFamily: \"\".concat(holder.currentBody.font, \", Helvetica, Arial, sans-serif\"),\n        fontWeight: holder.currentBody.bold ? 'bold' : 'normal',\n        fontStyle: holder.currentBody.italic ? 'italic' : 'normal',\n        textDecoration: holder.currentBody.underline ? 'underline' : 'none',\n        textAlign: holder.currentBody.justify,\n        color: holder.currentBody.color,\n        backgroundColor: holder.currentBody.highlight ? '#ffff00' : 'none'\n      },\n      newSection: {\n        width: '100%',\n        marginTop: 20,\n        padding: 15,\n        backgroundColor: 'rgb(0, 0, 0, 0.1)',\n        display: 'flex',\n        justifyContent: 'center',\n        transition: 'background-color .4s ease',\n        '&:hover': {\n          backgroundColor: 'rgb(0, 0, 0, 0.2)'\n        }\n      },\n      inputs: {\n        width: '100%',\n        padding: 0,\n        lineHeight: '1.5rem'\n      }\n    };\n  });\n  var classes = useStyles();\n  return React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    className: classes.container,\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    style: {\n      width: '100%',\n      marginTop: parseInt(holder.title.marginTop),\n      marginBottom: parseInt(holder.title.marginBottom)\n    },\n    inputProps: {\n      className: classes.typo\n    },\n    InputProps: {\n      className: classes.inputs\n    },\n    value: holder.title.text,\n    onClick: function onClick() {\n      return holder.handleSectionMode({\n        el: 'title'\n      });\n    },\n    onChange: function onChange(e) {\n      return holder.handleInput(e, {\n        El: 'title'\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(Jumbotron, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), holder.body.map(function (section, index) {\n    if (section.isText) {\n      return React.createElement(TextField, {\n        style: {\n          width: '100%',\n          marginTop: parseInt(holder.body[index].marginTop),\n          marginBottom: parseInt(holder.body[index].marginBottom)\n        },\n        multiline: true,\n        inputProps: {\n          style: {\n            width: '100%',\n            fontSize: fontSizes[holder.body[index].textStyle],\n            fontFamily: \"\".concat(holder.body[index].font, \", Helvetica, Arial, sans-serif\"),\n            fontWeight: holder.body[index].bold ? 'bold' : 'normal',\n            fontStyle: holder.body[index].italic ? 'italic' : 'normal',\n            textDecoration: holder.body[index].underline ? 'underline' : 'none',\n            textAlign: holder.body[index].justify,\n            color: holder.body[index].color,\n            backgroundColor: holder.body[index].highlight ? '#ffff00' : 'none'\n          }\n        },\n        InputProps: {\n          className: classes.inputs\n        },\n        value: holder.body[index].text,\n        onClick: function onClick() {\n          return holder.handleSectionMode({\n            el: 'body',\n            index: index\n          });\n        },\n        onChange: function onChange(e) {\n          return holder.handleInput(e, {\n            El: 'body',\n            index: index\n          });\n        },\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      });\n    }\n\n    if (section.isImage) {\n      return React.createElement(Image, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      });\n    }\n  }), React.createElement(Button, {\n    className: classes.newSection,\n    onClick: holder.newBody,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Add Body Section\")), React.createElement(Button, {\n    className: classes.newSection,\n    onClick: holder.newBody,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Add Photo\"))));\n};\n\nexport default Preview;","map":{"version":3,"sources":["/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Preview.js"],"names":["React","useContext","makeStyles","Grid","Typography","TextField","Button","Jumbotron","Image","EditorContext","fontSizes","h1","h2","h3","h4","h5","h6","Preview","holder","useStyles","theme","container","marginTop","typo","fontSize","title","textStyle","fontFamily","font","fontWeight","bold","fontStyle","italic","textDecoration","underline","textAlign","justify","color","backgroundColor","highlight","body","width","currentBody","newSection","padding","display","justifyContent","transition","inputs","lineHeight","classes","parseInt","marginBottom","className","text","handleSectionMode","el","e","handleInput","El","map","section","index","isText","style","isImage","newBody"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,IAAT,EAAeC,UAAf,EAA2BC,SAA3B,EAAsCC,MAAtC,QAAoD,mBAApD;AAEA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AAEA,SAASC,aAAT,QAA8B,6BAA9B;AAEA,IAAMC,SAAS,GAAG;AACdC,EAAAA,EAAE,EAAE,MADU;AAEdC,EAAAA,EAAE,EAAE,SAFU;AAGdC,EAAAA,EAAE,EAAE,MAHU;AAIdC,EAAAA,EAAE,EAAE,UAJU;AAKdC,EAAAA,EAAE,EAAE,QALU;AAMdC,EAAAA,EAAE,EAAE;AANU,CAAlB;;AASA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAElB,MAAMC,MAAM,GAAGjB,UAAU,CAACQ,aAAD,CAAzB;AAEA,MAAMU,SAAS,GAAGjB,UAAU,CAAC,UAAAkB,KAAK;AAAA,WAAK;AACnCC,MAAAA,SAAS,EAAE;AACPC,QAAAA,SAAS,EAAE;AADJ,OADwB;AAInCC,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAEd,SAAS,CAACQ,MAAM,CAACO,KAAP,CAAaC,SAAd,CADjB;AAEFC,QAAAA,UAAU,YAAKT,MAAM,CAACO,KAAP,CAAaG,IAAlB,mCAFR;AAGFC,QAAAA,UAAU,EAAEX,MAAM,CAACO,KAAP,CAAaK,IAAb,GAAoB,MAApB,GAA6B,QAHvC;AAIFC,QAAAA,SAAS,EAAEb,MAAM,CAACO,KAAP,CAAaO,MAAb,GAAsB,QAAtB,GAAiC,QAJ1C;AAKFC,QAAAA,cAAc,EAAEf,MAAM,CAACO,KAAP,CAAaS,SAAb,GAAyB,WAAzB,GAAuC,MALrD;AAMFC,QAAAA,SAAS,EAAEjB,MAAM,CAACO,KAAP,CAAaW,OANtB;AAOFC,QAAAA,KAAK,EAAEnB,MAAM,CAACO,KAAP,CAAaY,KAPlB;AAQFC,QAAAA,eAAe,EAAEpB,MAAM,CAACO,KAAP,CAAac,SAAb,GAAyB,SAAzB,GAAqC;AARpD,OAJ6B;AAcnCC,MAAAA,IAAI,EAAE;AACFC,QAAAA,KAAK,EAAE,MADL;AAEFjB,QAAAA,QAAQ,EAAEd,SAAS,CAACQ,MAAM,CAACO,KAAP,CAAaC,SAAd,CAFjB;AAGFC,QAAAA,UAAU,YAAKT,MAAM,CAACwB,WAAP,CAAmBd,IAAxB,mCAHR;AAIFC,QAAAA,UAAU,EAAEX,MAAM,CAACwB,WAAP,CAAmBZ,IAAnB,GAA0B,MAA1B,GAAmC,QAJ7C;AAKFC,QAAAA,SAAS,EAAEb,MAAM,CAACwB,WAAP,CAAmBV,MAAnB,GAA4B,QAA5B,GAAuC,QALhD;AAMFC,QAAAA,cAAc,EAAEf,MAAM,CAACwB,WAAP,CAAmBR,SAAnB,GAA+B,WAA/B,GAA6C,MAN3D;AAOFC,QAAAA,SAAS,EAAEjB,MAAM,CAACwB,WAAP,CAAmBN,OAP5B;AAQFC,QAAAA,KAAK,EAAEnB,MAAM,CAACwB,WAAP,CAAmBL,KARxB;AASFC,QAAAA,eAAe,EAAEpB,MAAM,CAACwB,WAAP,CAAmBH,SAAnB,GAA+B,SAA/B,GAA2C;AAT1D,OAd6B;AAyBnCI,MAAAA,UAAU,EAAE;AACRF,QAAAA,KAAK,EAAE,MADC;AAERnB,QAAAA,SAAS,EAAE,EAFH;AAGRsB,QAAAA,OAAO,EAAE,EAHD;AAIRN,QAAAA,eAAe,EAAE,mBAJT;AAKRO,QAAAA,OAAO,EAAE,MALD;AAMRC,QAAAA,cAAc,EAAE,QANR;AAORC,QAAAA,UAAU,EAAE,2BAPJ;AAQR,mBAAW;AACPT,UAAAA,eAAe,EAAE;AADV;AARH,OAzBuB;AAqCnCU,MAAAA,MAAM,EAAE;AACJP,QAAAA,KAAK,EAAE,MADH;AAEJG,QAAAA,OAAO,EAAE,CAFL;AAGJK,QAAAA,UAAU,EAAE;AAHR;AArC2B,KAAL;AAAA,GAAN,CAA5B;AA4CA,MAAMC,OAAO,GAAG/B,SAAS,EAAzB;AAEA,SACI,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAE+B,OAAO,CAAC7B,SAAzB;AAAoC,IAAA,IAAI,MAAxC;AAAyC,IAAA,EAAE,EAAE,EAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAE;AACHoB,MAAAA,KAAK,EAAE,MADJ;AAEHnB,MAAAA,SAAS,EAAE6B,QAAQ,CAACjC,MAAM,CAACO,KAAP,CAAaH,SAAd,CAFhB;AAGH8B,MAAAA,YAAY,EAAED,QAAQ,CAACjC,MAAM,CAACO,KAAP,CAAa2B,YAAd;AAHnB,KADX;AAMI,IAAA,UAAU,EAAE;AAAEC,MAAAA,SAAS,EAAEH,OAAO,CAAC3B;AAArB,KANhB;AAOI,IAAA,UAAU,EAAE;AAAE8B,MAAAA,SAAS,EAAEH,OAAO,CAACF;AAArB,KAPhB;AAQI,IAAA,KAAK,EAAE9B,MAAM,CAACO,KAAP,CAAa6B,IARxB;AASI,IAAA,OAAO,EAAE;AAAA,aAAMpC,MAAM,CAACqC,iBAAP,CAAyB;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAzB,CAAN;AAAA,KATb;AAUI,IAAA,QAAQ,EAAE,kBAACC,CAAD;AAAA,aAAOvC,MAAM,CAACwC,WAAP,CAAmBD,CAAnB,EAAsB;AAAEE,QAAAA,EAAE,EAAE;AAAN,OAAtB,CAAP;AAAA,KAVd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAeI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfJ,EAkBQzC,MAAM,CAACsB,IAAP,CAAYoB,GAAZ,CAAgB,UAACC,OAAD,EAAUC,KAAV,EAAoB;AAEhC,QAAID,OAAO,CAACE,MAAZ,EAAoB;AAChB,aACI,oBAAC,SAAD;AACI,QAAA,KAAK,EAAE;AACHtB,UAAAA,KAAK,EAAE,MADJ;AAEHnB,UAAAA,SAAS,EAAE6B,QAAQ,CAACjC,MAAM,CAACsB,IAAP,CAAYsB,KAAZ,EAAmBxC,SAApB,CAFhB;AAGH8B,UAAAA,YAAY,EAAED,QAAQ,CAACjC,MAAM,CAACsB,IAAP,CAAYsB,KAAZ,EAAmBV,YAApB;AAHnB,SADX;AAMI,QAAA,SAAS,EAAE,IANf;AAOI,QAAA,UAAU,EAAE;AACRY,UAAAA,KAAK,EAAE;AACHvB,YAAAA,KAAK,EAAE,MADJ;AAEHjB,YAAAA,QAAQ,EAAEd,SAAS,CAACQ,MAAM,CAACsB,IAAP,CAAYsB,KAAZ,EAAmBpC,SAApB,CAFhB;AAGHC,YAAAA,UAAU,YAAKT,MAAM,CAACsB,IAAP,CAAYsB,KAAZ,EAAmBlC,IAAxB,mCAHP;AAIHC,YAAAA,UAAU,EAAEX,MAAM,CAACsB,IAAP,CAAYsB,KAAZ,EAAmBhC,IAAnB,GAA0B,MAA1B,GAAmC,QAJ5C;AAKHC,YAAAA,SAAS,EAAEb,MAAM,CAACsB,IAAP,CAAYsB,KAAZ,EAAmB9B,MAAnB,GAA4B,QAA5B,GAAuC,QAL/C;AAMHC,YAAAA,cAAc,EAAEf,MAAM,CAACsB,IAAP,CAAYsB,KAAZ,EAAmB5B,SAAnB,GAA+B,WAA/B,GAA6C,MAN1D;AAOHC,YAAAA,SAAS,EAAEjB,MAAM,CAACsB,IAAP,CAAYsB,KAAZ,EAAmB1B,OAP3B;AAQHC,YAAAA,KAAK,EAAEnB,MAAM,CAACsB,IAAP,CAAYsB,KAAZ,EAAmBzB,KARvB;AASHC,YAAAA,eAAe,EAAEpB,MAAM,CAACsB,IAAP,CAAYsB,KAAZ,EAAmBvB,SAAnB,GAA+B,SAA/B,GAA2C;AATzD;AADC,SAPhB;AAqBI,QAAA,UAAU,EAAE;AAAEc,UAAAA,SAAS,EAAEH,OAAO,CAACF;AAArB,SArBhB;AAsBI,QAAA,KAAK,EAAE9B,MAAM,CAACsB,IAAP,CAAYsB,KAAZ,EAAmBR,IAtB9B;AAuBI,QAAA,OAAO,EAAE;AAAA,iBAAMpC,MAAM,CAACqC,iBAAP,CAAyB;AAAEC,YAAAA,EAAE,EAAE,MAAN;AAAcM,YAAAA,KAAK,EAAEA;AAArB,WAAzB,CAAN;AAAA,SAvBb;AAwBI,QAAA,QAAQ,EAAE,kBAACL,CAAD;AAAA,iBAAOvC,MAAM,CAACwC,WAAP,CAAmBD,CAAnB,EAAsB;AAAEE,YAAAA,EAAE,EAAE,MAAN;AAAcG,YAAAA,KAAK,EAAEA;AAArB,WAAtB,CAAP;AAAA,SAxBd;AAyBI,QAAA,GAAG,EAAEA,KAzBT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AA6BH;;AACD,QAAID,OAAO,CAACI,OAAZ,EAAqB;AAAE,aAAO,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAAkB;AAC5C,GAlCD,CAlBR,EAuDI,oBAAC,MAAD;AACI,IAAA,SAAS,EAAEf,OAAO,CAACP,UADvB;AAEI,IAAA,OAAO,EAAEzB,MAAM,CAACgD,OAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAII,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJJ,CAvDJ,EAgEI,oBAAC,MAAD;AACI,IAAA,SAAS,EAAEhB,OAAO,CAACP,UADvB;AAEI,IAAA,OAAO,EAAEzB,MAAM,CAACgD,OAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAII,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJJ,CAhEJ,CAFJ,CADJ;AAgFH,CAlID;;AAoIA,eAAejD,OAAf","sourcesContent":["import React, { useContext } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography, TextField, Button } from '@material-ui/core';\n\nimport Jumbotron from './Tools/Jumbotron';\nimport Image from './Tools/Image';\n\nimport { EditorContext } from '../../Context/EditorContext';\n\nconst fontSizes = {\n    h1: '6rem',\n    h2: '3.75rem',\n    h3: '3rem',\n    h4: '2.125rem',\n    h5: '1.5rem',\n    h6: '1.25rem',\n};\n\nconst Preview = () => {\n\n    const holder = useContext(EditorContext);\n\n    const useStyles = makeStyles(theme => ({\n        container: {\n            marginTop: 120,\n        },\n        typo: {\n            fontSize: fontSizes[holder.title.textStyle],\n            fontFamily: `${holder.title.font}, Helvetica, Arial, sans-serif`,\n            fontWeight: holder.title.bold ? 'bold' : 'normal',\n            fontStyle: holder.title.italic ? 'italic' : 'normal',\n            textDecoration: holder.title.underline ? 'underline' : 'none',\n            textAlign: holder.title.justify,\n            color: holder.title.color,\n            backgroundColor: holder.title.highlight ? '#ffff00' : 'none'\n        },\n        body: {\n            width: '100%',\n            fontSize: fontSizes[holder.title.textStyle],\n            fontFamily: `${holder.currentBody.font}, Helvetica, Arial, sans-serif`,\n            fontWeight: holder.currentBody.bold ? 'bold' : 'normal',\n            fontStyle: holder.currentBody.italic ? 'italic' : 'normal',\n            textDecoration: holder.currentBody.underline ? 'underline' : 'none',\n            textAlign: holder.currentBody.justify,\n            color: holder.currentBody.color,\n            backgroundColor: holder.currentBody.highlight ? '#ffff00' : 'none' \n        },\n        newSection: {\n            width: '100%',\n            marginTop: 20,\n            padding: 15,\n            backgroundColor: 'rgb(0, 0, 0, 0.1)',\n            display: 'flex',\n            justifyContent: 'center',\n            transition: 'background-color .4s ease',\n            '&:hover': {\n                backgroundColor: 'rgb(0, 0, 0, 0.2)',\n            },\n        },\n        inputs: {\n            width: '100%',\n            padding: 0,\n            lineHeight: '1.5rem',\n        },\n    }));\n    \n    const classes = useStyles();\n\n    return (\n        <Grid container>\n\n            <Grid className={classes.container} item xs={12}>\n\n                <TextField \n                    style={{\n                        width: '100%',\n                        marginTop: parseInt(holder.title.marginTop),\n                        marginBottom: parseInt(holder.title.marginBottom),\n                    }}\n                    inputProps={{ className: classes.typo }}\n                    InputProps={{ className: classes.inputs }}\n                    value={holder.title.text}\n                    onClick={() => holder.handleSectionMode({ el: 'title' })}\n                    onChange={(e) => holder.handleInput(e, { El: 'title' })}\n                />\n\n                <Jumbotron />\n                \n                { \n                    holder.body.map((section, index) => {\n                        \n                        if (section.isText) {\n                            return (\n                                <TextField\n                                    style={{\n                                        width: '100%',\n                                        marginTop: parseInt(holder.body[index].marginTop),\n                                        marginBottom: parseInt(holder.body[index].marginBottom),\n                                    }}\n                                    multiline={true}\n                                    inputProps={{\n                                        style: {\n                                            width: '100%',\n                                            fontSize: fontSizes[holder.body[index].textStyle],\n                                            fontFamily: `${holder.body[index].font}, Helvetica, Arial, sans-serif`,\n                                            fontWeight: holder.body[index].bold ? 'bold' : 'normal',\n                                            fontStyle: holder.body[index].italic ? 'italic' : 'normal',\n                                            textDecoration: holder.body[index].underline ? 'underline' : 'none',\n                                            textAlign: holder.body[index].justify,\n                                            color: holder.body[index].color,\n                                            backgroundColor: holder.body[index].highlight ? '#ffff00' : 'none',\n                                                              \n                                        } \n                                    }}\n                                    InputProps={{ className: classes.inputs }}\n                                    value={holder.body[index].text}\n                                    onClick={() => holder.handleSectionMode({ el: 'body', index: index })}\n                                    onChange={(e) => holder.handleInput(e, { El: 'body', index: index })}\n                                    key={index}\n                                />\n                            );\n                        }\n                        if (section.isImage) { return <Image /> }\n                    })\n                }\n\n                <Button\n                    className={classes.newSection}\n                    onClick={holder.newBody}\n                >\n                    <Typography variant=\"h6\">\n                        Add Body Section\n                    </Typography>\n                </Button>\n\n                <Button\n                    className={classes.newSection}\n                    onClick={holder.newBody}\n                >\n                    <Typography variant=\"h6\">\n                        Add Photo\n                    </Typography>\n                </Button>\n\n            </Grid>\n\n        </Grid>\n    );\n};\n\nexport default Preview;\n"]},"metadata":{},"sourceType":"module"}