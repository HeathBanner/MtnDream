{"ast":null,"code":"import _slicedToArray from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Tools/Image.js\";\nimport React, { useContext, useState } from 'react';\nimport { EditorContext } from '../../../Context/EditorContext';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Popover, Button, TextField } from '@material-ui/core';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    container: {\n      width: '100%',\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    paper: {\n      padding: 20,\n      width: 350\n    }\n  };\n});\nexport default (function (_ref) {\n  var src = _ref.src,\n      alt = _ref.alt,\n      index = _ref.index;\n  var classes = useStyles();\n  var holder = useContext(EditorContext);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      anchorEl = _useState2[0],\n      setAnchorEl = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    setAnchorEl(e.currentTarget);\n    holder.handleSectionMode({\n      el: 'image',\n      index: index\n    });\n  };\n\n  var handleClose = function handleClose() {\n    setAnchorEl(null);\n  };\n\n  var open = Boolean(anchorEl);\n  var id = open ? 'simple-popover' : undefined;\n\n  if (src) {\n    return React.createElement(React.Fragment, null, React.createElement(Button, {\n      onClick: handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      style: {\n        width: '100%',\n        height: 'auto'\n      },\n      src: src,\n      alt: alt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    })), React.createElement(Popover, {\n      PaperProps: {\n        className: classes.paper\n      },\n      ModalClasses: {\n        className: classes.paper\n      },\n      id: id,\n      open: open,\n      anchorEl: anchorEl,\n      onClose: handleClose,\n      anchorOrigin: {\n        vertical: 'center',\n        horizontal: 'center'\n      },\n      transformOrigin: {\n        vertical: 'center',\n        horizontal: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      style: {\n        width: '100%'\n      },\n      label: \"Paste Url\",\n      variant: \"outlined\",\n      value: src,\n      onChange: function onChange(e) {\n        return holder.handleInput(e, {\n          El: 'image',\n          index: index\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })));\n  } else {\n    return React.createElement(React.Fragment, null, React.createElement(Button, {\n      variant: \"contained\",\n      onClick: handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Add Image\"), React.createElement(Popover, {\n      PaperProps: {\n        className: classes.paper\n      },\n      id: id,\n      open: open,\n      anchorEl: anchorEl,\n      onClose: handleClose,\n      anchorOrigin: {\n        vertical: 'center',\n        horizontal: 'center'\n      },\n      transformOrigin: {\n        vertical: 'center',\n        horizontal: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      style: {\n        width: '100%'\n      },\n      label: \"Paste Url\",\n      variant: \"outlined\",\n      value: src,\n      onChange: function onChange(e) {\n        return holder.handleInput(e, {\n          El: 'image',\n          index: index\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })));\n  }\n\n  ;\n});","map":{"version":3,"sources":["/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Tools/Image.js"],"names":["React","useContext","useState","EditorContext","makeStyles","Popover","Button","TextField","useStyles","theme","container","width","display","justifyContent","paper","padding","src","alt","index","classes","holder","anchorEl","setAnchorEl","handleClick","e","currentTarget","handleSectionMode","el","handleClose","open","Boolean","id","undefined","height","className","vertical","horizontal","handleInput","El"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { EditorContext } from '../../../Context/EditorContext';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n    Popover,\n    Button,\n    TextField\n} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    paper: {\n        padding: 20,\n        width: 350,\n    }\n}));\n\nexport default ({ src, alt, index }) => {\n    \n    const classes = useStyles();\n    const holder = useContext(EditorContext);\n\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const handleClick = e => {\n        setAnchorEl(e.currentTarget);\n        holder.handleSectionMode({ el: 'image', index: index });\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popover' : undefined;\n\n    if (src) {\n        return (\n            <>\n                <Button onClick={handleClick}>\n                    <img \n                        style={{ width: '100%', height: 'auto' }} \n                        src={src} \n                        alt={alt} \n                    />\n                </Button>\n\n                <Popover\n                    PaperProps={{ className: classes.paper }}\n                    ModalClasses={{ className: classes.paper}}\n                    id={id}\n                    open={open}\n                    anchorEl={anchorEl}\n                    onClose={handleClose}\n                    anchorOrigin={{\n                        vertical: 'center',\n                        horizontal: 'center',\n                    }}\n                    transformOrigin={{\n                        vertical: 'center',\n                        horizontal: 'center',\n                    }}\n                > \n                    <TextField \n                        style={{ width: '100%' }}\n                        label=\"Paste Url\"\n                        variant=\"outlined\"\n                        value={src}\n                        onChange={(e) => holder.handleInput(e, { El: 'image', index: index })}\n                    />\n                </Popover>\n            </>\n        );\n    } else {\n        return (\n            <>\n                <Button variant=\"contained\" onClick={handleClick}>\n                    Add Image\n                </Button>\n\n                <Popover\n                    PaperProps={{ className: classes.paper }}\n                    id={id}\n                    open={open}\n                    anchorEl={anchorEl}\n                    onClose={handleClose}\n                    anchorOrigin={{\n                        vertical: 'center',\n                        horizontal: 'center',\n                    }}\n                    transformOrigin={{\n                        vertical: 'center',\n                        horizontal: 'center',\n                    }}\n                > \n                    <TextField\n                        style={{ width: '100%' }}\n                        label=\"Paste Url\"\n                        variant=\"outlined\"\n                        value={src}\n                        onChange={(e) => holder.handleInput(e, { El: 'image', index: index })}\n                    />\n                </Popover>\n            </>\n        );\n    };\n};\n"]},"metadata":{},"sourceType":"module"}