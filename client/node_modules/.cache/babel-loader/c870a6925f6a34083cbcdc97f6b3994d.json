{"ast":null,"code":"import _defineProperty from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/God/Desktop/github/mtndream/MtnDream/client/src/Context/EditorContext.js\";\nimport React, { useState, createContext, useEffect } from 'react';\nexport var EditorContext = createContext();\nvar intialPreview = {\n  text: '',\n  bold: false,\n  italic: false,\n  underline: false,\n  color: 'black',\n  highlight: false,\n  font: 'Roboto',\n  justify: 'left',\n  textStyle: 'body1'\n};\nexport var EditorProvider = function EditorProvider(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      editMode = _useState2[0],\n      setEditMode = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      articleList = _useState4[0],\n      setArticleList = _useState4[1];\n\n  var _useState5 = useState({\n    el: 'title'\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      sectionMode = _useState6[0],\n      setSectionMode = _useState6[1];\n\n  var _useState7 = useState(_objectSpread({}, intialPreview)),\n      _useState8 = _slicedToArray(_useState7, 2),\n      title = _useState8[0],\n      setTitle = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      jumbotron = _useState10[0],\n      setJumbotron = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      currentBody = _useState12[0],\n      setCurrentBody = _useState12[1];\n\n  var _useState13 = useState([_objectSpread({}, intialPreview)]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      body = _useState14[0],\n      setBody = _useState14[1];\n\n  useEffect(function () {\n    fetch('/api/editors/getList').then(function (res) {\n      return res.json();\n    }).then(function (result) {\n      setArticleList(result);\n    }).catch(function (error) {});\n  }, []);\n  useEffect(function () {\n    console.log(sectionMode);\n  }, [sectionMode]);\n\n  var handleMode = function handleMode() {\n    setEditMode(!editMode);\n  };\n\n  var editArticle = function editArticle(index) {\n    setTitle(articleList[index].title);\n    setJumbotron(articleList[index].jumbotron);\n    setBody(articleList[index].body);\n    setEditMode(!editMode);\n  };\n\n  var editBodyEl = function editBodyEl(index) {\n    setCurrentBody(index);\n  };\n\n  var newBodyEl = function newBodyEl() {\n    var newBody = body;\n    newBody.push(_objectSpread({}, intialPreview));\n    setCurrentBody(newBody.length - 1);\n    setBody(_toConsumableArray(newBody));\n  };\n\n  var handleSectionMode = function handleSectionMode(newSection) {\n    console.log(newSection);\n\n    switch (true) {\n      case newSection.el === 'title' && newSection.el !== sectionMode.el:\n        setSectionMode(newSection);\n        break;\n\n      case newSection.el === 'jumbotron' && newSection.el !== sectionMode.el:\n        setSectionMode(newSection);\n        break;\n\n      case newSection.index !== sectionMode.index:\n        editBodyEl(newSection.index);\n        setSectionMode(newSection);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  var handleSubmit = function handleSubmit(data) {\n    fetch('/api/editors/newSection', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (result) {\n      setTitle(result.title);\n      setJumbotron(result.jumbotron);\n      setBody(result.body);\n    }).catch(function (error) {});\n  };\n\n  var handleBody = function handleBody(input, index) {\n    var newBody = body;\n    console.log(index);\n    newBody[index].text = input;\n    setBody([newBody]);\n  };\n\n  var newBody = function newBody() {\n    var newBody = body;\n    newBody.push(intialPreview);\n    setBody(_toConsumableArray(newBody));\n  };\n\n  var handleInput = function handleInput(e, section) {\n    var input = e.target.value;\n\n    switch (section.El) {\n      case 'title':\n        setTitle(_objectSpread({}, title, {\n          text: input\n        }));\n        break;\n\n      case 'jumbotron':\n        setJumbotron(input);\n        break;\n\n      case 'body':\n        handleBody(input, section.index);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  var handleArticle = function handleArticle() {\n    var section = {\n      sectionMode: sectionMode,\n      title: title,\n      jumbotron: jumbotron,\n      body: body\n    };\n    handleSubmit(section);\n  };\n\n  var handleFont = function handleFont(newFont) {\n    switch (sectionMode.el) {\n      case 'title':\n        setTitle(_objectSpread({}, title, {\n          font: newFont\n        }));\n        break;\n\n      case 'body':\n        var _newBody = body;\n        _newBody[sectionMode.index].font = newFont;\n        setBody(_toConsumableArray(_newBody));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  var handleStyling = function handleStyling(style) {\n    switch (sectionMode.el) {\n      case 'title':\n        setTitle(_objectSpread({}, title, _defineProperty({}, style, !title[style])));\n        break;\n\n      case 'body':\n        var _newBody2 = body;\n        _newBody2[sectionMode.index][style] = !_newBody2[sectionMode.index][style];\n        setBody(_toConsumableArray(_newBody2));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  var handleJustify = function handleJustify(justification) {\n    switch (sectionMode.el) {\n      case 'title':\n        setTitle(_objectSpread({}, title, {\n          justify: justification\n        }));\n        break;\n\n      case 'body':\n        var _newBody3 = body;\n        _newBody3[sectionMode.index].justify = justification;\n        setBody(_toConsumableArray(_newBody3));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  var handleTextStyle = function handleTextStyle(style) {\n    console.log(sectionMode.index);\n\n    switch (sectionMode.el) {\n      case 'title':\n        setTitle(_objectSpread({}, title, {\n          textStyle: style\n        }));\n        break;\n\n      case 'body':\n        var _newBody4 = body;\n        _newBody4[sectionMode.index].textStyle = style;\n        setBody(_toConsumableArray(_newBody4));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return React.createElement(EditorContext.Provider, {\n    value: {\n      handleInput: handleInput,\n      title: title,\n      jumbotron: jumbotron,\n      currentBody: currentBody,\n      body: body,\n      handleStyling: handleStyling,\n      handleFont: handleFont,\n      handleJustify: handleJustify,\n      handleTextStyle: handleTextStyle,\n      handleArticle: handleArticle,\n      editMode: editMode,\n      editArticle: editArticle,\n      editBodyEl: editBodyEl,\n      newBodyEl: newBodyEl,\n      handleMode: handleMode,\n      articleList: articleList,\n      sectionMode: sectionMode,\n      handleSectionMode: handleSectionMode,\n      newBody: newBody\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, props.children);\n};","map":{"version":3,"sources":["/Users/God/Desktop/github/mtndream/MtnDream/client/src/Context/EditorContext.js"],"names":["React","useState","createContext","useEffect","EditorContext","intialPreview","text","bold","italic","underline","color","highlight","font","justify","textStyle","EditorProvider","props","editMode","setEditMode","articleList","setArticleList","el","sectionMode","setSectionMode","title","setTitle","jumbotron","setJumbotron","currentBody","setCurrentBody","body","setBody","fetch","then","res","json","result","catch","error","console","log","handleMode","editArticle","index","editBodyEl","newBodyEl","newBody","push","length","handleSectionMode","newSection","handleSubmit","data","method","JSON","stringify","headers","handleBody","input","handleInput","e","section","target","value","El","handleArticle","handleFont","newFont","handleStyling","style","handleJustify","justification","handleTextStyle","children"],"mappings":"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","sourcesContent":["import React, { useState, createContext, useEffect } from 'react';\n\nexport const EditorContext = createContext();\n\nconst intialPreview = {\n    text: '',\n    bold: false,\n    italic: false,\n    underline: false,\n    color: 'black',\n    highlight: false,\n    font: 'Roboto',\n    justify: 'left',\n    textStyle: 'body1',\n}\n\nexport const EditorProvider = props => {\n\n    const [editMode, setEditMode] = useState(false);\n    const [articleList, setArticleList] = useState([]);\n\n    const [sectionMode, setSectionMode] = useState({ el: 'title' });\n    const [title, setTitle] = useState({ ...intialPreview });\n    const [jumbotron, setJumbotron] = useState('');\n    const [currentBody, setCurrentBody] = useState(0);\n    const [body, setBody] = useState([ { ...intialPreview } ]);\n    \n    useEffect(() => {\n        fetch('/api/editors/getList')\n        .then(res => res.json())\n        .then((result) => {\n            setArticleList(result)\n        })\n        .catch((error) => {});\n    }, [] );\n\n    useEffect(() => {\n        console.log(sectionMode);\n    }, [sectionMode])\n\n    const handleMode = () => {\n        setEditMode(!editMode);\n    };\n\n    const editArticle = index => {\n\n        setTitle(articleList[index].title);\n        setJumbotron(articleList[index].jumbotron);\n        setBody(articleList[index].body);\n        setEditMode(!editMode);\n    };\n\n    const editBodyEl = index => {\n\n        setCurrentBody(index);\n    };\n\n    const newBodyEl = () => {\n\n        const newBody = body;\n        newBody.push({ ...intialPreview });\n\n        setCurrentBody( newBody.length - 1 );\n        setBody([ ...newBody ]);\n    };\n\n    const handleSectionMode = (newSection) => {\n        console.log(newSection);\n        switch (true) {\n            case newSection.el === 'title' && newSection.el !== sectionMode.el:\n                setSectionMode(newSection);\n                break;\n\n            case newSection.el === 'jumbotron' && newSection.el !== sectionMode.el:\n                setSectionMode(newSection);\n                break;\n\n            case newSection.index !== sectionMode.index:\n                editBodyEl(newSection.index);\n                setSectionMode(newSection);\n                break;\n\n            default:\n                return\n        }\n    };\n\n    const handleSubmit = data => {\n        fetch('/api/editors/newSection',{\n            method: 'POST',\n            body: JSON.stringify(data),\n            headers: {'Content-Type': 'application/json'}\n        })\n        .then(res => res.json())\n        .then((result) => {\n            setTitle(result.title);\n            setJumbotron(result.jumbotron);\n            setBody(result.body);\n        })\n        .catch(error => {})\n    };\n\n    const handleBody = ( input, index ) => {\n        let newBody = body;\n        console.log(index);\n        newBody[index].text = input;\n        setBody([newBody]);\n    };\n\n    const newBody = () => {\n        let newBody = body;\n        newBody.push(intialPreview);\n        setBody([...newBody])\n    };\n\n    const handleInput = ( e, section ) => {\n        let input = e.target.value;\n        switch (section.El) {\n            case 'title':\n                setTitle({ ...title, text: input });\n                break;\n            case 'jumbotron':\n                setJumbotron(input);\n                break;\n            case 'body':\n                handleBody(input, section.index);\n                break;\n            default:\n                return\n        }\n    };\n\n    const handleArticle = () => {\n        let section = {\n            sectionMode: sectionMode,\n            title: title,\n            jumbotron: jumbotron,\n            body: body,\n        };\n        handleSubmit(section);\n    };\n\n    const handleFont = ( newFont ) => {\n        switch (sectionMode.el) {\n            case 'title':\n                setTitle({ ...title, font: newFont });\n                break;\n            case 'body':\n                let newBody = body;\n                newBody[sectionMode.index].font = newFont;\n                setBody([ ...newBody ]);\n                break;\n            default:\n                break;\n        }\n    };\n\n    const handleStyling = (style) => {\n        switch (sectionMode.el) {\n            case 'title':\n                setTitle({ ...title, [style]: !title[style] });\n                break;\n            case 'body':\n                let newBody = body;\n                newBody[sectionMode.index][style] = !newBody[sectionMode.index][style];    \n                setBody([ ...newBody ]);   \n                break;\n            default:\n                break;\n        }\n    };\n\n    const handleJustify = justification => {\n        switch (sectionMode.el) {\n            case 'title':\n                setTitle({ ...title, justify: justification });\n                break;\n            case 'body':\n                let newBody = body;\n                newBody[sectionMode.index].justify = justification;    \n                setBody([ ...newBody ]);\n                break;\n            default:\n                break;\n        }\n    };\n\n    const handleTextStyle = (style) => {\n        console.log(sectionMode.index);\n        switch (sectionMode.el) {\n            case 'title':\n                setTitle({ ...title, textStyle: style });\n                break;\n            case 'body':\n                let newBody = body;\n                newBody[sectionMode.index].textStyle = style;    \n                setBody([ ...newBody ]);\n                break;\n            default:\n                break;\n        }\n    };\n\n    return (\n\n        <EditorContext.Provider\n            value={{\n                handleInput,\n                title,\n                jumbotron,\n                currentBody,\n                body,\n                handleStyling,\n                handleFont,\n                handleJustify,\n                handleTextStyle,\n                handleArticle,\n                editMode,\n                editArticle,\n                editBodyEl,\n                newBodyEl,\n                handleMode,\n                articleList,\n                sectionMode,\n                handleSectionMode,\n                newBody,\n            }}\n        >\n\n            {props.children}\n\n        </EditorContext.Provider>\n    );\n};"]},"metadata":{},"sourceType":"module"}