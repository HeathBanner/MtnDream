{"ast":null,"code":"var _jsxFileName = \"/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Preview.js\";\nimport React, { useContext, useEffect, Fragment } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography, TextField } from '@material-ui/core';\nimport { EditorContext } from '../../Context/EditorContext';\nvar fontSizes = {\n  h1: '6rem',\n  h2: '3.75rem',\n  h3: '3rem',\n  h4: '2.125rem',\n  h5: '1.5rem',\n  h6: '1.25rem'\n};\n\nvar Preview = function Preview() {\n  var holder = useContext(EditorContext);\n  var useStyles = makeStyles(function (theme) {\n    return {\n      container: {\n        height: '80vh'\n      },\n      typo: {\n        fontSize: fontSizes[holder.title.textStyle],\n        fontFamily: \"\".concat(holder.title.font, \", Helvetica, Arial, sans-serif\"),\n        fontWeight: holder.title.bold ? 'bold' : 'normal',\n        fontStyle: holder.title.italic ? 'italic' : 'normal',\n        textDecoration: holder.title.underline ? 'underline' : 'none',\n        textAlign: holder.title.justify,\n        color: holder.title.color,\n        backgroundColor: holder.title.highlight ? '#ffff00' : 'none'\n      },\n      body: {\n        width: '100%',\n        fontSize: fontSizes[holder.title.textStyle],\n        fontFamily: \"\".concat(holder.currentBody.font, \", Helvetica, Arial, sans-serif\"),\n        fontWeight: holder.currentBody.bold ? 'bold' : 'normal',\n        fontStyle: holder.currentBody.italic ? 'italic' : 'normal',\n        textDecoration: holder.currentBody.underline ? 'underline' : 'none',\n        textAlign: holder.currentBody.justify,\n        color: holder.currentBody.color,\n        backgroundColor: holder.currentBody.highlight ? '#ffff00' : 'none'\n      }\n    };\n  });\n  var classes = useStyles();\n  return React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    className: classes.container,\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    style: {\n      width: '100%'\n    },\n    variant: \"outlined\",\n    inputProps: {\n      className: classes.typo\n    },\n    value: holder.title.text,\n    onClick: function onClick() {\n      return holder.handleSectionMode({\n        el: 'title'\n      });\n    },\n    onChange: function onChange(e) {\n      return holder.handleInput(e, {\n        El: 'title'\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), holder.jumbotron ? React.createElement(\"img\", {\n    style: {\n      width: '100%',\n      height: 'auto'\n    },\n    src: holder.jumbotron,\n    alt: holder.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }) : '', holder.body.map(function (section, index) {\n    return React.createElement(TextField, {\n      style: {\n        width: '100%'\n      },\n      inputProps: {\n        style: {\n          width: '100%',\n          fontSize: fontSizes[holder.body[index].textStyle],\n          fontFamily: \"\".concat(holder.body[index].font, \", Helvetica, Arial, sans-serif\"),\n          fontWeight: holder.body[index].bold ? 'bold' : 'normal',\n          fontStyle: holder.body[index].italic ? 'italic' : 'normal',\n          textDecoration: holder.body[index].underline ? 'underline' : 'none',\n          textAlign: holder.body[index].justify,\n          color: holder.body[index].color,\n          backgroundColor: holder.body[index].highlight ? '#ffff00' : 'none'\n        }\n      },\n      variant: \"outlined\",\n      value: section.text,\n      onClick: function onClick() {\n        return holder.handleSectionMode({\n          el: 'body',\n          index: index\n        });\n      },\n      onChange: function onChange(e) {\n        return holder.handleInput(e, {\n          El: 'body',\n          index: index\n        });\n      },\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }) // <Typography\n    //     \n    //     style={{\n    //         fontFamily: `${section.font}, Helvetica, Arial, sans-serif`,\n    //         fontWeight: section.bold ? 'bold' : 'normal',\n    //         fontStyle: section.italic ? 'italic' : 'normal',\n    //         textDecoration: section.underline ? 'underline' : 'none',\n    //         color: section.color,\n    //         backgroundColor: section.highlight ? '#ffff00' : 'none'                        \n    //     }}\n    //     variant={section.textStyle}\n    //     align={section.justify}\n    //     key={index}\n    // >\n    //     {section.text}\n    // </Typography>\n    ;\n  }), React.createElement(Typography, {\n    className: classes.body,\n    variant: holder.currentBody.textStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, holder.currentBody.text)));\n};\n\nexport default Preview;","map":{"version":3,"sources":["/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Preview.js"],"names":["React","useContext","useEffect","Fragment","makeStyles","Grid","Typography","TextField","EditorContext","fontSizes","h1","h2","h3","h4","h5","h6","Preview","holder","useStyles","theme","container","height","typo","fontSize","title","textStyle","fontFamily","font","fontWeight","bold","fontStyle","italic","textDecoration","underline","textAlign","justify","color","backgroundColor","highlight","body","width","currentBody","classes","className","text","handleSectionMode","el","e","handleInput","El","jumbotron","map","section","index","style"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, Fragment } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography, TextField } from '@material-ui/core';\n\nimport { EditorContext } from '../../Context/EditorContext';\n\nconst fontSizes = {\n    h1: '6rem',\n    h2: '3.75rem',\n    h3: '3rem',\n    h4: '2.125rem',\n    h5: '1.5rem',\n    h6: '1.25rem',\n}\n\nconst Preview = () => {\n\n    const holder = useContext(EditorContext);\n\n    const useStyles = makeStyles(theme => ({\n        container: {\n            height: '80vh',\n        },\n        typo: {\n            fontSize: fontSizes[holder.title.textStyle],\n            fontFamily: `${holder.title.font}, Helvetica, Arial, sans-serif`,\n            fontWeight: holder.title.bold ? 'bold' : 'normal',\n            fontStyle: holder.title.italic ? 'italic' : 'normal',\n            textDecoration: holder.title.underline ? 'underline' : 'none',\n            textAlign: holder.title.justify,\n            color: holder.title.color,\n            backgroundColor: holder.title.highlight ? '#ffff00' : 'none'\n        },\n        body: {\n            width: '100%',\n            fontSize: fontSizes[holder.title.textStyle],\n            fontFamily: `${holder.currentBody.font}, Helvetica, Arial, sans-serif`,\n            fontWeight: holder.currentBody.bold ? 'bold' : 'normal',\n            fontStyle: holder.currentBody.italic ? 'italic' : 'normal',\n            textDecoration: holder.currentBody.underline ? 'underline' : 'none',\n            textAlign: holder.currentBody.justify,\n            color: holder.currentBody.color,\n            backgroundColor: holder.currentBody.highlight ? '#ffff00' : 'none' \n        },\n    }));\n    \n    const classes = useStyles();\n\n    return (\n        \n        <Grid container>\n\n            <Grid className={classes.container} item xs={12}>\n\n                <TextField \n                    style={{width: '100%'}}\n                    variant=\"outlined\"\n                    inputProps={{className: classes.typo}}\n                    value={holder.title.text}\n                    onClick={() => holder.handleSectionMode({ el: 'title' })}\n                    onChange={(e) => holder.handleInput(e, { El: 'title' })}\n                />\n\n                {\n                    holder.jumbotron\n                        ?\n                    <img style={{ width: '100%', height: 'auto' }} src={holder.jumbotron} alt={holder.title} />\n                        :\n                    ''\n                }\n                \n                { \n                    holder.body.map((section, index) => {\n                        return (\n\n                            <TextField \n                                style={{width: '100%'}}\n                                inputProps={{style:{\n                                    width: '100%',\n                                    fontSize: fontSizes[holder.body[index].textStyle],\n                                    fontFamily: `${holder.body[index].font}, Helvetica, Arial, sans-serif`,\n                                    fontWeight: holder.body[index].bold ? 'bold' : 'normal',\n                                    fontStyle: holder.body[index].italic ? 'italic' : 'normal',\n                                    textDecoration: holder.body[index].underline ? 'underline' : 'none',\n                                    textAlign: holder.body[index].justify,\n                                    color: holder.body[index].color,\n                                    backgroundColor: holder.body[index].highlight ? '#ffff00' : 'none'                         \n                                }}}\n                                variant=\"outlined\"\n                                value={section.text}\n                                onClick={() => holder.handleSectionMode({ el: 'body', index: index })}\n                                onChange={(e) => holder.handleInput(e, { El: 'body', index: index })} \n                                key={index}       \n                            />\n                            // <Typography\n                            //     \n                            //     style={{\n                            //         fontFamily: `${section.font}, Helvetica, Arial, sans-serif`,\n                            //         fontWeight: section.bold ? 'bold' : 'normal',\n                            //         fontStyle: section.italic ? 'italic' : 'normal',\n                            //         textDecoration: section.underline ? 'underline' : 'none',\n                            //         color: section.color,\n                            //         backgroundColor: section.highlight ? '#ffff00' : 'none'                        \n                            //     }}\n                            //     variant={section.textStyle}\n                            //     align={section.justify}\n                            //     key={index}\n                            // >\n                            //     {section.text}\n                            // </Typography>\n                        )\n                    })\n                }\n\n                <Typography className={classes.body} variant={holder.currentBody.textStyle}>\n                    {holder.currentBody.text}\n                </Typography>\n\n            </Grid>\n\n        </Grid>\n    );\n};\n\nexport default Preview;"]},"metadata":{},"sourceType":"module"}