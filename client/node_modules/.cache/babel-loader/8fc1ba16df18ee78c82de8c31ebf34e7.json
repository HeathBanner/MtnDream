{"ast":null,"code":"import _defineProperty from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var handleFetchList =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var result, json;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch('/api/editors/getList');\n\n          case 2:\n            result = _context.sent;\n            _context.next = 5;\n            return result.json();\n\n          case 5:\n            json = _context.sent;\n            return _context.abrupt(\"return\", json);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function handleFetchList() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var fetchEditArticle =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(title) {\n    var result, json;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch('/api/editors/getArticle', {\n              method: 'POST',\n              body: JSON.stringify({\n                title: title\n              }),\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            });\n\n          case 2:\n            result = _context2.sent;\n            _context2.next = 5;\n            return result.json();\n\n          case 5:\n            json = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              title: json.title,\n              description: json.description,\n              readLength: json.readLength,\n              jumbotron: json.jumbotron,\n              body: json.body\n            });\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function fetchEditArticle(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var handleImages =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(file, isBody, article, index) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function handleImages(_x2, _x3, _x4, _x5) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var handleInputSwitch =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(value, section, article) {\n    var newBody, result, reader;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            newBody = article.body;\n\n            if (section.El === 'image' || section.El === 'jumbtron') {\n              reader = new FileReader();\n\n              reader.onload = function (e) {\n                var parsed = e.target.result.split(\"base64,\");\n\n                if (section.El === 'image') {\n                  newBody[section.index].src = parsed[1];\n                  console.log('HIT');\n                  return _objectSpread({}, article, {\n                    body: newBody\n                  });\n                }\n\n                return _objectSpread({}, article, {\n                  jumbotron: _objectSpread({}, article.jumbotron, {\n                    src: parsed[1]\n                  })\n                });\n              };\n\n              reader.readAsDataURL(value);\n            }\n\n            _context4.t0 = section.El;\n            _context4.next = _context4.t0 === 'title' ? 5 : _context4.t0 === 'description' ? 6 : _context4.t0 === 'readLength' ? 7 : _context4.t0 === 'body' ? 8 : 10;\n            break;\n\n          case 5:\n            return _context4.abrupt(\"return\", _objectSpread({}, article, {\n              title: _objectSpread({}, article.title, {\n                text: value\n              })\n            }));\n\n          case 6:\n            return _context4.abrupt(\"return\", _objectSpread({}, article, {\n              description: _objectSpread({}, article.description, {\n                text: value\n              })\n            }));\n\n          case 7:\n            return _context4.abrupt(\"return\", _objectSpread({}, article, {\n              readLength: _objectSpread({}, article.readLength, {\n                text: value\n              })\n            }));\n\n          case 8:\n            newBody[section.index] = _objectSpread({}, newBody[section.index], {\n              text: value\n            });\n            return _context4.abrupt(\"return\", _objectSpread({}, article, {\n              body: newBody\n            }));\n\n          case 10:\n            return _context4.abrupt(\"return\");\n\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function handleInputSwitch(_x6, _x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var handleFontSwitch = function handleFontSwitch(newFont, article) {\n  switch (article.sectionMode.el) {\n    case 'title':\n      return _objectSpread({}, article, {\n        title: _objectSpread({}, article.title, {\n          font: newFont\n        })\n      });\n\n    case 'description':\n      return _objectSpread({}, article, {\n        description: _objectSpread({}, article.description, {\n          font: newFont\n        })\n      });\n\n    case 'readLength':\n      return _objectSpread({}, article, {\n        readLength: _objectSpread({}, article.readLength, {\n          font: newFont\n        })\n      });\n\n    case 'body':\n      var newBody = article.body;\n      newBody[article.sectionMode.index].font = newFont;\n      return _objectSpread({}, article, {\n        body: _toConsumableArray(newBody)\n      });\n\n    default:\n      break;\n  }\n};\nexport var hanldeStylingSwitch = function hanldeStylingSwitch(style, article) {\n  switch (article.sectionMode.el) {\n    case 'title':\n      return _objectSpread({}, article, {\n        title: _objectSpread({}, article.title, _defineProperty({}, style, !article.title[style]))\n      });\n\n    case 'body':\n      var newBody = article.body;\n      newBody[article.sectionMode.index][style] = !newBody[article.sectionMode.index][style];\n      return _objectSpread({}, article, {\n        body: _toConsumableArray(newBody)\n      });\n\n    default:\n      break;\n  }\n};\nexport var handleJustifySwitch = function handleJustifySwitch(justification, article) {\n  var result;\n\n  switch (article.sectionMode.el) {\n    case 'title':\n      return _objectSpread({}, article, {\n        title: _objectSpread({}, article.title, {\n          justify: justification\n        })\n      });\n\n    case 'description':\n      result = handleInfoJustifySwitch(justification, article);\n      return result;\n\n    case 'readLength':\n      result = handleInfoJustifySwitch(justification, article);\n      return result;\n\n    case 'jumbotron':\n      result = handleJumboJustifySwitch(justification, article);\n      return result;\n\n    case 'body':\n      var newBody = article.body;\n      newBody[article.sectionMode.index].justify = justification;\n      return _objectSpread({}, article, {\n        body: _toConsumableArray(newBody)\n      });\n\n    case 'image':\n      result = handleImageJustifySwitch(justification, article);\n      return result;\n\n    default:\n      break;\n  }\n};\nexport var handleTextStyleSwitch = function handleTextStyleSwitch(style, article) {\n  switch (article.sectionMode.el) {\n    case 'title':\n      return _objectSpread({}, article, {\n        title: _objectSpread({}, article.title, {\n          textStyle: style\n        })\n      });\n\n    case 'body':\n      var newBody = article.body;\n      newBody[article.sectionMode.index].textStyle = style;\n      return _objectSpread({}, article, {\n        body: _toConsumableArray(newBody)\n      });\n\n    default:\n      break;\n  }\n};\nexport var handleTextColorSwitch = function handleTextColorSwitch(color, article) {\n  switch (article.sectionMode.el) {\n    case 'title':\n      return _objectSpread({}, article, {\n        title: _objectSpread({}, article.title, {\n          color: color\n        })\n      });\n\n    case 'description':\n      return _objectSpread({}, article, {\n        desciption: _objectSpread({}, article.description, {\n          color: color\n        })\n      });\n\n    case 'body':\n      var newBody = article.body;\n      newBody[article.sectionMode.index].color = color;\n      return _objectSpread({}, article, {\n        body: _toConsumableArray(newBody)\n      });\n\n    default:\n      break;\n  }\n}; // The initial state for text elements\n\nexport var initialPreview = {\n  text: '',\n  bold: false,\n  italic: false,\n  underline: false,\n  color: 'black',\n  highlight: false,\n  font: 'Roboto',\n  justify: 'left',\n  textStyle: 'body1',\n  marginTop: 40,\n  marginBottom: 0,\n  isText: true,\n  isImage: false\n}; // The initial state for Info\n\nexport var initialInfo = {\n  text: '',\n  font: 'Roboto',\n  justify: 'center',\n  color: ''\n}; // The initial state for Images\n\nexport var initialImg = {\n  isImage: true,\n  src: '',\n  alt: '',\n  height: '',\n  width: '',\n  justify: 'center',\n  marginTop: 40,\n  marginBottom: 0\n};\nexport var initialArticle = {\n  sectionMode: {\n    el: 'title'\n  },\n  title: _objectSpread({}, initialPreview, {\n    isPublished: false\n  }),\n  description: _objectSpread({}, initialInfo, {\n    textStyle: 'h5'\n  }),\n  readLength: initialInfo,\n  jumbotron: initialImg,\n  body: [initialPreview]\n}; // This function will check with section the user is in\n// and update the value with the new selected value\n\nvar handleJumboJustifySwitch = function handleJumboJustifySwitch(justification, article) {\n  return _objectSpread({}, article, {\n    jumbotron: _objectSpread({}, article.jumbotron, {\n      justify: justification\n    })\n  });\n}; // This function will check with section the user is in\n// and update the value with the new selected value\n\n\nvar handleInfoJustifySwitch = function handleInfoJustifySwitch(justification, article) {\n  if (article.sectionMode.el === 'description') {\n    return _objectSpread({}, article, {\n      description: _objectSpread({}, article.description, {\n        justify: justification\n      })\n    });\n  }\n\n  return _objectSpread({}, article, {\n    readLength: _objectSpread({}, article.readLength, {\n      justify: justification\n    })\n  });\n}; // This function will check with section the user is in\n// and update the value with the new selected value\n\n\nvar handleImageJustifySwitch = function handleImageJustifySwitch(justification, article) {\n  var newBody = article.body;\n\n  if (justification === 'left') {\n    newBody[article.sectionMode.index].justify = 'flex-start';\n  }\n\n  if (justification === 'center' || 'justify') {\n    newBody[article.sectionMode.index].justify = 'center';\n  } else {\n    newBody[article.sectionMode.index].justify = 'flex-end';\n  }\n\n  return _objectSpread({}, article, {\n    body: [newBody]\n  });\n};","map":{"version":3,"sources":["/Users/God/Desktop/github/mtndream/MtnDream/client/src/Context/Services/EditorServices.js"],"names":["handleFetchList","fetch","result","json","fetchEditArticle","title","method","body","JSON","stringify","headers","description","readLength","jumbotron","handleImages","file","isBody","article","index","handleInputSwitch","value","section","newBody","El","reader","FileReader","onload","e","parsed","target","split","src","console","log","readAsDataURL","text","handleFontSwitch","newFont","sectionMode","el","font","hanldeStylingSwitch","style","handleJustifySwitch","justification","justify","handleInfoJustifySwitch","handleJumboJustifySwitch","handleImageJustifySwitch","handleTextStyleSwitch","textStyle","handleTextColorSwitch","color","desciption","initialPreview","bold","italic","underline","highlight","marginTop","marginBottom","isText","isImage","initialInfo","initialImg","alt","height","width","initialArticle","isPublished"],"mappings":";;;;;AAAA,OAAO,IAAMA,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACNC,KAAK,CAAC,sBAAD,CADC;;AAAA;AACrBC,YAAAA,MADqB;AAAA;AAAA,mBAERA,MAAM,CAACC,IAAP,EAFQ;;AAAA;AAErBA,YAAAA,IAFqB;AAAA,6CAGpBA,IAHoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfH,eAAe;AAAA;AAAA;AAAA,GAArB;AAMP,OAAO,IAAMI,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACPJ,KAAK,CAAC,yBAAD,EAA4B;AAClDK,cAAAA,MAAM,EAAE,MAD0C;AAElDC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEJ,gBAAAA,KAAK,EAALA;AAAF,eAAf,CAF4C;AAGlDK,cAAAA,OAAO,EAAE;AAAE,gCAAgB;AAAlB;AAHyC,aAA5B,CADE;;AAAA;AACtBR,YAAAA,MADsB;AAAA;AAAA,mBAMTA,MAAM,CAACC,IAAP,EANS;;AAAA;AAMtBA,YAAAA,IANsB;AAAA,8CAOrB;AACHE,cAAAA,KAAK,EAAEF,IAAI,CAACE,KADT;AAEHM,cAAAA,WAAW,EAAER,IAAI,CAACQ,WAFf;AAGHC,cAAAA,UAAU,EAAET,IAAI,CAACS,UAHd;AAIHC,cAAAA,SAAS,EAAEV,IAAI,CAACU,SAJb;AAKHN,cAAAA,IAAI,EAAEJ,IAAI,CAACI;AALR,aAPqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBH,gBAAgB;AAAA;AAAA;AAAA,GAAtB;AAgBP,OAAO,IAAMU,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAOC,IAAP,EAAaC,MAAb,EAAqBC,OAArB,EAA8BC,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZJ,YAAY;AAAA;AAAA;AAAA,GAAlB;AAIP,OAAO,IAAMK,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAOC,KAAP,EAAcC,OAAd,EAAuBJ,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBK,YAAAA,OADyB,GACfL,OAAO,CAACV,IADO;;AAI7B,gBAAIc,OAAO,CAACE,EAAR,KAAe,OAAf,IAA0BF,OAAO,CAACE,EAAR,KAAe,UAA7C,EAAyD;AACjDC,cAAAA,MADiD,GACxC,IAAIC,UAAJ,EADwC;;AAErDD,cAAAA,MAAM,CAACE,MAAP,GAAgB,UAACC,CAAD,EAAO;AACnB,oBAAMC,MAAM,GAAGD,CAAC,CAACE,MAAF,CAAS3B,MAAT,CAAgB4B,KAAhB,CAAsB,SAAtB,CAAf;;AACA,oBAAIT,OAAO,CAACE,EAAR,KAAe,OAAnB,EAA4B;AACxBD,kBAAAA,OAAO,CAACD,OAAO,CAACH,KAAT,CAAP,CAAuBa,GAAvB,GAA6BH,MAAM,CAAC,CAAD,CAAnC;AACAI,kBAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA,2CAAYhB,OAAZ;AAAqBV,oBAAAA,IAAI,EAAEe;AAA3B;AACH;;AACD,yCACOL,OADP;AAEIJ,kBAAAA,SAAS,oBACFI,OAAO,CAACJ,SADN;AAELkB,oBAAAA,GAAG,EAAEH,MAAM,CAAC,CAAD;AAFN;AAFb;AAOH,eAdD;;AAeAJ,cAAAA,MAAM,CAACU,aAAP,CAAqBd,KAArB;AACH;;AAtB4B,2BAuBrBC,OAAO,CAACE,EAvBa;AAAA,8CAwBpB,OAxBoB,wBA0BpB,aA1BoB,wBA4BpB,YA5BoB,wBA8BpB,MA9BoB;AAAA;;AAAA;AAAA,gEAyBTN,OAzBS;AAyBAZ,cAAAA,KAAK,oBAAOY,OAAO,CAACZ,KAAf;AAAsB8B,gBAAAA,IAAI,EAAEf;AAA5B;AAzBL;;AAAA;AAAA,gEA2BTH,OA3BS;AA2BAN,cAAAA,WAAW,oBAAOM,OAAO,CAACN,WAAf;AAA4BwB,gBAAAA,IAAI,EAAEf;AAAlC;AA3BX;;AAAA;AAAA,gEA6BTH,OA7BS;AA6BAL,cAAAA,UAAU,oBAAOK,OAAO,CAACL,UAAf;AAA2BuB,gBAAAA,IAAI,EAAEf;AAAjC;AA7BV;;AAAA;AA+BrBE,YAAAA,OAAO,CAACD,OAAO,CAACH,KAAT,CAAP,qBAA8BI,OAAO,CAACD,OAAO,CAACH,KAAT,CAArC;AAAsDiB,cAAAA,IAAI,EAAEf;AAA5D;AA/BqB,gEAgCTH,OAhCS;AAgCAV,cAAAA,IAAI,EAAEe;AAhCN;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBH,iBAAiB;AAAA;AAAA;AAAA,GAAvB;AAsCP,OAAO,IAAMiB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,OAAD,EAAUpB,OAAV,EAAsB;AAClD,UAAQA,OAAO,CAACqB,WAAR,CAAoBC,EAA5B;AACI,SAAK,OAAL;AACI,+BAAYtB,OAAZ;AAAqBZ,QAAAA,KAAK,oBAAOY,OAAO,CAACZ,KAAf;AAAsBmC,UAAAA,IAAI,EAAEH;AAA5B;AAA1B;;AACJ,SAAK,aAAL;AACI,+BACOpB,OADP;AAEIN,QAAAA,WAAW,oBACJM,OAAO,CAACN,WADJ;AAEP6B,UAAAA,IAAI,EAAEH;AAFC;AAFf;;AAMJ,SAAK,YAAL;AACI,+BACOpB,OADP;AAEIL,QAAAA,UAAU,oBACHK,OAAO,CAACL,UADL;AAEN4B,UAAAA,IAAI,EAAEH;AAFA;AAFd;;AAMJ,SAAK,MAAL;AACI,UAAIf,OAAO,GAAGL,OAAO,CAACV,IAAtB;AACAe,MAAAA,OAAO,CAACL,OAAO,CAACqB,WAAR,CAAoBpB,KAArB,CAAP,CAAmCsB,IAAnC,GAA0CH,OAA1C;AACA,+BAAYpB,OAAZ;AAAqBV,QAAAA,IAAI,qBAAOe,OAAP;AAAzB;;AACJ;AACI;AAtBR;AAwBH,CAzBM;AA2BP,OAAO,IAAMmB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD,EAAQzB,OAAR,EAAoB;AACnD,UAAQA,OAAO,CAACqB,WAAR,CAAoBC,EAA5B;AACI,SAAK,OAAL;AACI,+BAAYtB,OAAZ;AAAqBZ,QAAAA,KAAK,oBAAOY,OAAO,CAACZ,KAAf,sBAAuBqC,KAAvB,EAA+B,CAACzB,OAAO,CAACZ,KAAR,CAAcqC,KAAd,CAAhC;AAA1B;;AACJ,SAAK,MAAL;AACI,UAAIpB,OAAO,GAAGL,OAAO,CAACV,IAAtB;AACAe,MAAAA,OAAO,CAACL,OAAO,CAACqB,WAAR,CAAoBpB,KAArB,CAAP,CAAmCwB,KAAnC,IAA4C,CAACpB,OAAO,CAACL,OAAO,CAACqB,WAAR,CAAoBpB,KAArB,CAAP,CAAmCwB,KAAnC,CAA7C;AACA,+BAAYzB,OAAZ;AAAqBV,QAAAA,IAAI,qBAAOe,OAAP;AAAzB;;AACJ;AACI;AARR;AAUH,CAXM;AAaP,OAAO,IAAMqB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,aAAD,EAAgB3B,OAAhB,EAA4B;AAC3D,MAAIf,MAAJ;;AACA,UAAQe,OAAO,CAACqB,WAAR,CAAoBC,EAA5B;AACI,SAAK,OAAL;AACI,+BAAYtB,OAAZ;AAAqBZ,QAAAA,KAAK,oBAAOY,OAAO,CAACZ,KAAf;AAAsBwC,UAAAA,OAAO,EAAED;AAA/B;AAA1B;;AACJ,SAAK,aAAL;AACI1C,MAAAA,MAAM,GAAG4C,uBAAuB,CAACF,aAAD,EAAgB3B,OAAhB,CAAhC;AACA,aAAOf,MAAP;;AACJ,SAAK,YAAL;AACIA,MAAAA,MAAM,GAAG4C,uBAAuB,CAACF,aAAD,EAAgB3B,OAAhB,CAAhC;AACA,aAAOf,MAAP;;AACJ,SAAK,WAAL;AACIA,MAAAA,MAAM,GAAG6C,wBAAwB,CAACH,aAAD,EAAgB3B,OAAhB,CAAjC;AACA,aAAOf,MAAP;;AACJ,SAAK,MAAL;AACI,UAAIoB,OAAO,GAAGL,OAAO,CAACV,IAAtB;AACAe,MAAAA,OAAO,CAACL,OAAO,CAACqB,WAAR,CAAoBpB,KAArB,CAAP,CAAmC2B,OAAnC,GAA6CD,aAA7C;AACA,+BAAY3B,OAAZ;AAAqBV,QAAAA,IAAI,qBAAOe,OAAP;AAAzB;;AACJ,SAAK,OAAL;AACIpB,MAAAA,MAAM,GAAG8C,wBAAwB,CAACJ,aAAD,EAAgB3B,OAAhB,CAAjC;AACA,aAAOf,MAAP;;AACJ;AACI;AApBR;AAsBH,CAxBM;AA0BP,OAAO,IAAM+C,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACP,KAAD,EAAQzB,OAAR,EAAoB;AACrD,UAAQA,OAAO,CAACqB,WAAR,CAAoBC,EAA5B;AACI,SAAK,OAAL;AACI,+BAAYtB,OAAZ;AAAqBZ,QAAAA,KAAK,oBAAOY,OAAO,CAACZ,KAAf;AAAsB6C,UAAAA,SAAS,EAAER;AAAjC;AAA1B;;AACJ,SAAK,MAAL;AACI,UAAIpB,OAAO,GAAGL,OAAO,CAACV,IAAtB;AACAe,MAAAA,OAAO,CAACL,OAAO,CAACqB,WAAR,CAAoBpB,KAArB,CAAP,CAAmCgC,SAAnC,GAA+CR,KAA/C;AACA,+BAAYzB,OAAZ;AAAqBV,QAAAA,IAAI,qBAAOe,OAAP;AAAzB;;AACJ;AACI;AARR;AAUH,CAXM;AAaP,OAAO,IAAM6B,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,KAAD,EAAQnC,OAAR,EAAoB;AACrD,UAAQA,OAAO,CAACqB,WAAR,CAAoBC,EAA5B;AACI,SAAK,OAAL;AACI,+BAAYtB,OAAZ;AAAqBZ,QAAAA,KAAK,oBAAOY,OAAO,CAACZ,KAAf;AAAsB+C,UAAAA,KAAK,EAAEA;AAA7B;AAA1B;;AACJ,SAAK,aAAL;AACI,+BAAYnC,OAAZ;AAAqBoC,QAAAA,UAAU,oBAAOpC,OAAO,CAACN,WAAf;AAA4ByC,UAAAA,KAAK,EAAEA;AAAnC;AAA/B;;AACJ,SAAK,MAAL;AACI,UAAI9B,OAAO,GAAGL,OAAO,CAACV,IAAtB;AACAe,MAAAA,OAAO,CAACL,OAAO,CAACqB,WAAR,CAAoBpB,KAArB,CAAP,CAAmCkC,KAAnC,GAA2CA,KAA3C;AACA,+BAAYnC,OAAZ;AAAqBV,QAAAA,IAAI,qBAAOe,OAAP;AAAzB;;AACJ;AACI;AAVR;AAYH,CAbM,C,CAeP;;AACA,OAAO,IAAMgC,cAAc,GAAG;AAC1BnB,EAAAA,IAAI,EAAE,EADoB;AAE1BoB,EAAAA,IAAI,EAAE,KAFoB;AAG1BC,EAAAA,MAAM,EAAE,KAHkB;AAI1BC,EAAAA,SAAS,EAAE,KAJe;AAK1BL,EAAAA,KAAK,EAAE,OALmB;AAM1BM,EAAAA,SAAS,EAAE,KANe;AAO1BlB,EAAAA,IAAI,EAAE,QAPoB;AAQ1BK,EAAAA,OAAO,EAAE,MARiB;AAS1BK,EAAAA,SAAS,EAAE,OATe;AAU1BS,EAAAA,SAAS,EAAE,EAVe;AAW1BC,EAAAA,YAAY,EAAE,CAXY;AAY1BC,EAAAA,MAAM,EAAE,IAZkB;AAa1BC,EAAAA,OAAO,EAAE;AAbiB,CAAvB,C,CAeP;;AACA,OAAO,IAAMC,WAAW,GAAG;AACvB5B,EAAAA,IAAI,EAAE,EADiB;AAEvBK,EAAAA,IAAI,EAAE,QAFiB;AAGvBK,EAAAA,OAAO,EAAE,QAHc;AAIvBO,EAAAA,KAAK,EAAE;AAJgB,CAApB,C,CAMP;;AACA,OAAO,IAAMY,UAAU,GAAG;AACtBF,EAAAA,OAAO,EAAE,IADa;AAEtB/B,EAAAA,GAAG,EAAE,EAFiB;AAGtBkC,EAAAA,GAAG,EAAE,EAHiB;AAItBC,EAAAA,MAAM,EAAE,EAJc;AAKtBC,EAAAA,KAAK,EAAE,EALe;AAMtBtB,EAAAA,OAAO,EAAE,QANa;AAOtBc,EAAAA,SAAS,EAAE,EAPW;AAQtBC,EAAAA,YAAY,EAAE;AARQ,CAAnB;AAWP,OAAO,IAAMQ,cAAc,GAAG;AAC1B9B,EAAAA,WAAW,EAAE;AAAEC,IAAAA,EAAE,EAAE;AAAN,GADa;AAE1BlC,EAAAA,KAAK,oBAAOiD,cAAP;AAAuBe,IAAAA,WAAW,EAAE;AAApC,IAFqB;AAG1B1D,EAAAA,WAAW,oBAAOoD,WAAP;AAAoBb,IAAAA,SAAS,EAAE;AAA/B,IAHe;AAI1BtC,EAAAA,UAAU,EAAEmD,WAJc;AAK1BlD,EAAAA,SAAS,EAAEmD,UALe;AAM1BzD,EAAAA,IAAI,EAAE,CAAC+C,cAAD;AANoB,CAAvB,C,CASP;AACA;;AACA,IAAMP,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACH,aAAD,EAAgB3B,OAAhB,EAA4B;AACzD,2BACOA,OADP;AAEIJ,IAAAA,SAAS,oBACFI,OAAO,CAACJ,SADN;AAELgC,MAAAA,OAAO,EAAED;AAFJ;AAFb;AAOH,CARD,C,CAUA;AACA;;;AACA,IAAME,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACF,aAAD,EAAgB3B,OAAhB,EAA4B;AACxD,MAAIA,OAAO,CAACqB,WAAR,CAAoBC,EAApB,KAA2B,aAA/B,EAA8C;AAC1C,6BAAYtB,OAAZ;AAAqBN,MAAAA,WAAW,oBAAOM,OAAO,CAACN,WAAf;AAA4BkC,QAAAA,OAAO,EAAED;AAArC;AAAhC;AACH;;AACD,2BAAY3B,OAAZ;AAAqBL,IAAAA,UAAU,oBAAOK,OAAO,CAACL,UAAf;AAA2BiC,MAAAA,OAAO,EAAED;AAApC;AAA/B;AACH,CALD,C,CAOA;AACA;;;AACA,IAAMI,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACJ,aAAD,EAAgB3B,OAAhB,EAA4B;AACzD,MAAIK,OAAO,GAAGL,OAAO,CAACV,IAAtB;;AACA,MAAIqC,aAAa,KAAK,MAAtB,EAA8B;AAC1BtB,IAAAA,OAAO,CAACL,OAAO,CAACqB,WAAR,CAAoBpB,KAArB,CAAP,CAAmC2B,OAAnC,GAA6C,YAA7C;AACH;;AACD,MAAID,aAAa,KAAK,QAAlB,IAA8B,SAAlC,EAA6C;AACzCtB,IAAAA,OAAO,CAACL,OAAO,CAACqB,WAAR,CAAoBpB,KAArB,CAAP,CAAmC2B,OAAnC,GAA6C,QAA7C;AACH,GAFD,MAEO;AACHvB,IAAAA,OAAO,CAACL,OAAO,CAACqB,WAAR,CAAoBpB,KAArB,CAAP,CAAmC2B,OAAnC,GAA6C,UAA7C;AACH;;AAED,2BAAY5B,OAAZ;AAAqBV,IAAAA,IAAI,EAAE,CAACe,OAAD;AAA3B;AACH,CAZD","sourcesContent":["export const handleFetchList = async () => {\n    const result = await fetch('/api/editors/getList');\n    const json = await result.json();\n    return json;\n};\n\nexport const fetchEditArticle = async (title) => {\n    const result = await fetch('/api/editors/getArticle', {\n        method: 'POST',\n        body: JSON.stringify({ title }),\n        headers: { 'Content-Type': 'application/json' },\n    });\n    const json = await result.json();\n    return {\n        title: json.title,\n        description: json.description,\n        readLength: json.readLength,\n        jumbotron: json.jumbotron,\n        body: json.body\n    };\n};\n\nexport const handleImages = async (file, isBody, article, index) => {\n\n};\n\nexport const handleInputSwitch = async (value, section, article) => {\n    let newBody = article.body;\n    let result;\n\n    if (section.El === 'image' || section.El === 'jumbtron') {\n        let reader = new FileReader();\n        reader.onload = (e) => {\n            const parsed = e.target.result.split(\"base64,\");\n            if (section.El === 'image') {\n                newBody[section.index].src = parsed[1];\n                console.log('HIT')\n                return { ...article, body: newBody };\n            }\n            return {\n                ...article,\n                jumbotron: {\n                    ...article.jumbotron,\n                    src: parsed[1]\n                }\n            };\n        };\n        reader.readAsDataURL(value);\n    }\n    switch (section.El) {\n        case 'title':\n            return { ...article, title: { ...article.title, text: value }};\n        case 'description':\n            return { ...article, description: { ...article.description, text: value }};\n        case 'readLength':\n            return { ...article, readLength: { ...article.readLength, text: value }};\n        case 'body':\n            newBody[section.index] = { ...newBody[section.index], text: value };\n            return { ...article, body: newBody };\n        default:\n            return\n    }\n};\n\nexport const handleFontSwitch = (newFont, article) => {\n    switch (article.sectionMode.el) {\n        case 'title':\n            return { ...article, title: { ...article.title, font: newFont }};\n        case 'description':\n            return {\n                ...article,\n                description: {\n                    ...article.description,\n                    font: newFont \n            }};\n        case 'readLength':\n            return {\n                ...article,\n                readLength: {\n                    ...article.readLength,\n                    font: newFont\n                }};\n        case 'body':\n            let newBody = article.body;\n            newBody[article.sectionMode.index].font = newFont;\n            return { ...article, body: [ ...newBody ]};\n        default:\n            break;\n    }\n};\n\nexport const hanldeStylingSwitch = (style, article) => {\n    switch (article.sectionMode.el) {\n        case 'title':\n            return { ...article, title: { ...article.title, [style]: !article.title[style] }};\n        case 'body':\n            let newBody = article.body;\n            newBody[article.sectionMode.index][style] = !newBody[article.sectionMode.index][style];    \n            return { ...article, body: [ ...newBody ] };   \n        default:\n            break;\n    }\n};\n\nexport const handleJustifySwitch = (justification, article) => {\n    let result;\n    switch (article.sectionMode.el) {\n        case 'title':\n            return { ...article, title: { ...article.title, justify: justification }};\n        case 'description':\n            result = handleInfoJustifySwitch(justification, article);\n            return result;\n        case 'readLength':\n            result = handleInfoJustifySwitch(justification, article);\n            return result;\n        case 'jumbotron':\n            result = handleJumboJustifySwitch(justification, article);\n            return result;\n        case 'body':\n            let newBody = article.body;\n            newBody[article.sectionMode.index].justify = justification;    \n            return { ...article, body: [ ...newBody ] };\n        case 'image':\n            result = handleImageJustifySwitch(justification, article);\n            return result;\n        default:\n            break;\n    }\n};\n\nexport const handleTextStyleSwitch = (style, article) => {\n    switch (article.sectionMode.el) {\n        case 'title':\n            return { ...article, title: { ...article.title, textStyle: style }};\n        case 'body':\n            let newBody = article.body;\n            newBody[article.sectionMode.index].textStyle = style;    \n            return { ...article, body: [ ...newBody ] };\n        default:\n            break;\n    }\n};\n\nexport const handleTextColorSwitch = (color, article) => {\n    switch (article.sectionMode.el) {\n        case 'title':\n            return { ...article, title: { ...article.title, color: color }};\n        case 'description':\n            return { ...article, desciption: { ...article.description, color: color }};\n        case 'body':\n            let newBody = article.body;\n            newBody[article.sectionMode.index].color = color;\n            return { ...article, body: [ ...newBody ] };\n        default:\n            break;\n    }\n};\n\n// The initial state for text elements\nexport const initialPreview = {\n    text: '',\n    bold: false,\n    italic: false,\n    underline: false,\n    color: 'black',\n    highlight: false,\n    font: 'Roboto',\n    justify: 'left',\n    textStyle: 'body1',\n    marginTop: 40,\n    marginBottom: 0,\n    isText: true,\n    isImage: false,\n};\n// The initial state for Info\nexport const initialInfo = {\n    text: '',\n    font: 'Roboto',\n    justify: 'center',\n    color: '',\n};\n// The initial state for Images\nexport const initialImg = {\n    isImage: true,\n    src: '',\n    alt: '',\n    height: '',\n    width: '',\n    justify: 'center',\n    marginTop: 40,\n    marginBottom: 0,\n};\n\nexport const initialArticle = {\n    sectionMode: { el: 'title' },\n    title: { ...initialPreview, isPublished: false },\n    description: { ...initialInfo, textStyle: 'h5' },\n    readLength: initialInfo,\n    jumbotron: initialImg,\n    body: [initialPreview]\n};\n\n// This function will check with section the user is in\n// and update the value with the new selected value\nconst handleJumboJustifySwitch = (justification, article) => {\n    return {\n        ...article,\n        jumbotron: {\n            ...article.jumbotron,\n            justify: justification\n        }\n    };\n};\n\n// This function will check with section the user is in\n// and update the value with the new selected value\nconst handleInfoJustifySwitch = (justification, article) => {\n    if (article.sectionMode.el === 'description') {\n        return { ...article, description: { ...article.description, justify: justification }};\n    } \n    return { ...article, readLength: { ...article.readLength, justify: justification }};\n};\n\n// This function will check with section the user is in\n// and update the value with the new selected value\nconst handleImageJustifySwitch = (justification, article) => {\n    let newBody = article.body;\n    if (justification === 'left') {\n        newBody[article.sectionMode.index].justify = 'flex-start';\n    }\n    if (justification === 'center' || 'justify') {\n        newBody[article.sectionMode.index].justify = 'center';\n    } else {\n        newBody[article.sectionMode.index].justify = 'flex-end';\n    }\n\n    return { ...article, body: [newBody] };\n};"]},"metadata":{},"sourceType":"module"}