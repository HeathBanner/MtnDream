{"ast":null,"code":"import _defineProperty from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var handleFetchList =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var result, json;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch('/api/editors/getList');\n\n          case 2:\n            result = _context.sent;\n            _context.next = 5;\n            return result.json();\n\n          case 5:\n            json = _context.sent;\n            return _context.abrupt(\"return\", json);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function handleFetchList() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var fetchEditArticle =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(title) {\n    var result, json;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch('/api/editors/getArticle', {\n              method: 'POST',\n              body: JSON.stringify({\n                title: title\n              }),\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            });\n\n          case 2:\n            result = _context2.sent;\n            _context2.next = 5;\n            return result.json();\n\n          case 5:\n            json = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              title: json.title,\n              description: json.description,\n              readLength: json.readLength,\n              jumbotron: json.jumbotron,\n              body: json.body\n            });\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function fetchEditArticle(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var handleImages = function handleImages(file) {\n  var reader = new FileReader();\n\n  reader.onload = function (e) {\n    var parsed = e.target.result.split(\"base64,\");\n    return parsed[1];\n  };\n\n  reader.readAsDataURL(file);\n};\nexport var handleInputSwitch = function handleInputSwitch(e, section, article) {\n  var input = e.target.value;\n  var newBody = article.body;\n  var result;\n\n  switch (section.El) {\n    case 'title':\n      return _objectSpread({}, article, {\n        title: _objectSpread({}, article.title, {\n          text: input\n        })\n      });\n\n    case 'description':\n      return _objectSpread({}, article, {\n        description: _objectSpread({}, article.description, {\n          text: input\n        })\n      });\n\n    case 'readLength':\n      return _objectSpread({}, article, {\n        readLength: _objectSpread({}, article.readLength, {\n          text: input\n        })\n      });\n\n    case 'jumbotron':\n      result = handleImages(e.target.files[0]);\n      return _objectSpread({}, article, {\n        jumbotron: _objectSpread({}, article.jumbotron, {\n          src: result\n        })\n      });\n\n    case 'body':\n      newBody[section.index].text = input;\n      return _objectSpread({}, article, {\n        body: [newBody]\n      });\n\n    case 'image':\n      result = handleImages(e.target.files[0]);\n      newBody[section.index].src = result;\n      return _objectSpread({}, article, {\n        body: [newBody]\n      });\n\n    default:\n      return;\n  }\n};\nexport var handleFontSwitch = function handleFontSwitch(newFont, article) {\n  switch (article.sectionMode.el) {\n    case 'title':\n      return _objectSpread({}, article, {\n        title: _objectSpread({}, article.title, {\n          font: newFont\n        })\n      });\n\n    case 'description':\n      return _objectSpread({}, article, {\n        description: _objectSpread({}, article.description, {\n          font: newFont\n        })\n      });\n\n    case 'readLength':\n      return _objectSpread({}, article, {\n        readLength: _objectSpread({}, article.readLength, {\n          font: newFont\n        })\n      });\n\n    case 'body':\n      var newBody = article.body;\n      newBody[article.sectionMode.index].font = newFont;\n      return _objectSpread({}, article, {\n        body: _toConsumableArray(newBody)\n      });\n\n    default:\n      break;\n  }\n};\nexport var hanldeStylingSwitch = function hanldeStylingSwitch(style, article) {\n  switch (article.sectionMode.el) {\n    case 'title':\n      return _objectSpread({}, article, {\n        title: _objectSpread({}, article.title, _defineProperty({}, style, !article.title[style]))\n      });\n\n    case 'body':\n      var newBody = article.body;\n      newBody[article.sectionMode.index][style] = !newBody[article.sectionMode.index][style];\n      return _objectSpread({}, article, {\n        body: _toConsumableArray(newBody)\n      });\n\n    default:\n      break;\n  }\n};\nexport var handleJustifySwitch = function handleJustifySwitch(justification, article) {\n  var result;\n\n  switch (article.sectionMode.el) {\n    case 'title':\n      return _objectSpread({}, article, {\n        title: _objectSpread({}, article.title, {\n          justify: justification\n        })\n      });\n\n    case 'description':\n      result = handleInfoJustifySwitch(justification, article);\n      return result;\n\n    case 'readLength':\n      result = handleInfoJustifySwitch(justification, article);\n      return result;\n\n    case 'jumbotron':\n      result = handleJumboJustifySwitch(justification, article);\n      return result;\n\n    case 'body':\n      var newBody = article.body;\n      newBody[article.sectionMode.index].justify = justification;\n      return _objectSpread({}, article, {\n        body: _toConsumableArray(newBody)\n      });\n\n    case 'image':\n      result = handleImageJustifySwitch(justification, article);\n      return result;\n\n    default:\n      break;\n  }\n};\nexport var handleTextStyleSwitch = function handleTextStyleSwitch(style, article) {\n  switch (article.sectionMode.el) {\n    case 'title':\n      return _objectSpread({}, article, {\n        title: _objectSpread({}, article.title, {\n          textStyle: style\n        })\n      });\n\n    case 'body':\n      var newBody = article.body;\n      newBody[article.sectionMode.index].textStyle = style;\n      return _objectSpread({}, article, {\n        body: _toConsumableArray(newBody)\n      });\n\n    default:\n      break;\n  }\n};\nexport var handleTextColorSwitch = function handleTextColorSwitch(color, article) {\n  switch (article.sectionMode.el) {\n    case 'title':\n      return _objectSpread({}, article, {\n        title: _objectSpread({}, article.title, {\n          color: color\n        })\n      });\n\n    case 'description':\n      return _objectSpread({}, article, {\n        desciption: _objectSpread({}, article.description, {\n          color: color\n        })\n      });\n\n    case 'body':\n      var newBody = article.body;\n      newBody[article.sectionMode.index].color = color;\n      return _objectSpread({}, article, {\n        body: _toConsumableArray(newBody)\n      });\n\n    default:\n      break;\n  }\n};\nexport var initialArticle = {\n  sectionMode: {\n    el: 'title'\n  },\n  title: _objectSpread({}, initialPreview, {\n    isPublished: false\n  }),\n  description: _objectSpread({}, initialInfo, {\n    textStyle: 'h5'\n  }),\n  readLength: initialInfo,\n  jumbotron: initialImg,\n  body: [initialPreview]\n}; // The initial state for text elements\n\nexport var initialPreview = {\n  text: '',\n  bold: false,\n  italic: false,\n  underline: false,\n  color: 'black',\n  highlight: false,\n  font: 'Roboto',\n  justify: 'left',\n  textStyle: 'body1',\n  marginTop: 40,\n  marginBottom: 0,\n  isText: true,\n  isImage: false\n}; // The initial state for Info\n\nexport var initialInfo = {\n  text: '',\n  font: 'Roboto',\n  justify: 'center',\n  color: ''\n}; // The initial state for Images\n\nexport var initialImg = {\n  isImage: true,\n  src: '',\n  alt: '',\n  height: '',\n  width: '',\n  justify: 'center',\n  marginTop: 40,\n  marginBottom: 0\n}; // This function will check with section the user is in\n// and update the value with the new selected value\n\nvar handleJumboJustifySwitch = function handleJumboJustifySwitch(justification, article) {\n  return _objectSpread({}, article, {\n    jumbotron: _objectSpread({}, article.jumbotron, {\n      justify: justification\n    })\n  });\n}; // This function will check with section the user is in\n// and update the value with the new selected value\n\n\nvar handleInfoJustifySwitch = function handleInfoJustifySwitch(justification, article) {\n  if (article.sectionMode.el === 'description') {\n    return _objectSpread({}, article, {\n      description: _objectSpread({}, article.description, {\n        justify: justification\n      })\n    });\n  }\n\n  return _objectSpread({}, article, {\n    readLength: _objectSpread({}, article.readLength, {\n      justify: justification\n    })\n  });\n}; // This function will check with section the user is in\n// and update the value with the new selected value\n\n\nvar handleImageJustifySwitch = function handleImageJustifySwitch(justification, article) {\n  var newBody = article.body;\n\n  if (justification === 'left') {\n    newBody[article.sectionMode.index].justify = 'flex-start';\n  }\n\n  if (justification === 'center' || 'justify') {\n    newBody[article.sectionMode.index].justify = 'center';\n  } else {\n    newBody[article.sectionMode.index].justify = 'flex-end';\n  }\n\n  return _objectSpread({}, article, {\n    body: [newBody]\n  });\n};","map":{"version":3,"sources":["/Users/God/Desktop/github/mtndream/MtnDream/client/src/Context/Services/EditorServices.js"],"names":["handleFetchList","fetch","result","json","fetchEditArticle","title","method","body","JSON","stringify","headers","description","readLength","jumbotron","handleImages","file","reader","FileReader","onload","e","parsed","target","split","readAsDataURL","handleInputSwitch","section","article","input","value","newBody","El","text","files","src","index","handleFontSwitch","newFont","sectionMode","el","font","hanldeStylingSwitch","style","handleJustifySwitch","justification","justify","handleInfoJustifySwitch","handleJumboJustifySwitch","handleImageJustifySwitch","handleTextStyleSwitch","textStyle","handleTextColorSwitch","color","desciption","initialArticle","initialPreview","isPublished","initialInfo","initialImg","bold","italic","underline","highlight","marginTop","marginBottom","isText","isImage","alt","height","width"],"mappings":"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","sourcesContent":["export const handleFetchList = async () => {\n    const result = await fetch('/api/editors/getList');\n    const json = await result.json();\n    return json;\n};\n\nexport const fetchEditArticle = async (title) => {\n    const result = await fetch('/api/editors/getArticle', {\n        method: 'POST',\n        body: JSON.stringify({ title }),\n        headers: { 'Content-Type': 'application/json' },\n    });\n    const json = await result.json();\n    return {\n        title: json.title,\n        description: json.description,\n        readLength: json.readLength,\n        jumbotron: json.jumbotron,\n        body: json.body\n    };\n};\n\nexport const handleImages = (file) => {\n    let reader = new FileReader();\n    reader.onload = (e) => {\n        const parsed = e.target.result.split(\"base64,\");\n        return parsed[1];\n    };\n    reader.readAsDataURL(file);\n};\n\nexport const handleInputSwitch = (e, section, article) => {\n    let input = e.target.value;\n    let newBody = article.body;\n    let result;\n    switch (section.El) {\n        case 'title':\n            return { ...article, title: { ...article.title, text: input }};\n        case 'description':\n            return { ...article, description: { ...article.description, text: input }};\n        case 'readLength':\n            return { ...article, readLength: { ...article.readLength, text: input }};\n        case 'jumbotron':\n            result = handleImages(e.target.files[0]);\n            return { ...article, jumbotron: { ...article.jumbotron, src: result }};\n        case 'body':\n            newBody[section.index].text = input;\n            return { ...article, body: [newBody] };\n        case 'image':\n            result = handleImages(e.target.files[0]);\n            newBody[section.index].src = result;\n            return { ...article, body: [newBody] };\n        default:\n            return\n    }\n};\n\nexport const handleFontSwitch = (newFont, article) => {\n    switch (article.sectionMode.el) {\n        case 'title':\n            return { ...article, title: { ...article.title, font: newFont }};\n        case 'description':\n            return {\n                ...article,\n                description: {\n                    ...article.description,\n                    font: newFont \n            }};\n        case 'readLength':\n            return {\n                ...article,\n                readLength: {\n                    ...article.readLength,\n                    font: newFont\n                }};\n        case 'body':\n            let newBody = article.body;\n            newBody[article.sectionMode.index].font = newFont;\n            return { ...article, body: [ ...newBody ]};\n        default:\n            break;\n    }\n};\n\nexport const hanldeStylingSwitch = (style, article) => {\n    switch (article.sectionMode.el) {\n        case 'title':\n            return { ...article, title: { ...article.title, [style]: !article.title[style] }};\n        case 'body':\n            let newBody = article.body;\n            newBody[article.sectionMode.index][style] = !newBody[article.sectionMode.index][style];    \n            return { ...article, body: [ ...newBody ] };   \n        default:\n            break;\n    }\n};\n\nexport const handleJustifySwitch = (justification, article) => {\n    let result;\n    switch (article.sectionMode.el) {\n        case 'title':\n            return { ...article, title: { ...article.title, justify: justification }};\n        case 'description':\n            result = handleInfoJustifySwitch(justification, article);\n            return result;\n        case 'readLength':\n            result = handleInfoJustifySwitch(justification, article);\n            return result;\n        case 'jumbotron':\n            result = handleJumboJustifySwitch(justification, article);\n            return result;\n        case 'body':\n            let newBody = article.body;\n            newBody[article.sectionMode.index].justify = justification;    \n            return { ...article, body: [ ...newBody ] };\n        case 'image':\n            result = handleImageJustifySwitch(justification, article);\n            return result;\n        default:\n            break;\n    }\n};\n\nexport const handleTextStyleSwitch = (style, article) => {\n    switch (article.sectionMode.el) {\n        case 'title':\n            return { ...article, title: { ...article.title, textStyle: style }};\n        case 'body':\n            let newBody = article.body;\n            newBody[article.sectionMode.index].textStyle = style;    \n            return { ...article, body: [ ...newBody ] };\n        default:\n            break;\n    }\n};\n\nexport const handleTextColorSwitch = (color, article) => {\n    switch (article.sectionMode.el) {\n        case 'title':\n            return { ...article, title: { ...article.title, color: color }};\n        case 'description':\n            return { ...article, desciption: { ...article.description, color: color }};\n        case 'body':\n            let newBody = article.body;\n            newBody[article.sectionMode.index].color = color;\n            return { ...article, body: [ ...newBody ] };\n        default:\n            break;\n    }\n};\n\nexport const initialArticle = {\n    sectionMode: { el: 'title' },\n    title: { ...initialPreview, isPublished: false },\n    description: { ...initialInfo, textStyle: 'h5' },\n    readLength: initialInfo,\n    jumbotron: initialImg,\n    body: [initialPreview]\n};\n\n// The initial state for text elements\nexport const initialPreview = {\n    text: '',\n    bold: false,\n    italic: false,\n    underline: false,\n    color: 'black',\n    highlight: false,\n    font: 'Roboto',\n    justify: 'left',\n    textStyle: 'body1',\n    marginTop: 40,\n    marginBottom: 0,\n    isText: true,\n    isImage: false,\n};\n// The initial state for Info\nexport const initialInfo = {\n    text: '',\n    font: 'Roboto',\n    justify: 'center',\n    color: '',\n};\n// The initial state for Images\nexport const initialImg = {\n    isImage: true,\n    src: '',\n    alt: '',\n    height: '',\n    width: '',\n    justify: 'center',\n    marginTop: 40,\n    marginBottom: 0,\n};\n\n// This function will check with section the user is in\n// and update the value with the new selected value\nconst handleJumboJustifySwitch = (justification, article) => {\n    return {\n        ...article,\n        jumbotron: {\n            ...article.jumbotron,\n            justify: justification\n        }\n    };\n};\n\n// This function will check with section the user is in\n// and update the value with the new selected value\nconst handleInfoJustifySwitch = (justification, article) => {\n    if (article.sectionMode.el === 'description') {\n        return { ...article, description: { ...article.description, justify: justification }};\n    } \n    return { ...article, readLength: { ...article.readLength, justify: justification }};\n};\n\n// This function will check with section the user is in\n// and update the value with the new selected value\nconst handleImageJustifySwitch = (justification, article) => {\n    let newBody = article.body;\n    if (justification === 'left') {\n        newBody[article.sectionMode.index].justify = 'flex-start';\n    }\n    if (justification === 'center' || 'justify') {\n        newBody[article.sectionMode.index].justify = 'center';\n    } else {\n        newBody[article.sectionMode.index].justify = 'flex-end';\n    }\n\n    return { ...article, body: [newBody] };\n};"]},"metadata":{},"sourceType":"module"}