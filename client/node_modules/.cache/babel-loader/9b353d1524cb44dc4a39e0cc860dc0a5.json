{"ast":null,"code":"import _regeneratorRuntime from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/LGToolbar.js\";\nimport React, { useContext, useState } from 'react';\nimport TextSize from './Tools/TextSize';\nimport Font from './Tools/Font';\nimport Styling from './Tools/Styling';\nimport Justify from './Tools/Justify';\nimport Margin from './Tools/Margin';\nimport Notification from '../Notification/Notification';\nimport { PreSubmit, FetchSubmit } from './Services/Services';\nimport { EditorContext } from '../../Context/EditorContext';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Icon, Button, Fab, Typography, Drawer } from '@material-ui/core';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    container: {\n      padding: 20,\n      background: '#ffffff',\n      position: 'fixed',\n      top: 70,\n      zIndex: 2,\n      boxShadow: '0px 2px 4px -1px rgba(0,0,0,0.2), 0px 4px 5px 0px rgba(0,0,0,0.14), 0px 1px 10px 0px rgba(0,0,0,0.12)'\n    },\n    editorTools: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    input: {\n      width: '80%'\n    },\n    save: {\n      position: 'relative',\n      backgroundColor: 'rgb(0, 0, 0, 0.2)',\n      transition: 'all 0.4s ease',\n      '&:hover': {\n        transform: 'scale(1.03)',\n        backgroundColor: 'rgb(0, 0, 0, 0.05)'\n      }\n    },\n    customDrawer: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      flexWrap: \"wrap\",\n      paddingTop: 30\n    }\n  };\n});\nvar initNotify = {\n  error: false,\n  success: false,\n  warning: false,\n  message: \"\"\n};\nexport default (function () {\n  var classes = useStyles();\n  var edit = useContext(EditorContext); // These will toggle the notification components\n\n  var _useState = useState(_objectSpread({}, initNotify)),\n      _useState2 = _slicedToArray(_useState, 2),\n      notify = _useState2[0],\n      setNotify = _useState2[1];\n\n  var handleClose = function handleClose() {\n    return setNotify(_objectSpread({}, initNotify));\n  };\n\n  var handleSave = function handleSave() {\n    var obj = PreSubmit(edit);\n    if (obj.error || obj.warning) return setNotify(_objectSpread({}, obj));\n    if (edit.isPublished) return handleChanges();\n    handleSubmit();\n  }; // If the preSubmit function passes with no errors or warnings it will\n  // then log the current date and store it within the database\n\n\n  var handleSubmit =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              res = FetchSubmit(edit, \"newArticle\");\n              setNotify(_objectSpread({}, res));\n              edit.setPublished();\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // If the user has already published the article, this function will then\n  // update the article within the database\n\n\n  var handleChanges =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              res = FetchSubmit(edit, \"saveChanges\");\n              setNotify(_objectSpread({}, res));\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleChanges() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return React.createElement(Grid, {\n    className: classes.container,\n    justify: \"center\",\n    alignItems: \"center\",\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, edit.title.isPublished ? React.createElement(Button, {\n    className: classes.save,\n    onClick: handleSave,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"save\"), React.createElement(Typography, {\n    style: {\n      marginLeft: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"Save\")) : React.createElement(Button, {\n    className: classes.save,\n    onClick: handleSave,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"save\"), React.createElement(Typography, {\n    style: {\n      marginLeft: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"Publish\")), React.createElement(Notification, {\n    notify: notify,\n    handleClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  })), React.createElement(Drawer, {\n    classes: {\n      paper: classes.customDrawer\n    },\n    variant: \"permanent\",\n    anchor: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(TextSize, {\n    margin: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }), React.createElement(Font, {\n    margin: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }), React.createElement(Styling, {\n    margin: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }), React.createElement(Justify, {\n    margin: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }), React.createElement(Margin, {\n    margin: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  })));\n});","map":{"version":3,"sources":["/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/LGToolbar.js"],"names":["React","useContext","useState","TextSize","Font","Styling","Justify","Margin","Notification","PreSubmit","FetchSubmit","EditorContext","makeStyles","Grid","Icon","Button","Fab","Typography","Drawer","useStyles","theme","container","padding","background","position","top","zIndex","boxShadow","editorTools","display","justifyContent","alignItems","input","width","save","backgroundColor","transition","transform","customDrawer","flexWrap","paddingTop","initNotify","error","success","warning","message","classes","edit","notify","setNotify","handleClose","handleSave","obj","isPublished","handleChanges","handleSubmit","res","setPublished","title","marginLeft","paper"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\n\nimport TextSize from './Tools/TextSize';\nimport Font from './Tools/Font';\nimport Styling from './Tools/Styling';\nimport Justify from './Tools/Justify';\nimport Margin from './Tools/Margin';\nimport Notification from '../Notification/Notification';\nimport { PreSubmit, FetchSubmit } from './Services/Services';\n\nimport { EditorContext } from '../../Context/EditorContext';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n    Grid,\n    Icon,\n    Button,\n    Fab,\n    Typography,\n    Drawer\n} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        padding: 20,\n        background: '#ffffff',\n        position: 'fixed',\n        top: 70,\n        zIndex: 2,\n        boxShadow: '0px 2px 4px -1px rgba(0,0,0,0.2), 0px 4px 5px 0px rgba(0,0,0,0.14), 0px 1px 10px 0px rgba(0,0,0,0.12)',\n    },\n    editorTools: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    input: {\n        width: '80%'\n    },\n    save: {\n        position: 'relative',\n        backgroundColor: 'rgb(0, 0, 0, 0.2)',\n        transition: 'all 0.4s ease',\n        '&:hover': {\n            transform: 'scale(1.03)',\n            backgroundColor: 'rgb(0, 0, 0, 0.05)',\n        },\n    },\n    customDrawer: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexWrap: \"wrap\",\n        paddingTop: 30,\n\n    }\n}));\n\nconst initNotify = {\n    error: false,\n    success: false,\n    warning: false,\n    message: \"\"\n};\n\nexport default () => {\n\n    const classes = useStyles();\n    const edit = useContext(EditorContext);\n\n    // These will toggle the notification components\n    const [notify, setNotify] = useState({ ...initNotify });\n\n    const handleClose = () => setNotify({ ...initNotify });\n\n    const handleSave = () => {\n        const obj = PreSubmit(edit);\n        if (obj.error || obj.warning) return setNotify({ ...obj });\n        if (edit.isPublished) return handleChanges();\n\n        handleSubmit();\n    };\n\n    // If the preSubmit function passes with no errors or warnings it will\n    // then log the current date and store it within the database\n    const handleSubmit =  async () => {\n        const res = FetchSubmit(edit, \"newArticle\");\n\n        setNotify({ ...res });\n        edit.setPublished();\n    };\n\n    // If the user has already published the article, this function will then\n    // update the article within the database\n    const handleChanges = async () => {\n        const res = FetchSubmit(edit, \"saveChanges\");\n\n        setNotify({ ...res });\n    };\n\n    return (\n        <Grid\n            className={classes.container}\n            justify=\"center\"\n            alignItems=\"center\"\n            container\n        >\n\n            <Grid item xs={12}>\n\n                {\n                    edit.title.isPublished\n                        ?\n                    <Button className={classes.save} onClick={handleSave}>\n                        <Icon>save</Icon>\n                        <Typography style={{ marginLeft: 10 }}>\n                            Save\n                        </Typography>\n                    </Button>\n                        :\n                    <Button className={classes.save} onClick={handleSave}>\n                        <Icon>save</Icon>\n                        <Typography style={{ marginLeft: 10 }}>\n                            Publish\n                        </Typography>\n                    </Button>\n                }\n\n                <Notification\n                    notify={notify}\n                    handleClose={handleClose}\n                />\n\n            </Grid>\n            <Drawer\n                classes={{ paper: classes.customDrawer }}\n                variant=\"permanent\"\n                anchor=\"left\"\n            >\n                <TextSize margin={10} />\n                \n                <Font margin={10} />\n\n                <Styling margin={10} />\n\n                <Justify margin={10} />\n\n                <Margin margin={10} />\n            </Drawer>\n\n        </Grid>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}