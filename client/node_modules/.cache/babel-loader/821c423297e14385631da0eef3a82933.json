{"ast":null,"code":"var _jsxFileName = \"/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Preview.js\";\nimport React, { useContext, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography, TextField, IconButton, Avatar, CircularProgress, Icon } from '@material-ui/core';\nimport Jumbotron from './Tools/Jumbotron';\nimport Image from './Tools/Image';\nimport MiniTextField from './MiniComponents/MiniTextField';\nimport { EditorContext } from '../../Context/EditorContext';\nvar fontSizes = {\n  h1: '6rem',\n  h2: '3.75rem',\n  h3: '3rem',\n  h4: '2.125rem',\n  h5: '1.5rem',\n  h6: '1.25rem'\n};\nvar mobileFontSizes = {\n  h1: '2.125rem',\n  h2: '2.125em',\n  h3: '1.5rem',\n  h4: '1.5rem',\n  h5: '1.25rem',\n  h6: '1rem'\n};\nvar months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nexport default (function (_ref) {\n  var title = _ref.title,\n      xs = _ref.xs;\n  var context = useContext(EditorContext); // Once the component mounts, it will send the url parameter to the context\n  // to have it update with the currently selected article\n\n  useEffect(function () {\n    context.editArticle(title);\n  }, []); // The makeStyles hook was added within the component due to the reliance of\n  // the context information\n\n  var useStyles = makeStyles(function () {\n    return {\n      container: {\n        marginTop: 120 + parseInt(context.title.marginTop),\n        padding: 40,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'flex-start',\n        flexWrap: 'wrap'\n      },\n      typo: {\n        fontSize: xs ? mobileFontSizes[context.title.textStyle] : fontSizes[context.title.textStyle],\n        fontFamily: \"\".concat(context.title.font, \", Helvetica, Arial, sans-serif\"),\n        fontWeight: context.title.bold ? 'bold' : 'normal',\n        fontStyle: context.title.italic ? 'italic' : 'normal',\n        textDecoration: context.title.underline ? 'underline' : 'none',\n        textAlign: context.title.justify,\n        color: context.title.color,\n        backgroundColor: context.title.highlight ? '#ffff00' : 'inherit',\n        padding: 0,\n        width: '100%',\n        lineHeight: 1.17\n      },\n      description: {\n        fontSize: xs ? mobileFontSizes[context.description.textStyle] : fontSizes[context.description.textStyle],\n        fontFamily: \"\".concat(context.description.font, \", Helvetica, Arial, sans-serif\"),\n        color: context.description.color,\n        textAlign: context.description.justify,\n        marginTop: 20,\n        padding: 0,\n        lineHeight: 1.17\n      },\n      newSectionContainers: {\n        flexGrow: 1,\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      newSectionButtons: {\n        padding: 15,\n        marginTop: 20,\n        backgroundColor: 'rgb(0, 0, 0, 0.1)',\n        transition: 'background-color .4s ease',\n        '&:hover': {\n          backgroundColor: 'rgb(0, 0, 0, 0.2)'\n        }\n      },\n      inputs: {\n        width: '100%',\n        padding: 0,\n        lineHeight: '1.5rem'\n      },\n      infoContainer: {\n        position: 'relative',\n        height: 60,\n        marginTop: 20,\n        paddingLeft: 80,\n        display: 'inline-flex',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        alignContent: 'center',\n        flexWrap: 'wrap',\n        flexBasis: 'auto'\n      },\n      avatar: {\n        height: 60,\n        width: 60,\n        position: 'absolute',\n        top: 0,\n        left: 0\n      },\n      readLength: {\n        color: 'rgba(0, 0, 0, 0.54)'\n      }\n    };\n  });\n  var classes = useStyles(); // This function generate the current date and parses it to be applied to the\n  // elements below\n\n  var generatedDate = function () {\n    var now = new Date();\n    return \"\".concat(months[now.getMonth()], \" \").concat(now.getDate());\n  }();\n\n  if (title && title !== 'new' && !context.title.text) {\n    return React.createElement(Grid, {\n      className: classes.container,\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(CircularProgress, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Grid, {\n    className: classes.container,\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    style: {\n      width: '100%',\n      marginBottom: parseInt(context.title.marginBottom)\n    },\n    inputProps: {\n      className: classes.typo\n    },\n    InputProps: {\n      className: classes.inputs\n    },\n    value: context.title.text,\n    onClick: function onClick() {\n      return context.handleSectionMode({\n        el: 'title'\n      });\n    },\n    onChange: function onChange(e) {\n      return context.handleInput(e.target.value, {\n        El: 'title'\n      });\n    },\n    multiline: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    style: {\n      width: '100%'\n    },\n    inputProps: {\n      className: classes.description\n    },\n    InputProps: {\n      className: classes.inputs\n    },\n    value: context.description.text,\n    onClick: function onClick() {\n      return context.handleSectionMode({\n        el: 'description'\n      });\n    },\n    onChange: function onChange(e) {\n      return context.handleInput(e.target.value, {\n        El: 'description'\n      });\n    },\n    multiline: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: classes.infoContainer,\n    style: {\n      width: context.readLength.justify === 'flex-start' ? '100%' : 'auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(Avatar, {\n    className: classes.avatar,\n    src: \"https://media.licdn.com/dms/image/C4E03AQESXvxigX8NfQ/profile-displayphoto-shrink_800_800/0?e=1571875200&v=beta&t=jVs0jK8YKBHrOOcmnghTMtN9bhPfu7rH9MHADyTboBY\",\n    alt: \"Terri Banner Profile Photo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \"Terri Banner\")), React.createElement(Typography, {\n    className: classes.readLength,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, generatedDate(), \" \\u2022\"), React.createElement(TextField, {\n    style: {\n      width: 20,\n      padding: 0\n    },\n    inputProps: {\n      className: classes.readLength,\n      style: {\n        textAlign: 'center',\n        padding: 0\n      }\n    },\n    InputProps: {\n      className: classes.inputs\n    },\n    value: context.readLength.text,\n    onClick: function onClick() {\n      return context.handleSectionMode({\n        el: 'readLength'\n      });\n    },\n    onChange: function onChange(e) {\n      return context.handleInput(e.target.value, {\n        El: 'readLength'\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    className: classes.readLength,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, \"min read\")), React.createElement(Jumbotron, {\n    justify: context.jumbotron.justify,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }), context.body.map(function (section, index) {\n    if (section.isText) {\n      return React.createElement(MiniTextField, {\n        body: section,\n        index: index,\n        fonts: {\n          mobileFontSizes: mobileFontSizes,\n          fontSizes: fontSizes\n        },\n        inputClass: classes.inputs,\n        handleSectionMode: context.handleSectionMode,\n        handleInput: context.handleInput,\n        xs: xs,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      });\n    }\n\n    if (section.isImage) {\n      return React.createElement(\"div\", {\n        style: {\n          width: '100%',\n          display: 'flex',\n          justifyContent: section.justify,\n          marginTop: parseInt(context.body[index].marginTop),\n          marginBottom: parseInt(context.body[index].marginBottom)\n        },\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, React.createElement(Image, {\n        src: section.src,\n        index: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }));\n    }\n  }), React.createElement(\"div\", {\n    className: classes.newSectionContainers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    className: classes.newSectionButtons,\n    onClick: context.handleNewBody,\n    style: {\n      marginRight: xs ? 0 : 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  }, \"view_headline_outlined\"))), React.createElement(\"div\", {\n    className: classes.newSectionContainers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    className: classes.newSectionButtons,\n    onClick: context.newImgEl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }, \"add_to_photos_outlined\")))));\n});","map":{"version":3,"sources":["/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Preview.js"],"names":["React","useContext","useEffect","makeStyles","Grid","Typography","TextField","IconButton","Avatar","CircularProgress","Icon","Jumbotron","Image","MiniTextField","EditorContext","fontSizes","h1","h2","h3","h4","h5","h6","mobileFontSizes","months","title","xs","context","editArticle","useStyles","container","marginTop","parseInt","padding","display","justifyContent","alignItems","flexWrap","typo","fontSize","textStyle","fontFamily","font","fontWeight","bold","fontStyle","italic","textDecoration","underline","textAlign","justify","color","backgroundColor","highlight","width","lineHeight","description","newSectionContainers","flexGrow","newSectionButtons","transition","inputs","infoContainer","position","height","paddingLeft","alignContent","flexBasis","avatar","top","left","readLength","classes","generatedDate","now","Date","getMonth","getDate","text","marginBottom","className","handleSectionMode","el","e","handleInput","target","value","El","style","jumbotron","body","map","section","index","isText","isImage","src","handleNewBody","marginRight","newImgEl"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n    Grid,\n    Typography,\n    TextField,\n    IconButton,\n    Avatar,\n    CircularProgress,\n    Icon\n} from '@material-ui/core';\n\nimport Jumbotron from './Tools/Jumbotron';\nimport Image from './Tools/Image';\nimport MiniTextField from './MiniComponents/MiniTextField';\n\nimport { EditorContext } from '../../Context/EditorContext';\n\nconst fontSizes = {\n    h1: '6rem',\n    h2: '3.75rem',\n    h3: '3rem',\n    h4: '2.125rem',\n    h5: '1.5rem',\n    h6: '1.25rem',\n};\nconst mobileFontSizes = {\n    h1: '2.125rem',\n    h2: '2.125em',\n    h3: '1.5rem',\n    h4: '1.5rem',\n    h5: '1.25rem',\n    h6: '1rem',\n};\nconst months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n];\n\nexport default ({ title, xs }) => {\n\n    const context = useContext(EditorContext);\n\n    // Once the component mounts, it will send the url parameter to the context\n    // to have it update with the currently selected article\n    useEffect(() => {\n        context.editArticle(title);\n    }, []);\n\n    // The makeStyles hook was added within the component due to the reliance of\n    // the context information\n    const useStyles = makeStyles(() => ({\n        container: {\n            marginTop: 120 + parseInt(context.title.marginTop),\n            padding: 40,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'flex-start',\n            flexWrap: 'wrap',\n        },\n        typo: {\n            fontSize: xs ? mobileFontSizes[context.title.textStyle] : fontSizes[context.title.textStyle],\n            fontFamily: `${context.title.font}, Helvetica, Arial, sans-serif`,\n            fontWeight: context.title.bold ? 'bold' : 'normal',\n            fontStyle: context.title.italic ? 'italic' : 'normal',\n            textDecoration: context.title.underline ? 'underline' : 'none',\n            textAlign: context.title.justify,\n            color: context.title.color,\n            backgroundColor: context.title.highlight ? '#ffff00' : 'inherit',\n            padding: 0,\n            width: '100%',\n            lineHeight: 1.17,\n        },\n        description: {\n            fontSize: xs ? mobileFontSizes[context.description.textStyle] : fontSizes[context.description.textStyle],\n            fontFamily: `${context.description.font}, Helvetica, Arial, sans-serif`,\n            color: context.description.color,\n            textAlign: context.description.justify,\n            marginTop: 20,\n            padding: 0,\n            lineHeight: 1.17,\n        },\n        newSectionContainers: {\n            flexGrow: 1,\n            display: 'flex',\n            justifyContent: 'center',\n        },\n        newSectionButtons: {\n            padding: 15,\n            marginTop: 20,\n            backgroundColor: 'rgb(0, 0, 0, 0.1)',\n            transition: 'background-color .4s ease',\n            '&:hover': {\n                backgroundColor: 'rgb(0, 0, 0, 0.2)',\n            },\n        },\n        inputs: {\n            width: '100%',\n            padding: 0,\n            lineHeight: '1.5rem',\n        },\n        infoContainer: {\n            position: 'relative',\n            height: 60,\n            marginTop: 20,\n            paddingLeft: 80,\n            display: 'inline-flex',\n            justifyContent: 'flex-start',\n            alignItems: 'center',\n            alignContent: 'center',\n            flexWrap: 'wrap',\n            flexBasis: 'auto',\n        },\n        avatar: {\n            height: 60,\n            width: 60,\n            position: 'absolute',\n            top: 0,\n            left: 0,\n        },\n        readLength: {\n            color: 'rgba(0, 0, 0, 0.54)',\n        },\n    }));\n    \n    const classes = useStyles();\n\n    // This function generate the current date and parses it to be applied to the\n    // elements below\n    const generatedDate = (() => {\n        const now = new Date();\n        return `${months[now.getMonth()]} ${now.getDate()}`;\n    })();\n\n    if ( (title) && (title !== 'new') && (!context.title.text) ) {\n        return (\n            <Grid className={classes.container} item xs={12}>\n                <CircularProgress />\n            </Grid>\n        );\n    }\n    return (\n        <>\n            <Grid className={classes.container} item xs={12}>\n\n                <TextField\n                    style={{\n                        width: '100%',\n                        marginBottom: parseInt(context.title.marginBottom),\n                    }}\n                    inputProps={{ className: classes.typo }}\n                    InputProps={{ className: classes.inputs }}\n                    value={context.title.text}\n                    onClick={() => context.handleSectionMode({ el: 'title' })}\n                    onChange={(e) => context.handleInput(e.target.value, { El: 'title' })}\n                    multiline={true}\n                />\n\n                <TextField\n                    style={{ width: '100%' }}                \n                    inputProps={{ className: classes.description }}\n                    InputProps={{ className: classes.inputs }}\n                    value={context.description.text}\n                    onClick={() => context.handleSectionMode({ el: 'description' })}\n                    onChange={(e) => context.handleInput(e.target.value, { El: 'description' })}\n                    multiline={true}\n                />\n\n                <div\n                    className={classes.infoContainer}\n                    style={{ width: context.readLength.justify === 'flex-start' ? '100%' : 'auto' }}\n                >\n\n                    <Avatar\n                        className={classes.avatar}\n                        src={`https://media.licdn.com/dms/image/C4E03AQESXvxigX8NfQ/profile-displayphoto-shrink_800_800/0?e=1571875200&v=beta&t=jVs0jK8YKBHrOOcmnghTMtN9bhPfu7rH9MHADyTboBY`}\n                        alt=\"Terri Banner Profile Photo\"\n                    />\n\n                    <div style={{ width: '100%' }}>\n                        <Typography>\n                            Terri Banner\n                        </Typography>\n                    </div>\n\n                    <Typography className={classes.readLength}>\n                        {generatedDate()} &#8226;\n                    </Typography>\n\n                    <TextField\n                        style={{ width: 20, padding: 0 }}                \n                        inputProps={{\n                            className: classes.readLength,\n                            style: { textAlign: 'center', padding: 0 },\n                        }}\n                        InputProps={{ className: classes.inputs }}\n                        value={context.readLength.text}\n                        onClick={() => context.handleSectionMode({ el: 'readLength' })}\n                        onChange={(e) => context.handleInput(e.target.value, { El: 'readLength' })}\n                    />\n\n                    <Typography className={classes.readLength}>\n                        min read\n                    </Typography>\n\n                </div>\n                \n                <Jumbotron justify={context.jumbotron.justify} />\n                                \n                {/* Since the body object contains both image and text elements,\n                a conditional was required to render both */}\n                {context.body.map((section, index) => {\n                    if (section.isText) {\n                        return (\n                            <MiniTextField\n                                body={section}\n                                index={index}\n                                fonts={{ mobileFontSizes, fontSizes }}\n                                inputClass={classes.inputs}\n                                handleSectionMode={context.handleSectionMode}\n                                handleInput={context.handleInput}\n                                xs={xs}\n                            />\n                        );\n                    }\n                    if (section.isImage) {\n                        return (\n                            <div\n                                style={{\n                                    width: '100%',\n                                    display: 'flex',\n                                    justifyContent: section.justify,\n                                    marginTop: parseInt(context.body[index].marginTop),\n                                    marginBottom: parseInt(context.body[index].marginBottom),\n                                }}\n                                key={index}\n                            >\n                                <Image\n                                    src={section.src}\n                                    index={index}\n                                />\n                            </div>\n                        );\n                    }\n                })}\n                <div className={classes.newSectionContainers}>\n                    <IconButton\n                        className={classes.newSectionButtons}\n                        onClick={context.handleNewBody}\n                        style={{ marginRight: xs ? 0 : 20 }}\n                    >\n                        <Icon>\n                            view_headline_outlined\n                        </Icon>\n                    </IconButton>\n                </div>\n                <div className={classes.newSectionContainers}>\n                    <IconButton\n                        className={classes.newSectionButtons}\n                        onClick={context.newImgEl}\n                    >\n                        <Icon>\n                            add_to_photos_outlined\n                        </Icon>\n                    </IconButton>\n                </div>\n\n            </Grid>\n        </>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}