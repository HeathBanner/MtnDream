{"ast":null,"code":"var _jsxFileName = \"/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Preview.js\";\nimport React, { useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography, TextField, Button, Avatar } from '@material-ui/core';\nimport Jumbotron from './Tools/Jumbotron';\nimport Image from './Tools/Image';\nimport { EditorContext } from '../../Context/EditorContext';\nvar fontSizes = {\n  h1: '6rem',\n  h2: '3.75rem',\n  h3: '3rem',\n  h4: '2.125rem',\n  h5: '1.5rem',\n  h6: '1.25rem'\n};\n\nvar Preview = function Preview() {\n  var holder = useContext(EditorContext);\n  var useStyles = makeStyles(function (theme) {\n    return {\n      container: {\n        marginTop: 120,\n        padding: 40,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'flex-start',\n        flexWrap: 'wrap'\n      },\n      typo: {\n        fontSize: fontSizes[holder.title.textStyle],\n        fontFamily: \"\".concat(holder.title.font, \", Helvetica, Arial, sans-serif\"),\n        fontWeight: holder.title.bold ? 'bold' : 'normal',\n        fontStyle: holder.title.italic ? 'italic' : 'normal',\n        textDecoration: holder.title.underline ? 'underline' : 'none',\n        textAlign: holder.title.justify,\n        color: holder.title.color,\n        backgroundColor: holder.title.highlight ? '#ffff00' : 'none',\n        padding: 0,\n        height: 'auto'\n      },\n      description: {\n        fontSize: fontSizes[holder.description.textStyle],\n        fontFamily: \"\".concat(holder.description.font, \", Helvetica, Arial, sans-serif\"),\n        color: holder.description.color,\n        textAlign: holder.description.justify,\n        marginTop: 20,\n        padding: 0\n      },\n      jumboContainer: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: holder.jumbotron.justify\n      },\n      newSection: {\n        flexGrow: 1,\n        marginTop: 20,\n        padding: 15,\n        backgroundColor: 'rgb(0, 0, 0, 0.1)',\n        display: 'flex',\n        justifyContent: 'center',\n        transition: 'background-color .4s ease',\n        '&:hover': {\n          backgroundColor: 'rgb(0, 0, 0, 0.2)'\n        }\n      },\n      inputs: {\n        width: '100%',\n        padding: 0 // lineHeight: '1.5rem',\n\n      },\n      infoContainer: {\n        position: 'relative',\n        height: 60,\n        marginTop: 20,\n        paddingLeft: 80,\n        display: 'inline-flex',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        alignContent: 'center',\n        flexWrap: 'wrap',\n        flexBasis: 'auto'\n      },\n      avatar: {\n        height: 60,\n        width: 60,\n        position: 'absolute',\n        top: 0,\n        left: 0\n      },\n      readLength: {\n        color: 'rgba(0, 0, 0, 0.54)'\n      }\n    };\n  });\n  var classes = useStyles();\n\n  var generateDate = function generateDate() {\n    var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    var now = new Date();\n    return \"\".concat(months[now.getMonth()], \" \").concat(now.getDate());\n  };\n\n  return React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    className: classes.container,\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    style: {\n      width: '100%',\n      marginTop: parseInt(holder.title.marginTop),\n      marginBottom: parseInt(holder.title.marginBottom)\n    },\n    inputProps: {\n      className: classes.typo\n    },\n    InputProps: {\n      className: classes.inputs\n    },\n    value: holder.title.text,\n    onClick: function onClick() {\n      return holder.handleSectionMode({\n        el: 'title'\n      });\n    },\n    onChange: function onChange(e) {\n      return holder.handleInput(e, {\n        El: 'title'\n      });\n    },\n    multiline: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    style: {\n      width: '100%'\n    },\n    inputProps: {\n      className: classes.description\n    },\n    InputProps: {\n      className: classes.inputs\n    },\n    value: holder.description.text,\n    onClick: function onClick() {\n      return holder.handleSectionMode({\n        el: 'description'\n      });\n    },\n    onChange: function onChange(e) {\n      return holder.handleInput(e, {\n        El: 'description'\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: classes.infoContainer,\n    style: {\n      width: holder.readLength.justify === 'flex-start' ? '100%' : 'auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(Avatar, {\n    className: classes.avatar,\n    src: \"https://media.licdn.com/dms/image/C4E03AQESXvxigX8NfQ/profile-displayphoto-shrink_800_800/0?e=1571875200&v=beta&t=jVs0jK8YKBHrOOcmnghTMtN9bhPfu7rH9MHADyTboBY\",\n    alt: \"Terri Banner Profile Photo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, \"Terri Banner\")), React.createElement(Typography, {\n    className: classes.readLength,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, generateDate(), \" \\u2022\"), React.createElement(TextField, {\n    style: {\n      width: 20,\n      padding: 0\n    },\n    inputProps: {\n      className: classes.readLength,\n      style: {\n        textAlign: 'center',\n        padding: 0\n      }\n    },\n    InputProps: {\n      className: classes.inputs\n    },\n    value: holder.readLength.text,\n    onClick: function onClick() {\n      return holder.handleSectionMode({\n        el: 'readLength'\n      });\n    },\n    onChange: function onChange(e) {\n      return holder.handleInput(e, {\n        El: 'readLength'\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    className: classes.readLength,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, \"min read\")), React.createElement(\"div\", {\n    className: classes.jumboContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, React.createElement(Jumbotron, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  })), holder.body.map(function (section, index) {\n    if (section.isText) {\n      return React.createElement(TextField, {\n        style: {\n          width: '100%',\n          marginTop: parseInt(holder.body[index].marginTop),\n          marginBottom: parseInt(holder.body[index].marginBottom)\n        },\n        multiline: true,\n        inputProps: {\n          style: {\n            width: '100%',\n            fontSize: fontSizes[holder.body[index].textStyle],\n            fontFamily: \"\".concat(holder.body[index].font, \", Helvetica, Arial, sans-serif\"),\n            fontWeight: holder.body[index].bold ? 'bold' : 'normal',\n            fontStyle: holder.body[index].italic ? 'italic' : 'normal',\n            textDecoration: holder.body[index].underline ? 'underline' : 'none',\n            textAlign: holder.body[index].justify,\n            color: holder.body[index].color,\n            backgroundColor: holder.body[index].highlight ? '#ffff00' : 'none',\n            lineHeight: 1.17\n          }\n        },\n        InputProps: {\n          className: classes.inputs\n        },\n        value: holder.body[index].text,\n        onClick: function onClick() {\n          return holder.handleSectionMode({\n            el: 'body',\n            index: index\n          });\n        },\n        onChange: function onChange(e) {\n          return holder.handleInput(e, {\n            El: 'body',\n            index: index\n          });\n        },\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      });\n    }\n\n    if (section.isImage) {\n      return React.createElement(\"div\", {\n        style: {\n          width: '100%',\n          display: 'flex',\n          justifyContent: section.justify,\n          marginTop: parseInt(holder.body[index].marginTop),\n          marginBottom: parseInt(holder.body[index].marginBottom)\n        },\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(Image, {\n        src: section.src,\n        index: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }));\n    }\n  }), React.createElement(Button, {\n    className: classes.newSection,\n    onClick: holder.newBody,\n    style: {\n      marginRight: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, \"Add Body Section\")), React.createElement(Button, {\n    className: classes.newSection,\n    onClick: holder.newImgEl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }, \"Add Photo\"))));\n};\n\nexport default Preview;","map":{"version":3,"sources":["/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Preview.js"],"names":["React","useContext","makeStyles","Grid","Typography","TextField","Button","Avatar","Jumbotron","Image","EditorContext","fontSizes","h1","h2","h3","h4","h5","h6","Preview","holder","useStyles","theme","container","marginTop","padding","display","justifyContent","alignItems","flexWrap","typo","fontSize","title","textStyle","fontFamily","font","fontWeight","bold","fontStyle","italic","textDecoration","underline","textAlign","justify","color","backgroundColor","highlight","height","description","jumboContainer","width","jumbotron","newSection","flexGrow","transition","inputs","infoContainer","position","paddingLeft","alignContent","flexBasis","avatar","top","left","readLength","classes","generateDate","months","now","Date","getMonth","getDate","parseInt","marginBottom","className","text","handleSectionMode","el","e","handleInput","El","style","body","map","section","index","isText","lineHeight","isImage","src","newBody","marginRight","newImgEl"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography, TextField, Button, Avatar } from '@material-ui/core';\n\nimport Jumbotron from './Tools/Jumbotron';\nimport Image from './Tools/Image';\n\nimport { EditorContext } from '../../Context/EditorContext';\n\nconst fontSizes = {\n    h1: '6rem',\n    h2: '3.75rem',\n    h3: '3rem',\n    h4: '2.125rem',\n    h5: '1.5rem',\n    h6: '1.25rem',\n};\n\nconst Preview = () => {\n\n    const holder = useContext(EditorContext);\n\n    const useStyles = makeStyles((theme) => ({\n        container: {\n            marginTop: 120,\n            padding: 40,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'flex-start',\n            flexWrap: 'wrap',\n        },\n        typo: {\n            fontSize: fontSizes[holder.title.textStyle],\n            fontFamily: `${holder.title.font}, Helvetica, Arial, sans-serif`,\n            fontWeight: holder.title.bold ? 'bold' : 'normal',\n            fontStyle: holder.title.italic ? 'italic' : 'normal',\n            textDecoration: holder.title.underline ? 'underline' : 'none',\n            textAlign: holder.title.justify,\n            color: holder.title.color,\n            backgroundColor: holder.title.highlight ? '#ffff00' : 'none',\n            padding: 0,\n            height: 'auto',\n        },\n        description: {\n            fontSize: fontSizes[holder.description.textStyle],\n            fontFamily: `${holder.description.font}, Helvetica, Arial, sans-serif`,\n            color: holder.description.color,\n            textAlign: holder.description.justify,\n            marginTop: 20,\n            padding: 0,\n        },\n        jumboContainer: {\n            width: '100%',\n            display: 'flex',\n            justifyContent: holder.jumbotron.justify,\n        },\n        newSection: {\n            flexGrow: 1,\n            marginTop: 20,\n            padding: 15,\n            backgroundColor: 'rgb(0, 0, 0, 0.1)',\n            display: 'flex',\n            justifyContent: 'center',\n            transition: 'background-color .4s ease',\n            '&:hover': {\n                backgroundColor: 'rgb(0, 0, 0, 0.2)',\n            },\n        },\n        inputs: {\n            width: '100%',\n            padding: 0,\n            // lineHeight: '1.5rem',\n        },\n        infoContainer: {\n            position: 'relative',\n            height: 60,\n            marginTop: 20,\n            paddingLeft: 80,\n            display: 'inline-flex',\n            justifyContent: 'flex-start',\n            alignItems: 'center',\n            alignContent: 'center',\n            flexWrap: 'wrap',\n            flexBasis: 'auto',\n        },\n        avatar: {\n            height: 60,\n            width: 60,\n            position: 'absolute',\n            top: 0,\n            left: 0,\n        },\n        readLength: {\n            color: 'rgba(0, 0, 0, 0.54)',\n        },\n    }));\n    \n    const classes = useStyles();\n\n    const generateDate = () => {\n        const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n        let now = new Date();\n        return `${months[now.getMonth()]} ${now.getDate()}`;\n    };\n\n    return (\n        <Grid container>\n\n            <Grid className={classes.container} item xs={12}>\n\n                <TextField\n                    style={{\n                        width: '100%',\n                        marginTop: parseInt(holder.title.marginTop),\n                        marginBottom: parseInt(holder.title.marginBottom),\n                    }}\n                    inputProps={{ className: classes.typo }}\n                    InputProps={{ className: classes.inputs }}\n                    value={holder.title.text}\n                    onClick={() => holder.handleSectionMode({ el: 'title' })}\n                    onChange={(e) => holder.handleInput(e, { El: 'title' })}\n                    multiline={true}\n                />\n\n                <TextField\n                    style={{ width: '100%' }}                \n                    inputProps={{ className: classes.description }}\n                    InputProps={{ className: classes.inputs }}\n                    value={holder.description.text}\n                    onClick={() => holder.handleSectionMode({ el: 'description' })}\n                    onChange={(e) => holder.handleInput(e, { El: 'description' })}\n                />\n\n                <div\n                    className={classes.infoContainer}\n                    style={{ width: holder.readLength.justify === 'flex-start' ? '100%' : 'auto' }}\n                >\n\n                    <Avatar\n                        className={classes.avatar}\n                        src={`https://media.licdn.com/dms/image/C4E03AQESXvxigX8NfQ/profile-displayphoto-shrink_800_800/0?e=1571875200&v=beta&t=jVs0jK8YKBHrOOcmnghTMtN9bhPfu7rH9MHADyTboBY`}\n                        alt=\"Terri Banner Profile Photo\"\n                    />\n\n                    <div style={{ width: '100%' }}>\n                        <Typography>\n                            Terri Banner\n                        </Typography>\n                    </div>\n\n                    <Typography className={classes.readLength}>\n                        {generateDate()} &#8226;\n                    </Typography>\n\n                    <TextField\n                        style={{ width: 20, padding: 0 }}                \n                        inputProps={{\n                            className: classes.readLength,\n                            style: { textAlign: 'center', padding: 0 },\n                        }}\n                        InputProps={{ className: classes.inputs }}\n                        value={holder.readLength.text}\n                        onClick={() => holder.handleSectionMode({ el: 'readLength' })}\n                        onChange={(e) => holder.handleInput(e, { El: 'readLength' })}\n                    />\n\n                    <Typography className={classes.readLength}>\n                        min read\n                    </Typography>\n\n                </div>\n                \n                <div className={classes.jumboContainer}>\n\n                    <Jumbotron />\n                \n                </div>\n                \n                { \n                    holder.body.map((section, index) => {\n                        \n                        if (section.isText) {\n                            return (\n                                <TextField\n                                    style={{\n                                        width: '100%',\n                                        marginTop: parseInt(holder.body[index].marginTop),\n                                        marginBottom: parseInt(holder.body[index].marginBottom),\n                                    }}\n                                    multiline={true}\n                                    inputProps={{\n                                        style: {\n                                            width: '100%',\n                                            fontSize: fontSizes[holder.body[index].textStyle],\n                                            fontFamily: `${holder.body[index].font}, Helvetica, Arial, sans-serif`,\n                                            fontWeight: holder.body[index].bold ? 'bold' : 'normal',\n                                            fontStyle: holder.body[index].italic ? 'italic' : 'normal',\n                                            textDecoration: holder.body[index].underline ? 'underline' : 'none',\n                                            textAlign: holder.body[index].justify,\n                                            color: holder.body[index].color,\n                                            backgroundColor: holder.body[index].highlight ? '#ffff00' : 'none',\n                                            lineHeight: 1.17,\n                                        } \n                                    }}\n                                    InputProps={{ className: classes.inputs }}\n                                    value={holder.body[index].text}\n                                    onClick={() => holder.handleSectionMode({ el: 'body', index: index })}\n                                    onChange={(e) => holder.handleInput(e, { El: 'body', index: index })}\n                                    key={index}\n                                />\n                            );\n                        }\n                        if (section.isImage) {\n                            return (\n                                <div\n                                    style={{\n                                        width: '100%',\n                                        display: 'flex',\n                                        justifyContent: section.justify,\n                                        marginTop: parseInt(holder.body[index].marginTop),\n                                        marginBottom: parseInt(holder.body[index].marginBottom),\n                                    }}\n                                    key={index}\n                                >\n                                    <Image\n                                        src={section.src}\n                                        index={index}\n                                    />\n                                </div>\n                            );\n                        }\n                    })\n                }\n\n                <Button\n                    className={classes.newSection}\n                    onClick={holder.newBody}\n                    style={{ marginRight: 20 }}\n                >\n                    <Typography variant=\"h6\">\n                        Add Body Section\n                    </Typography>\n                </Button>\n\n                <Button\n                    className={classes.newSection}\n                    onClick={holder.newImgEl}\n                >\n                    <Typography variant=\"h6\">\n                        Add Photo\n                    </Typography>\n                </Button>\n\n            </Grid>\n\n        </Grid>\n    );\n};\n\nexport default Preview;\n"]},"metadata":{},"sourceType":"module"}