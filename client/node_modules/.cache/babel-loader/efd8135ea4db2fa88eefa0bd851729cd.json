{"ast":null,"code":"var _jsxFileName = \"/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Preview.js\";\nimport React, { useContext, useEffect, Fragment } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography, TextField } from '@material-ui/core';\nimport { EditorContext } from '../../Context/EditorContext';\nvar fontSizes = {\n  h1: '6rem',\n  h2: '3.75rem',\n  h3: '3rem',\n  h4: '2.125rem',\n  h5: '1.5rem',\n  h6: '1.25rem'\n};\n\nvar Preview = function Preview() {\n  var holder = useContext(EditorContext);\n  var useStyles = makeStyles(function (theme) {\n    return {\n      typo: {\n        fontSize: fontSizes[holder.title.textStyle],\n        fontFamily: \"\".concat(holder.title.font, \", Helvetica, Arial, sans-serif\"),\n        fontWeight: holder.title.bold ? 'bold' : 'normal',\n        fontStyle: holder.title.italic ? 'italic' : 'normal',\n        textDecoration: holder.title.underline ? 'underline' : 'none',\n        textAlign: holder.title.justify,\n        color: holder.title.color,\n        backgroundColor: holder.title.highlight ? '#ffff00' : 'none'\n      },\n      body: {\n        fontFamily: \"\".concat(holder.currentBody.font, \", Helvetica, Arial, sans-serif\"),\n        fontWeight: holder.currentBody.bold ? 'bold' : 'normal',\n        fontStyle: holder.currentBody.italic ? 'italic' : 'normal',\n        textDecoration: holder.currentBody.underline ? 'underline' : 'none',\n        textAlign: holder.currentBody.justify,\n        color: holder.currentBody.color,\n        backgroundColor: holder.currentBody.highlight ? '#ffff00' : 'none'\n      }\n    };\n  });\n  var classes = useStyles();\n  return React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.typo,\n    variant: holder.title.textStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, holder.title.text), React.createElement(TextField, {\n    variant: \"outlined\",\n    inputProps: {\n      className: classes.typo\n    },\n    value: holder.title.text,\n    onChange: holder.handleInput,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), holder.jumbotron ? React.createElement(\"img\", {\n    style: {\n      width: '100%',\n      height: 'auto'\n    },\n    src: holder.jumbotron,\n    alt: holder.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }) : '', holder.body.map(function (section, index) {\n    return React.createElement(Typography, {\n      onClick: function onClick() {\n        return holder.editBodyEl(index);\n      },\n      style: {\n        fontFamily: \"\".concat(section.font, \", Helvetica, Arial, sans-serif\"),\n        fontWeight: section.bold ? 'bold' : 'normal',\n        fontStyle: section.italic ? 'italic' : 'normal',\n        textDecoration: section.underline ? 'underline' : 'none',\n        color: section.color,\n        backgroundColor: section.highlight ? '#ffff00' : 'none'\n      },\n      variant: section.textStyle,\n      align: section.justify,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, section.text);\n  }), React.createElement(Typography, {\n    className: classes.body,\n    variant: holder.currentBody.textStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, holder.currentBody.text)));\n};\n\nexport default Preview;","map":{"version":3,"sources":["/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Preview.js"],"names":["React","useContext","useEffect","Fragment","makeStyles","Grid","Typography","TextField","EditorContext","fontSizes","h1","h2","h3","h4","h5","h6","Preview","holder","useStyles","theme","typo","fontSize","title","textStyle","fontFamily","font","fontWeight","bold","fontStyle","italic","textDecoration","underline","textAlign","justify","color","backgroundColor","highlight","body","currentBody","classes","text","className","handleInput","jumbotron","width","height","map","section","index","editBodyEl"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, Fragment } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography, TextField } from '@material-ui/core';\n\nimport { EditorContext } from '../../Context/EditorContext';\n\nconst fontSizes = {\n    h1: '6rem',\n    h2: '3.75rem',\n    h3: '3rem',\n    h4: '2.125rem',\n    h5: '1.5rem',\n    h6: '1.25rem',\n}\n\nconst Preview = () => {\n\n    const holder = useContext(EditorContext);\n\n    const useStyles = makeStyles(theme => ({\n        typo: {\n            fontSize: fontSizes[holder.title.textStyle],\n            fontFamily: `${holder.title.font}, Helvetica, Arial, sans-serif`,\n            fontWeight: holder.title.bold ? 'bold' : 'normal',\n            fontStyle: holder.title.italic ? 'italic' : 'normal',\n            textDecoration: holder.title.underline ? 'underline' : 'none',\n            textAlign: holder.title.justify,\n            color: holder.title.color,\n            backgroundColor: holder.title.highlight ? '#ffff00' : 'none'\n        },\n        body: {\n            fontFamily: `${holder.currentBody.font}, Helvetica, Arial, sans-serif`,\n            fontWeight: holder.currentBody.bold ? 'bold' : 'normal',\n            fontStyle: holder.currentBody.italic ? 'italic' : 'normal',\n            textDecoration: holder.currentBody.underline ? 'underline' : 'none',\n            textAlign: holder.currentBody.justify,\n            color: holder.currentBody.color,\n            backgroundColor: holder.currentBody.highlight ? '#ffff00' : 'none' \n        },\n    }));\n    \n    const classes = useStyles();\n\n    return (\n        \n        <Grid container>\n\n            <Grid item xs={12}>\n\n\n                <Typography className={classes.typo} variant={holder.title.textStyle}>\n                    {holder.title.text}\n                </Typography>\n                <TextField \n                    variant=\"outlined\"\n                    inputProps={{className: classes.typo}}\n                    value={holder.title.text}\n                        onChange={holder.handleInput}\n                        />\n\n                {\n                    holder.jumbotron\n                        ?\n                    <img style={{ width: '100%', height: 'auto' }} src={holder.jumbotron} alt={holder.title} />\n                        :\n                    ''\n                }\n                \n                { \n                    holder.body.map((section, index) => {\n                        return (\n\n                            <Typography\n                                onClick={() => holder.editBodyEl(index)}\n                                style={{\n                                    fontFamily: `${section.font}, Helvetica, Arial, sans-serif`,\n                                    fontWeight: section.bold ? 'bold' : 'normal',\n                                    fontStyle: section.italic ? 'italic' : 'normal',\n                                    textDecoration: section.underline ? 'underline' : 'none',\n                                    color: section.color,\n                                    backgroundColor: section.highlight ? '#ffff00' : 'none'                        \n                                }}\n                                variant={section.textStyle}\n                                align={section.justify}\n                                key={index}\n                            >\n                                {section.text}\n                            </Typography>\n                        )\n                    })\n                }\n\n                <Typography className={classes.body} variant={holder.currentBody.textStyle}>\n                    {holder.currentBody.text}\n                </Typography>\n\n            </Grid>\n\n        </Grid>\n    );\n};\n\nexport default Preview;"]},"metadata":{},"sourceType":"module"}