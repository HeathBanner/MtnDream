{"ast":null,"code":"import _slicedToArray from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Tools/Jumbotron.js\";\nimport React, { useContext, useState, Fragment } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Popover, Typography, Button, TextField } from '@material-ui/core';\nimport { EditorContext } from '../../../Context/EditorContext';\nvar useStyles = makeStyles(function (theme) {\n  return {};\n});\n\nvar Jumbotron = function Jumbotron() {\n  var classes = useStyles();\n  var holder = useContext(EditorContext);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      anchorEl = _useState2[0],\n      setAnchorEl = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    setAnchorEl(e.currentTarget);\n  };\n\n  var handleClose = function handleClose() {\n    setAnchorEl(null);\n  };\n\n  var open = Boolean(anchorEl);\n  var id = open ? 'simple-popover' : undefined;\n\n  if (holder.jumbotron) {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      style: {\n        width: '100%',\n        height: 'auto'\n      },\n      src: holder.jumbotron,\n      alt: holder.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    })), React.createElement(Popover, {\n      id: id,\n      open: open,\n      anchorEl: anchorEl,\n      onClose: handleClose,\n      anchorOrigin: {\n        vertical: 'center',\n        horizontal: 'center'\n      },\n      transformOrigin: {\n        vertical: 'center',\n        horizontal: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      label: \"Paste Url\",\n      variant: \"outlined\",\n      value: holder.jumbotron,\n      onChange: function onChange(e) {\n        return holder.handleInput(e, {\n          el: 'jumbotron'\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    })));\n  } else {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      onClick: handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Add Jumbotron\"), React.createElement(Popover, {\n      id: id,\n      open: open,\n      anchorEl: anchorEl,\n      onClose: handleClose,\n      anchorOrigin: {\n        vertical: 'center',\n        horizontal: 'center'\n      },\n      transformOrigin: {\n        vertical: 'center',\n        horizontal: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      label: \"Paste Url\",\n      variant: \"outlined\",\n      value: holder.jumbotron,\n      onChange: function onChange(e) {\n        return holder.handleInput(e, {\n          el: 'jumbotron'\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    })));\n  }\n};\n\nexport default Jumbotron;","map":{"version":3,"sources":["/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Tools/Jumbotron.js"],"names":["React","useContext","useState","Fragment","makeStyles","Popover","Typography","Button","TextField","EditorContext","useStyles","theme","Jumbotron","classes","holder","anchorEl","setAnchorEl","handleClick","e","currentTarget","handleClose","open","Boolean","id","undefined","jumbotron","width","height","title","vertical","horizontal","handleInput","el"],"mappings":"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","sourcesContent":["import React, { useContext, useState, Fragment } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Popover, Typography, Button, TextField } from '@material-ui/core';\n\nimport { EditorContext } from '../../../Context/EditorContext';\n\nconst useStyles = makeStyles(theme => ({\n\n}));\n\nconst Jumbotron = () => {\n\n    const classes = useStyles();\n    const holder = useContext(EditorContext);\n\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const handleClick = e => {\n        setAnchorEl(e.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popover' : undefined;\n\n    if(holder.jumbotron) {\n        return (\n\n            <Fragment>\n\n                <Button onClick={handleClick}>\n\n                    <img \n                        style={{ width: '100%', height: 'auto' }} \n                        src={holder.jumbotron} \n                        alt={holder.title} \n                    />\n\n                </Button>\n\n                <Popover\n                    id={id}\n                    open={open}\n                    anchorEl={anchorEl}\n                    onClose={handleClose}\n                    anchorOrigin={{\n                        vertical: 'center',\n                        horizontal: 'center'\n                    }}\n                    transformOrigin={{\n                        vertical: 'center',\n                        horizontal: 'center'\n                    }}\n                > \n\n                    <TextField \n                        label=\"Paste Url\"\n                        variant=\"outlined\"\n                        value={holder.jumbotron}\n                        onChange={(e) => holder.handleInput(e, { el: 'jumbotron' })}\n                    />\n\n                </Popover> \n\n            </Fragment>\n        );\n    }\n    else {\n\n        return (\n\n            <Fragment>\n\n                <Button variant=\"contained\" onClick={handleClick}>\n                    Add Jumbotron\n                </Button>\n                \n                <Popover\n                    id={id}\n                    open={open}\n                    anchorEl={anchorEl}\n                    onClose={handleClose}\n                    anchorOrigin={{\n                        vertical: 'center',\n                        horizontal: 'center'\n                    }}\n                    transformOrigin={{\n                        vertical: 'center',\n                        horizontal: 'center'\n                    }}\n                > \n\n                    <TextField \n                        label=\"Paste Url\"\n                        variant=\"outlined\"\n                        value={holder.jumbotron}\n                        onChange={(e) => holder.handleInput(e, { el: 'jumbotron' })}\n                    />\n\n                </Popover>\n\n            </Fragment>\n        );\n    }\n};\n\nexport default Jumbotron;"]},"metadata":{},"sourceType":"module"}