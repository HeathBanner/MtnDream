{"ast":null,"code":"import _regeneratorRuntime from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// This function will check if the required parameters are passing\n// before passing anything to the database\nexport var PreSubmit = function PreSubmit(edit) {\n  switch (true) {\n    case !edit.title.text:\n      return {\n        warning: true,\n        message: 'Title is required!'\n      };\n\n    case !edit.description.text:\n      return {\n        warning: true,\n        message: 'Description is required!'\n      };\n\n    case !edit.readLength.text:\n      return {\n        warning: true,\n        message: 'Read Length is required!'\n      };\n\n    case !edit.jumbotron.src:\n      return {\n        warning: true,\n        message: 'Jumbotron is required!'\n      };\n\n    case !edit.body[0].text:\n      return {\n        warning: true,\n        message: 'A body section is required!'\n      };\n\n    case edit.title.isPublished:\n      return {\n        warning: false\n      };\n\n    case !edit.title.isPublished:\n      return {\n        warning: false\n      };\n\n    default:\n      return {\n        error: true,\n        message: 'Something went wrong :('\n      };\n  }\n};\nexport var FetchSubmit =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(edit, url) {\n    var data, options, res, json;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            data = HandleData(edit);\n            options = {\n              method: \"POST\",\n              body: JSON.stringify(data),\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            };\n            _context.next = 4;\n            return fetch(\"/api/editors/\".concat(url), options);\n\n          case 4:\n            res = _context.sent;\n            _context.next = 7;\n            return res.json();\n\n          case 7:\n            json = _context.sent;\n\n            if (!json.error) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              error: true,\n              message: json.error\n            });\n\n          case 10:\n            return _context.abrupt(\"return\", {\n              success: true,\n              message: 'Article published!'\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function FetchSubmit(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nexport var HandleData = function HandleData(edit) {\n  var now = new Date();\n  var date = {\n    parsedDate: \"\".concat(months[now.getMonth()], \" \").concat(now.getDate()),\n    epoch: now.getTime()\n  };\n  return {\n    title: edit.title,\n    description: edit.description,\n    readLength: edit.readLength,\n    jumbotron: edit.jumbotron,\n    body: edit.body,\n    date: date\n  };\n};","map":{"version":3,"sources":["/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Services/Services.js"],"names":["PreSubmit","edit","title","text","warning","message","description","readLength","jumbotron","src","body","isPublished","error","FetchSubmit","url","data","HandleData","options","method","JSON","stringify","headers","fetch","res","json","success","months","now","Date","date","parsedDate","getMonth","getDate","epoch","getTime"],"mappings":";;AACA;AACA;AACA,OAAO,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAU;AAC/B,UAAQ,IAAR;AACI,SAAK,CAACA,IAAI,CAACC,KAAL,CAAWC,IAAjB;AACI,aAAO;AAAEC,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,OAAO,EAAE;AAA1B,OAAP;;AACJ,SAAK,CAACJ,IAAI,CAACK,WAAL,CAAiBH,IAAvB;AACI,aAAO;AAAEC,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,OAAO,EAAE;AAA1B,OAAP;;AACJ,SAAK,CAACJ,IAAI,CAACM,UAAL,CAAgBJ,IAAtB;AACI,aAAO;AAAEC,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,OAAO,EAAE;AAA1B,OAAP;;AACJ,SAAK,CAACJ,IAAI,CAACO,SAAL,CAAeC,GAArB;AACI,aAAO;AAAEL,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,OAAO,EAAE;AAA1B,OAAP;;AACJ,SAAK,CAACJ,IAAI,CAACS,IAAL,CAAU,CAAV,EAAaP,IAAnB;AACI,aAAO;AAAEC,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,OAAO,EAAE;AAA1B,OAAP;;AACJ,SAAKJ,IAAI,CAACC,KAAL,CAAWS,WAAhB;AACI,aAAO;AAAEP,QAAAA,OAAO,EAAE;AAAX,OAAP;;AACJ,SAAK,CAACH,IAAI,CAACC,KAAL,CAAWS,WAAjB;AACI,aAAO;AAAEP,QAAAA,OAAO,EAAE;AAAX,OAAP;;AACJ;AACI,aAAO;AAAEQ,QAAAA,KAAK,EAAE,IAAT;AAAeP,QAAAA,OAAO,EAAE;AAAxB,OAAP;AAhBR;AAkBH,CAnBM;AAqBP,OAAO,IAAMQ,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOZ,IAAP,EAAaa,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,IADiB,GACVC,UAAU,CAACf,IAAD,CADA;AAEjBgB,YAAAA,OAFiB,GAEP;AACZC,cAAAA,MAAM,EAAE,MADI;AAEZR,cAAAA,IAAI,EAAES,IAAI,CAACC,SAAL,CAAeL,IAAf,CAFM;AAGZM,cAAAA,OAAO,EAAE;AAAE,gCAAgB;AAAlB;AAHG,aAFO;AAAA;AAAA,mBAQLC,KAAK,wBAAiBR,GAAjB,GAAwBG,OAAxB,CARA;;AAAA;AAQjBM,YAAAA,GARiB;AAAA;AAAA,mBASJA,GAAG,CAACC,IAAJ,EATI;;AAAA;AASjBA,YAAAA,IATiB;;AAAA,iBAWnBA,IAAI,CAACZ,KAXc;AAAA;AAAA;AAAA;;AAAA,6CAYZ;AAAEA,cAAAA,KAAK,EAAE,IAAT;AAAeP,cAAAA,OAAO,EAAEmB,IAAI,CAACZ;AAA7B,aAZY;;AAAA;AAAA,6CAehB;AAAEa,cAAAA,OAAO,EAAE,IAAX;AAAiBpB,cAAAA,OAAO,EAAE;AAA1B,aAfgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXQ,WAAW;AAAA;AAAA;AAAA,GAAjB;AAkBP,IAAMa,MAAM,GAAG,CACX,SADW,EAEX,UAFW,EAGX,OAHW,EAIX,OAJW,EAKX,KALW,EAMX,MANW,EAOX,MAPW,EAQX,QARW,EASX,WATW,EAUX,SAVW,EAWX,UAXW,EAYX,UAZW,CAAf;AAeA,OAAO,IAAMV,UAAU,GAAG,SAAbA,UAAa,CAACf,IAAD,EAAU;AAChC,MAAM0B,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,MAAMC,IAAI,GAAG;AACTC,IAAAA,UAAU,YAAKJ,MAAM,CAACC,GAAG,CAACI,QAAJ,EAAD,CAAX,cAA+BJ,GAAG,CAACK,OAAJ,EAA/B,CADD;AAETC,IAAAA,KAAK,EAAEN,GAAG,CAACO,OAAJ;AAFE,GAAb;AAIC,SAAO;AACJhC,IAAAA,KAAK,EAAED,IAAI,CAACC,KADR;AAEJI,IAAAA,WAAW,EAAEL,IAAI,CAACK,WAFd;AAGJC,IAAAA,UAAU,EAAEN,IAAI,CAACM,UAHb;AAIJC,IAAAA,SAAS,EAAEP,IAAI,CAACO,SAJZ;AAKJE,IAAAA,IAAI,EAAET,IAAI,CAACS,IALP;AAMJmB,IAAAA,IAAI,EAAJA;AANI,GAAP;AAQJ,CAdM","sourcesContent":["\n// This function will check if the required parameters are passing\n// before passing anything to the database\nexport const PreSubmit = (edit) => {\n    switch (true) {\n        case !edit.title.text:\n            return { warning: true, message: 'Title is required!' };\n        case !edit.description.text:\n            return { warning: true, message: 'Description is required!' };\n        case !edit.readLength.text:\n            return { warning: true, message: 'Read Length is required!' };\n        case !edit.jumbotron.src:\n            return { warning: true, message: 'Jumbotron is required!' };\n        case !edit.body[0].text:\n            return { warning: true, message: 'A body section is required!' };\n        case edit.title.isPublished:\n            return { warning: false };\n        case !edit.title.isPublished:\n            return { warning: false };\n        default:\n            return { error: true, message: 'Something went wrong :(' };\n    }\n};\n\nexport const FetchSubmit = async (edit, url) => {\n    const data = HandleData(edit);\n    const options = {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: { 'Content-Type': 'application/json' }\n    };\n\n    const res = await fetch(`/api/editors/${url}`, options);\n    const json = await res.json();\n\n    if (json.error) {\n        return { error: true, message: json.error };\n    }\n\n    return { success: true, message: 'Article published!' };\n}\n\nconst months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n];\n\nexport const HandleData = (edit) => {\n    const now = new Date();\n    const date = {\n        parsedDate: `${months[now.getMonth()]} ${now.getDate()}`,\n        epoch: now.getTime(),\n    };\n     return {\n        title: edit.title,\n        description: edit.description,\n        readLength: edit.readLength,\n        jumbotron: edit.jumbotron,\n        body: edit.body,\n        date,\n    };\n}"]},"metadata":{},"sourceType":"module"}