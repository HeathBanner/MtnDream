{"ast":null,"code":"var _jsxFileName = \"/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Preview.js\";\nimport React, { useContext, useEffect, Fragment } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography, TextField, Button } from '@material-ui/core';\nimport Jumbotron from './Tools/Jumbotron';\nimport { EditorContext } from '../../Context/EditorContext';\nvar fontSizes = {\n  h1: '6rem',\n  h2: '3.75rem',\n  h3: '3rem',\n  h4: '2.125rem',\n  h5: '1.5rem',\n  h6: '1.25rem'\n};\n\nvar Preview = function Preview() {\n  var holder = useContext(EditorContext);\n  var useStyles = makeStyles(function (theme) {\n    return {\n      container: {},\n      typo: {\n        fontSize: fontSizes[holder.title.textStyle],\n        fontFamily: \"\".concat(holder.title.font, \", Helvetica, Arial, sans-serif\"),\n        fontWeight: holder.title.bold ? 'bold' : 'normal',\n        fontStyle: holder.title.italic ? 'italic' : 'normal',\n        textDecoration: holder.title.underline ? 'underline' : 'none',\n        textAlign: holder.title.justify,\n        color: holder.title.color,\n        backgroundColor: holder.title.highlight ? '#ffff00' : 'none'\n      },\n      body: {\n        width: '100%',\n        fontSize: fontSizes[holder.title.textStyle],\n        fontFamily: \"\".concat(holder.currentBody.font, \", Helvetica, Arial, sans-serif\"),\n        fontWeight: holder.currentBody.bold ? 'bold' : 'normal',\n        fontStyle: holder.currentBody.italic ? 'italic' : 'normal',\n        textDecoration: holder.currentBody.underline ? 'underline' : 'none',\n        textAlign: holder.currentBody.justify,\n        color: holder.currentBody.color,\n        backgroundColor: holder.currentBody.highlight ? '#ffff00' : 'none'\n      },\n      newSection: {\n        width: '100%',\n        padding: 15,\n        backgroundColor: 'rgb(0, 0, 0, 0.1)',\n        display: 'flex',\n        justifyContent: 'center',\n        transition: 'background-color .4s ease',\n        '&:hover': {\n          backgroundColor: 'rgb(0, 0, 0, 0.2)'\n        }\n      },\n      bodyInputs: {\n        width: '100%',\n        padding: 0,\n        lineHeight: '1.5rem'\n      }\n    };\n  });\n  var classes = useStyles();\n  return React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    className: classes.container,\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    style: {\n      width: '100%'\n    },\n    inputProps: {\n      className: classes.typo\n    },\n    value: holder.title.text,\n    onClick: function onClick() {\n      return holder.handleSectionMode({\n        el: 'title'\n      });\n    },\n    onChange: function onChange(e) {\n      return holder.handleInput(e, {\n        El: 'title'\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(Jumbotron, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), holder.body.map(function (section, index) {\n    return React.createElement(TextField, {\n      style: {\n        width: '100%',\n        marginTop: 40\n      },\n      multiline: true,\n      inputProps: {\n        style: {\n          width: '100%',\n          fontSize: fontSizes[holder.body[index].textStyle],\n          fontFamily: \"\".concat(holder.body[index].font, \", Helvetica, Arial, sans-serif\"),\n          fontWeight: holder.body[index].bold ? 'bold' : 'normal',\n          fontStyle: holder.body[index].italic ? 'italic' : 'normal',\n          textDecoration: holder.body[index].underline ? 'underline' : 'none',\n          textAlign: holder.body[index].justify,\n          color: holder.body[index].color,\n          backgroundColor: holder.body[index].highlight ? '#ffff00' : 'none'\n        }\n      },\n      InputProps: {\n        className: classes.bodyInputs\n      },\n      value: holder.body[index].text,\n      onClick: function onClick() {\n        return holder.handleSectionMode({\n          el: 'body',\n          index: index\n        });\n      },\n      onChange: function onChange(e) {\n        return holder.handleInput(e, {\n          El: 'body',\n          index: index\n        });\n      },\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    });\n  }), React.createElement(Button, {\n    className: classes.newSection,\n    onClick: holder.newBody,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"Add another body section\")), React.createElement(Typography, {\n    variant: \"h4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"test\")));\n};\n\nexport default Preview;","map":{"version":3,"sources":["/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Editor/Preview.js"],"names":["React","useContext","useEffect","Fragment","makeStyles","Grid","Typography","TextField","Button","Jumbotron","EditorContext","fontSizes","h1","h2","h3","h4","h5","h6","Preview","holder","useStyles","theme","container","typo","fontSize","title","textStyle","fontFamily","font","fontWeight","bold","fontStyle","italic","textDecoration","underline","textAlign","justify","color","backgroundColor","highlight","body","width","currentBody","newSection","padding","display","justifyContent","transition","bodyInputs","lineHeight","classes","className","text","handleSectionMode","el","e","handleInput","El","map","section","index","marginTop","style","newBody"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, Fragment } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Typography, TextField, Button } from '@material-ui/core';\n\nimport Jumbotron from './Tools/Jumbotron';\n\nimport { EditorContext } from '../../Context/EditorContext';\n\nconst fontSizes = {\n    h1: '6rem',\n    h2: '3.75rem',\n    h3: '3rem',\n    h4: '2.125rem',\n    h5: '1.5rem',\n    h6: '1.25rem',\n}\n\nconst Preview = () => {\n\n    const holder = useContext(EditorContext);\n\n    const useStyles = makeStyles(theme => ({\n        container: {\n        },\n        typo: {\n            fontSize: fontSizes[holder.title.textStyle],\n            fontFamily: `${holder.title.font}, Helvetica, Arial, sans-serif`,\n            fontWeight: holder.title.bold ? 'bold' : 'normal',\n            fontStyle: holder.title.italic ? 'italic' : 'normal',\n            textDecoration: holder.title.underline ? 'underline' : 'none',\n            textAlign: holder.title.justify,\n            color: holder.title.color,\n            backgroundColor: holder.title.highlight ? '#ffff00' : 'none'\n        },\n        body: {\n            width: '100%',\n            fontSize: fontSizes[holder.title.textStyle],\n            fontFamily: `${holder.currentBody.font}, Helvetica, Arial, sans-serif`,\n            fontWeight: holder.currentBody.bold ? 'bold' : 'normal',\n            fontStyle: holder.currentBody.italic ? 'italic' : 'normal',\n            textDecoration: holder.currentBody.underline ? 'underline' : 'none',\n            textAlign: holder.currentBody.justify,\n            color: holder.currentBody.color,\n            backgroundColor: holder.currentBody.highlight ? '#ffff00' : 'none' \n        },\n        newSection: {\n            width: '100%',\n            padding: 15,\n            backgroundColor: 'rgb(0, 0, 0, 0.1)',\n            display: 'flex',\n            justifyContent: 'center',\n            transition: 'background-color .4s ease',\n            '&:hover': {\n                backgroundColor: 'rgb(0, 0, 0, 0.2)',\n            },\n        },\n        bodyInputs: {\n            width: '100%',\n            padding: 0,\n            lineHeight: '1.5rem',\n        },\n    }));\n    \n    const classes = useStyles();\n\n    return (\n        <Grid container>\n\n            <Grid className={classes.container} item xs={12}>\n\n                <TextField \n                    style={{ width: '100%' }}\n                    inputProps={{ className: classes.typo }}\n                    value={holder.title.text}\n                    onClick={() => holder.handleSectionMode({ el: 'title' })}\n                    onChange={(e) => holder.handleInput(e, { El: 'title' })}\n                />\n\n                <Jumbotron />\n                \n                { \n                    holder.body.map((section, index) => {\n                        return (\n                            <TextField\n                                style={{ width: '100%', marginTop: 40 }}\n                                multiline={true}\n                                inputProps={{\n                                    style: {\n                                        width: '100%',\n                                        fontSize: fontSizes[holder.body[index].textStyle],\n                                        fontFamily: `${holder.body[index].font}, Helvetica, Arial, sans-serif`,\n                                        fontWeight: holder.body[index].bold ? 'bold' : 'normal',\n                                        fontStyle: holder.body[index].italic ? 'italic' : 'normal',\n                                        textDecoration: holder.body[index].underline ? 'underline' : 'none',\n                                        textAlign: holder.body[index].justify,\n                                        color: holder.body[index].color,\n                                        backgroundColor: holder.body[index].highlight ? '#ffff00' : 'none'                         \n                                    } \n                                }}\n                                InputProps={{ className: classes.bodyInputs }}\n                                value={holder.body[index].text}\n                                onClick={() => holder.handleSectionMode({ el: 'body', index: index })}\n                                onChange={(e) => holder.handleInput(e, { El: 'body', index: index })}\n                                key={index}\n                            />\n                        )\n                    })\n                }\n\n                <Button\n                    className={classes.newSection}\n                    onClick={holder.newBody}\n                >\n                    <Typography variant=\"h6\">\n                        Add another body section\n                    </Typography>\n                </Button>\n\n                <Typography variant=\"h4\">\n                    test\n                </Typography>\n\n            </Grid>\n\n        </Grid>\n    );\n};\n\nexport default Preview;\n"]},"metadata":{},"sourceType":"module"}