{"ast":null,"code":"import _defineProperty from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/God/Desktop/github/mtndream/MtnDream/client/src/Context/EditorContext.js\";\nimport React, { useState, createContext, useEffect } from 'react';\nexport var EditorContext = createContext();\nvar intialPreview = {\n  text: '',\n  bold: false,\n  italic: false,\n  underline: false,\n  color: 'black',\n  highlight: false,\n  font: 'Roboto',\n  justify: 'left',\n  textStyle: 'body1',\n  marginTop: 40,\n  marginBottom: 0,\n  isText: true,\n  isImage: false\n};\nvar initialImg = {\n  isImage: true,\n  src: '',\n  alt: '',\n  height: '',\n  width: '',\n  justify: 'left',\n  marginTop: 40,\n  marginBottom: 0\n};\nexport var EditorProvider = function EditorProvider(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      editMode = _useState2[0],\n      setEditMode = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      articleList = _useState4[0],\n      setArticleList = _useState4[1];\n\n  var _useState5 = useState({\n    el: 'title'\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      sectionMode = _useState6[0],\n      setSectionMode = _useState6[1];\n\n  var _useState7 = useState(_objectSpread({}, intialPreview)),\n      _useState8 = _slicedToArray(_useState7, 2),\n      title = _useState8[0],\n      setTitle = _useState8[1];\n\n  var _useState9 = useState(_objectSpread({}, initialImg)),\n      _useState10 = _slicedToArray(_useState9, 2),\n      jumbotron = _useState10[0],\n      setJumbotron = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      currentBody = _useState12[0],\n      setCurrentBody = _useState12[1];\n\n  var _useState13 = useState([_objectSpread({}, intialPreview)]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      body = _useState14[0],\n      setBody = _useState14[1];\n\n  useEffect(function () {\n    fetch('/api/editors/getList').then(function (res) {\n      return res.json();\n    }).then(function (result) {\n      setArticleList(result);\n    }).catch(function (error) {});\n  }, []);\n\n  var handleMode = function handleMode() {\n    setEditMode(!editMode);\n  };\n\n  var editArticle = function editArticle(index) {\n    setTitle(articleList[index].title);\n    setJumbotron(articleList[index].jumbotron);\n    setBody(articleList[index].body);\n    setEditMode(!editMode);\n  };\n\n  var editBodyEl = function editBodyEl(index) {\n    setCurrentBody(index);\n  };\n\n  var newBodyEl = function newBodyEl() {\n    var newBody = body;\n    newBody.push(_objectSpread({}, intialPreview));\n    setCurrentBody(newBody.length - 1);\n    setBody(_toConsumableArray(newBody));\n  };\n\n  var handleSectionMode = function handleSectionMode(newSection) {\n    switch (newSection.el) {\n      case 'title':\n        setSectionMode(newSection);\n        break;\n\n      case 'jumbotron':\n        setSectionMode(newSection);\n        break;\n\n      case 'body':\n        editBodyEl(newSection.index);\n        setSectionMode(newSection);\n        break;\n\n      case 'image':\n        setSectionMode(newSection);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  var handleSubmit = function handleSubmit(data) {\n    fetch('/api/editors/newSection', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (result) {\n      setTitle(result.title);\n      setJumbotron(result.jumbotron);\n      setBody(result.body);\n    }).catch(function (error) {});\n  };\n\n  var handleBody = function handleBody(input, index) {\n    var newBody = body;\n    newBody[index].text = input;\n    setBody(_toConsumableArray(newBody));\n  };\n\n  var newBody = function newBody() {\n    var newBody = body;\n    newBody.push(_objectSpread({}, intialPreview));\n    setBody(_toConsumableArray(newBody));\n  };\n\n  var handleImage = function handleImage(input, index) {\n    var newBody = body;\n    console.log(newBody[index]);\n    newBody[index].src = input;\n    setBody(_toConsumableArray(newBody));\n  };\n\n  var newImgEl = function newImgEl() {\n    var newBody = body;\n    newBody.push(_objectSpread({}, initialImg));\n    setBody(_toConsumableArray(newBody));\n  };\n\n  var handleInput = function handleInput(e, section) {\n    var input = e.target.value;\n\n    switch (section.El) {\n      case 'title':\n        setTitle(_objectSpread({}, title, {\n          text: input\n        }));\n        break;\n\n      case 'jumbotron':\n        setJumbotron(_objectSpread({}, jumbotron, {\n          src: input\n        }));\n        break;\n\n      case 'body':\n        handleBody(input, section.index);\n        break;\n\n      case 'image':\n        handleImage(input, section.index);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  var handleArticle = function handleArticle() {\n    var section = {\n      sectionMode: sectionMode,\n      title: title,\n      jumbotron: jumbotron,\n      body: body\n    };\n    handleSubmit(section);\n  };\n\n  var handleFont = function handleFont(newFont) {\n    switch (sectionMode.el) {\n      case 'title':\n        setTitle(_objectSpread({}, title, {\n          font: newFont\n        }));\n        break;\n\n      case 'body':\n        var _newBody = body;\n        _newBody[sectionMode.index].font = newFont;\n        setBody(_toConsumableArray(_newBody));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  var handleStyling = function handleStyling(style) {\n    switch (sectionMode.el) {\n      case 'title':\n        setTitle(_objectSpread({}, title, _defineProperty({}, style, !title[style])));\n        break;\n\n      case 'body':\n        var _newBody2 = body;\n        _newBody2[sectionMode.index][style] = !_newBody2[sectionMode.index][style];\n        setBody(_toConsumableArray(_newBody2));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  var handleJumboJustify = function handleJumboJustify(justification) {\n    switch (justification) {\n      case 'left':\n        setJumbotron(_objectSpread({}, jumbotron, {\n          justify: 'flex-start'\n        }));\n        break;\n\n      case 'center':\n        setJumbotron(_objectSpread({}, jumbotron, {\n          justify: 'center'\n        }));\n        break;\n\n      default:\n        setJumbotron(_objectSpread({}, jumbotron, {\n          justify: 'flex-end'\n        }));\n        break;\n    }\n  };\n\n  var handleImageJustify = function handleImageJustify(justification) {\n    var newBody = body;\n\n    switch (justification) {\n      case 'left':\n        newBody[sectionMode.index].justify = 'flex-start';\n        setBody(_toConsumableArray(newBody));\n        break;\n\n      case 'center':\n        newBody[sectionMode.index].justify = 'center';\n        setBody(_toConsumableArray(newBody));\n        break;\n\n      default:\n        newBody[sectionMode.index].justify = 'flex-end';\n        setBody(_toConsumableArray(newBody));\n        break;\n    }\n  };\n\n  var handleJustify = function handleJustify(justification) {\n    switch (sectionMode.el) {\n      case 'title':\n        setTitle(_objectSpread({}, title, {\n          justify: justification\n        }));\n        break;\n\n      case 'jumbotron':\n        handleJumboJustify(justification);\n        break;\n\n      case 'body':\n        var _newBody3 = body;\n        _newBody3[sectionMode.index].justify = justification;\n        setBody(_toConsumableArray(_newBody3));\n        break;\n\n      case 'image':\n        handleImageJustify(justification);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  var handleTextStyle = function handleTextStyle(style) {\n    switch (sectionMode.el) {\n      case 'title':\n        setTitle(_objectSpread({}, title, {\n          textStyle: style\n        }));\n        break;\n\n      case 'body':\n        var _newBody4 = body;\n        _newBody4[sectionMode.index].textStyle = style;\n        setBody(_toConsumableArray(_newBody4));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  var handleMarginTop = function handleMarginTop(e) {\n    switch (sectionMode.el) {\n      case 'title':\n        setTitle(_objectSpread({}, title, {\n          marginTop: e.target.value\n        }));\n        break;\n\n      case 'body':\n        var _newBody5 = body;\n        _newBody5[sectionMode.index].marginTop = e.target.value;\n        setBody(_toConsumableArray(_newBody5));\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  var handleMarginBottom = function handleMarginBottom(e) {\n    switch (sectionMode.el) {\n      case 'title':\n        setTitle(_objectSpread({}, title, {\n          marginBottom: e.target.value\n        }));\n        break;\n\n      case 'body':\n        var _newBody6 = body;\n        _newBody6[sectionMode.index].marginBottom = e.target.value;\n        setBody(_toConsumableArray(_newBody6));\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  return React.createElement(EditorContext.Provider, {\n    value: {\n      handleInput: handleInput,\n      title: title,\n      jumbotron: jumbotron,\n      currentBody: currentBody,\n      body: body,\n      handleStyling: handleStyling,\n      handleFont: handleFont,\n      handleJustify: handleJustify,\n      handleTextStyle: handleTextStyle,\n      handleMarginTop: handleMarginTop,\n      handleMarginBottom: handleMarginBottom,\n      handleArticle: handleArticle,\n      editMode: editMode,\n      editArticle: editArticle,\n      editBodyEl: editBodyEl,\n      newBodyEl: newBodyEl,\n      handleMode: handleMode,\n      articleList: articleList,\n      sectionMode: sectionMode,\n      handleSectionMode: handleSectionMode,\n      newBody: newBody,\n      newImgEl: newImgEl\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294\n    },\n    __self: this\n  }, props.children);\n};","map":{"version":3,"sources":["/Users/God/Desktop/github/mtndream/MtnDream/client/src/Context/EditorContext.js"],"names":["React","useState","createContext","useEffect","EditorContext","intialPreview","text","bold","italic","underline","color","highlight","font","justify","textStyle","marginTop","marginBottom","isText","isImage","initialImg","src","alt","height","width","EditorProvider","props","editMode","setEditMode","articleList","setArticleList","el","sectionMode","setSectionMode","title","setTitle","jumbotron","setJumbotron","currentBody","setCurrentBody","body","setBody","fetch","then","res","json","result","catch","error","handleMode","editArticle","index","editBodyEl","newBodyEl","newBody","push","length","handleSectionMode","newSection","handleSubmit","data","method","JSON","stringify","headers","handleBody","input","handleImage","console","log","newImgEl","handleInput","e","section","target","value","El","handleArticle","handleFont","newFont","handleStyling","style","handleJumboJustify","justification","handleImageJustify","handleJustify","handleTextStyle","handleMarginTop","handleMarginBottom","children"],"mappings":"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","sourcesContent":["import React, { useState, createContext, useEffect } from 'react';\n\nexport const EditorContext = createContext();\n\nconst intialPreview = {\n    text: '',\n    bold: false,\n    italic: false,\n    underline: false,\n    color: 'black',\n    highlight: false,\n    font: 'Roboto',\n    justify: 'left',\n    textStyle: 'body1',\n    marginTop: 40,\n    marginBottom: 0,\n    isText: true,\n    isImage: false,\n};\n\nconst initialImg = {\n    isImage: true,\n    src: '',\n    alt: '',\n    height: '',\n    width: '',\n    justify: 'left',\n    marginTop: 40,\n    marginBottom: 0,\n};\n\nexport const EditorProvider = (props) => {\n\n    const [editMode, setEditMode] = useState(false);\n    const [articleList, setArticleList] = useState([]);\n\n    const [sectionMode, setSectionMode] = useState({ el: 'title' });\n    const [title, setTitle] = useState({ ...intialPreview });\n    const [jumbotron, setJumbotron] = useState({ ...initialImg });\n    const [currentBody, setCurrentBody] = useState(0);\n    const [body, setBody] = useState([ { ...intialPreview } ]);\n    \n    useEffect(() => {\n        fetch('/api/editors/getList')\n            .then(res => res.json())\n            .then((result) => {\n                setArticleList(result)\n            })\n            .catch((error) => {});\n    }, [] );\n\n    const handleMode = () => {\n        setEditMode(!editMode);\n    };\n\n    const editArticle = index => {\n        setTitle(articleList[index].title);\n        setJumbotron(articleList[index].jumbotron);\n        setBody(articleList[index].body);\n        setEditMode(!editMode);\n    };\n\n    const editBodyEl = index => {\n        setCurrentBody(index);\n    };\n\n    const newBodyEl = () => {\n        const newBody = body;\n        newBody.push({ ...intialPreview });\n\n        setCurrentBody( newBody.length - 1 );\n        setBody([ ...newBody ]);\n    };\n\n    const handleSectionMode = (newSection) => {\n        switch (newSection.el) {\n            case 'title':\n                setSectionMode(newSection);\n                break;\n            case 'jumbotron':\n                setSectionMode(newSection);\n                break;\n            case 'body':\n                editBodyEl(newSection.index);\n                setSectionMode(newSection);\n                break;\n            case 'image':\n                setSectionMode(newSection);\n                break;\n            default:\n                return\n        }\n    };\n\n    const handleSubmit = data => {\n        fetch('/api/editors/newSection',{\n            method: 'POST',\n            body: JSON.stringify(data),\n            headers: {'Content-Type': 'application/json'},\n        })\n            .then(res => res.json())\n            .then((result) => {\n                setTitle(result.title);\n                setJumbotron(result.jumbotron);\n                setBody(result.body);\n            })\n            .catch(error => {})\n    };\n\n    const handleBody = ( input, index ) => {\n        let newBody = body;\n        newBody[index].text = input;\n        setBody([ ...newBody ]);\n    };\n\n    const newBody = () => {\n        let newBody = body;\n        newBody.push({ ...intialPreview });\n        setBody([ ...newBody ])\n    };\n\n    const handleImage = (input, index) => {\n        let newBody = body;\n        console.log(newBody[index]);\n        newBody[index].src = input;\n        setBody([ ...newBody ]);\n    };\n\n    const newImgEl = () => {\n        const newBody = body;\n        newBody.push({ ...initialImg });\n        setBody([ ...newBody ]);\n    };\n\n    const handleInput = ( e, section ) => {\n        let input = e.target.value;\n        switch (section.El) {\n            case 'title':\n                setTitle({ ...title, text: input });\n                break;\n            case 'jumbotron':\n                setJumbotron({ ...jumbotron, src: input });\n                break;\n            case 'body':\n                handleBody(input, section.index);\n                break;\n            case 'image':\n                handleImage(input, section.index);\n                break;\n            default:\n                return\n        }\n    };\n\n    const handleArticle = () => {\n        let section = {\n            sectionMode: sectionMode,\n            title: title,\n            jumbotron: jumbotron,\n            body: body,\n        };\n        handleSubmit(section);\n    };\n\n    const handleFont = ( newFont ) => {\n        switch (sectionMode.el) {\n            case 'title':\n                setTitle({ ...title, font: newFont });\n                break;\n            case 'body':\n                let newBody = body;\n                newBody[sectionMode.index].font = newFont;\n                setBody([ ...newBody ]);\n                break;\n            default:\n                break;\n        }\n    };\n\n    const handleStyling = (style) => {\n        switch (sectionMode.el) {\n            case 'title':\n                setTitle({ ...title, [style]: !title[style] });\n                break;\n            case 'body':\n                let newBody = body;\n                newBody[sectionMode.index][style] = !newBody[sectionMode.index][style];    \n                setBody([ ...newBody ]);   \n                break;\n            default:\n                break;\n        }\n    };\n\n    const handleJumboJustify = (justification) => {\n        switch (justification) {\n            case 'left':\n                setJumbotron({ ...jumbotron, justify: 'flex-start' });\n                break;\n            case 'center':\n                setJumbotron({ ...jumbotron, justify: 'center' });\n                break;\n            default:\n                setJumbotron({ ...jumbotron, justify: 'flex-end' });\n                break;\n            }\n    };\n\n    const handleImageJustify = (justification) => {\n        let newBody = body;\n        switch (justification) {\n            case 'left':\n                newBody[sectionMode.index].justify = 'flex-start';\n                setBody([ ...newBody ]);\n                break;\n            case 'center':\n                newBody[sectionMode.index].justify = 'center';\n                setBody([ ...newBody ]);\n                break;\n            default:\n                newBody[sectionMode.index].justify = 'flex-end';\n                setBody([ ...newBody ]);\n                break;\n            }\n    };\n\n    const handleJustify = (justification) => {\n        switch (sectionMode.el) {\n            case 'title':\n                setTitle({ ...title, justify: justification });\n                break;\n            case 'jumbotron':\n                handleJumboJustify(justification);\n                break;\n            case 'body':\n                let newBody = body;\n                newBody[sectionMode.index].justify = justification;    \n                setBody([ ...newBody ]);\n                break;\n            case 'image':\n                handleImageJustify(justification);\n                break;\n            default:\n                break;\n        }\n    };\n\n    const handleTextStyle = (style) => {\n        switch (sectionMode.el) {\n            case 'title':\n                setTitle({ ...title, textStyle: style });\n                break;\n            case 'body':\n                let newBody = body;\n                newBody[sectionMode.index].textStyle = style;    \n                setBody([ ...newBody ]);\n                break;\n            default:\n                break;\n        }\n    };\n\n    const handleMarginTop = (e) => {\n        switch (sectionMode.el) {\n            case 'title':\n                setTitle({ ...title, marginTop: e.target.value });\n                break;\n            case 'body':\n                let newBody = body;\n                newBody[sectionMode.index].marginTop = e.target.value;\n                setBody([ ...newBody ]);\n                break;\n            default:\n                return\n        }\n    };\n\n    const handleMarginBottom = (e) => {\n        switch (sectionMode.el) {\n            case 'title':\n                setTitle({ ...title, marginBottom: e.target.value });\n                break;\n            case 'body':\n                let newBody = body;\n                newBody[sectionMode.index].marginBottom = e.target.value;\n                setBody([ ...newBody ]);\n                break;\n            default:\n                return\n        }\n    };\n\n    return (\n        <EditorContext.Provider\n            value={{\n                handleInput,\n                title,\n                jumbotron,\n                currentBody,\n                body,\n                handleStyling,\n                handleFont,\n                handleJustify,\n                handleTextStyle,\n                handleMarginTop,\n                handleMarginBottom,\n                handleArticle,\n                editMode,\n                editArticle,\n                editBodyEl,\n                newBodyEl,\n                handleMode,\n                articleList,\n                sectionMode,\n                handleSectionMode,\n                newBody,\n                newImgEl,\n            }}\n        >\n\n            {props.children}\n\n        </EditorContext.Provider>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}