{"ast":null,"code":"import _objectSpread from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/God/Desktop/github/mtndream/MtnDream/client/src/Context/MediaQuery.js\";\nimport React, { createContext, useState } from 'react';\nimport { initialNotify } from './Services/EditorServices';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nexport var MediaContext = createContext();\nexport var MediaProvider = function MediaProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(initialNotify),\n      _useState2 = _slicedToArray(_useState, 2),\n      notify = _useState2[0],\n      setNotify = _useState2[1];\n\n  var openNotify = function openNotify(newNotify) {\n    return setNotify(_objectSpread({}, notify, newNotify));\n  };\n\n  var closeNotify = function closeNotify() {\n    return setNotify(initialNotify);\n  };\n\n  var theme = useTheme(); // Variables that will be passed to the consumer children\n  // to apply media queries where CSS cannot.\n\n  var xl = useMediaQuery(theme.breakpoints.up('lg'));\n  var lg = useMediaQuery(theme.breakpoints.down('lg'));\n  var md = useMediaQuery(theme.breakpoints.down('md'));\n  var sm = useMediaQuery(theme.breakpoints.down('sm'));\n  var xs = useMediaQuery(theme.breakpoints.down('xs')); // Function for testing Media Queries. It'll display screen size within console\n  // const getWidth = () => {\n  //     switch(true) {\n  //         case xs:\n  //             return console.log('XS');\n  //         case sm:\n  //             return console.log('SM');\n  //         case md:\n  //             return console.log('MD');\n  //         case lg:\n  //             return console.log('LG');\n  //         default:\n  //             console.log('XL');\n  //     }\n  // };\n  // getWidth();\n\n  return React.createElement(MediaContext.Provider, {\n    value: {\n      xl: xl,\n      lg: lg,\n      md: md,\n      sm: sm,\n      xs: xs,\n      notify: notify,\n      openNotify: openNotify,\n      closeNotify: closeNotify\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, children);\n};","map":{"version":3,"sources":["/Users/God/Desktop/github/mtndream/MtnDream/client/src/Context/MediaQuery.js"],"names":["React","createContext","useState","initialNotify","useTheme","useMediaQuery","MediaContext","MediaProvider","children","notify","setNotify","openNotify","newNotify","closeNotify","theme","xl","breakpoints","up","lg","down","md","sm","xs"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,SAASC,aAAT,QAA8B,2BAA9B;AAEA,OAAOC,QAAP,MAAqB,mCAArB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AAEA,OAAO,IAAMC,YAAY,GAAGL,aAAa,EAAlC;AAEP,OAAO,IAAMM,aAAa,GAAG,SAAhBA,aAAgB,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBAEfN,QAAQ,CAACC,aAAD,CAFO;AAAA;AAAA,MAEpCM,MAFoC;AAAA,MAE5BC,SAF4B;;AAI3C,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,SAAD;AAAA,WAAeF,SAAS,mBAAMD,MAAN,EAAiBG,SAAjB,EAAxB;AAAA,GAAnB;;AACA,MAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA,WAAMH,SAAS,CAACP,aAAD,CAAf;AAAA,GAApB;;AAEA,MAAMW,KAAK,GAAGV,QAAQ,EAAtB,CAP2C,CAS3C;AACA;;AACA,MAAMW,EAAE,GAAGV,aAAa,CAACS,KAAK,CAACE,WAAN,CAAkBC,EAAlB,CAAqB,IAArB,CAAD,CAAxB;AACA,MAAMC,EAAE,GAAGb,aAAa,CAACS,KAAK,CAACE,WAAN,CAAkBG,IAAlB,CAAuB,IAAvB,CAAD,CAAxB;AACA,MAAMC,EAAE,GAAGf,aAAa,CAACS,KAAK,CAACE,WAAN,CAAkBG,IAAlB,CAAuB,IAAvB,CAAD,CAAxB;AACA,MAAME,EAAE,GAAGhB,aAAa,CAACS,KAAK,CAACE,WAAN,CAAkBG,IAAlB,CAAuB,IAAvB,CAAD,CAAxB;AACA,MAAMG,EAAE,GAAGjB,aAAa,CAACS,KAAK,CAACE,WAAN,CAAkBG,IAAlB,CAAuB,IAAvB,CAAD,CAAxB,CAf2C,CAiB3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,SACI,oBAAC,YAAD,CAAc,QAAd;AACI,IAAA,KAAK,EAAE;AACHJ,MAAAA,EAAE,EAAFA,EADG;AAEHG,MAAAA,EAAE,EAAFA,EAFG;AAGHE,MAAAA,EAAE,EAAFA,EAHG;AAIHC,MAAAA,EAAE,EAAFA,EAJG;AAKHC,MAAAA,EAAE,EAAFA,EALG;AAMHb,MAAAA,MAAM,EAANA,MANG;AAOHE,MAAAA,UAAU,EAAVA,UAPG;AAQHE,MAAAA,WAAW,EAAXA;AARG,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYML,QAZN,CADJ;AAgBH,CAnDM","sourcesContent":["import React, { createContext, useState } from 'react';\nimport { initialNotify } from './Services/EditorServices';\n\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\n\nexport const MediaContext = createContext();\n\nexport const MediaProvider = ({ children }) => {\n\n    const [notify, setNotify] = useState(initialNotify);\n\n    const openNotify = (newNotify) => setNotify({ ...notify, ...newNotify });\n    const closeNotify = () => setNotify(initialNotify);\n\n    const theme = useTheme();\n\n    // Variables that will be passed to the consumer children\n    // to apply media queries where CSS cannot.\n    const xl = useMediaQuery(theme.breakpoints.up('lg'))\n    const lg = useMediaQuery(theme.breakpoints.down('lg'));\n    const md = useMediaQuery(theme.breakpoints.down('md'));\n    const sm = useMediaQuery(theme.breakpoints.down('sm'));\n    const xs = useMediaQuery(theme.breakpoints.down('xs'));\n\n    // Function for testing Media Queries. It'll display screen size within console\n    // const getWidth = () => {\n    //     switch(true) {\n    //         case xs:\n    //             return console.log('XS');\n    //         case sm:\n    //             return console.log('SM');\n    //         case md:\n    //             return console.log('MD');\n    //         case lg:\n    //             return console.log('LG');\n    //         default:\n    //             console.log('XL');\n    //     }\n    // };\n\n    // getWidth();\n\n    return (\n        <MediaContext.Provider\n            value={{\n                xl,\n                lg,\n                md,\n                sm,\n                xs,\n                notify,\n                openNotify,\n                closeNotify,\n            }}\n        >\n            { children }\n        </MediaContext.Provider>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}