{"ast":null,"code":"import _objectSpread from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Login/Login.js\";\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport { Paper, Typography, TextField, Button, Icon, Snackbar, SnackbarContent } from '@material-ui/core';\nvar signupInit = {\n  username: '',\n  email: '',\n  password: ''\n};\nvar loginInit = {\n  email: '',\n  password: ''\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    paper: {\n      width: '60%',\n      padding: 40,\n      position: 'fixed',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      flexWrap: 'wrap'\n    },\n    inputs: {\n      width: '100%',\n      marginTop: 20\n    },\n    submit: {\n      width: '100%',\n      padding: 10,\n      marginTop: 20,\n      color: 'rgb(255, 255, 255)'\n    },\n    loginSignup: {\n      width: '100%',\n      padding: 10,\n      marginTop: 20\n    },\n    error: {\n      backgroundColor: theme.palette.error.dark\n    },\n    success: {\n      backgroundColor: green[600]\n    },\n    message: {\n      display: 'flex',\n      alignItems: 'center'\n    }\n  };\n});\n\nvar Login = function Login(props) {\n  var classes = useStyles();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      signup = _useState2[0],\n      setSignup = _useState2[1];\n\n  var _useState3 = useState(_objectSpread({}, signupInit)),\n      _useState4 = _slicedToArray(_useState3, 2),\n      signupInfo = _useState4[0],\n      setSignupInfo = _useState4[1];\n\n  var _useState5 = useState(_objectSpread({}, loginInit)),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loginInfo = _useState6[0],\n      setLoginInfo = _useState6[1];\n\n  var _useState7 = useState({\n    open: false,\n    message: ''\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      success = _useState8[0],\n      setSuccess = _useState8[1];\n\n  var _useState9 = useState({\n    open: false,\n    message: ''\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      error = _useState10[0],\n      setError = _useState10[1];\n\n  var closeError = function closeError() {\n    setError({\n      open: false,\n      message: ''\n    });\n  };\n\n  var closeSuccess = function closeSuccess() {\n    setSuccess({\n      open: false,\n      message: 'Article Saved!'\n    });\n  };\n\n  var handleSubmit = function handleSubmit() {\n    if (signup) {\n      fetch('/api/users/signup', {\n        method: 'POST',\n        body: JSON.stringify(signupInfo),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(function (res) {\n        return res.json();\n      }).then(function (result) {\n        if (result.error) {\n          return setError({\n            open: true,\n            message: result.message\n          });\n        }\n\n        setSuccess({\n          open: true,\n          message: 'Sign up successful!'\n        });\n        setSignupInfo(_objectSpread({}, signupInit));\n        return setSignup(!signup);\n      }).catch(function (error) {\n        setError({\n          open: true,\n          message: error\n        });\n      });\n    } else {\n      fetch('/api/users/login', {\n        method: 'POST',\n        body: JSON.stringify(loginInfo),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(function (res) {\n        return res.json();\n      }).then(function (result) {\n        if (result.error) {\n          return setError({\n            open: true,\n            message: result.message\n          });\n        }\n\n        return props.close();\n      }).catch(function (error) {\n        setError({\n          open: true,\n          message: error\n        });\n      });\n    }\n  };\n\n  if (signup) {\n    return React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Sign Up\"), React.createElement(TextField, {\n      className: classes.inputs,\n      variant: \"outlined\",\n      label: \"Username\",\n      value: signupInfo.username,\n      onChange: function onChange(e) {\n        return setSignupInfo(_objectSpread({}, signupInfo, {\n          username: e.target.value\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      className: classes.inputs,\n      variant: \"outlined\",\n      label: \"Email\",\n      type: \"email\",\n      value: signupInfo.email,\n      onChange: function onChange(e) {\n        return setSignupInfo(_objectSpread({}, signupInfo, {\n          email: e.target.value\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      className: classes.inputs,\n      variant: \"outlined\",\n      label: \"Password\",\n      type: \"password\",\n      value: signupInfo.password,\n      onChange: function onChange(e) {\n        return setSignupInfo(_objectSpread({}, signupInfo, {\n          password: e.target.value\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(Button, {\n      className: classes.submit,\n      onClick: handleSubmit,\n      variant: \"contained\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Submit\")), React.createElement(Button, {\n      className: classes.loginSignup,\n      onClick: function onClick() {\n        return setSignup(!signup);\n      },\n      variant: \"contained\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"body1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Already Signed Up?\")), React.createElement(Snackbar, {\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'center'\n      },\n      open: success.open,\n      autoHideDuration: 6000,\n      onClose: closeSuccess,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(SnackbarContent, {\n      className: classes.success,\n      message: React.createElement(Typography, {\n        className: classes.message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        style: {\n          marginRight: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, \"error\"), success.message),\n      action: React.createElement(Button, {\n        onClick: closeSuccess,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, \"close\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    })), React.createElement(Snackbar, {\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'center'\n      },\n      open: error.open,\n      autoHideDuration: 6000,\n      onClose: closeError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(SnackbarContent, {\n      className: classes.error,\n      message: React.createElement(Typography, {\n        className: classes.message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        style: {\n          marginRight: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, \"error\"), error.message),\n      action: React.createElement(Button, {\n        onClick: closeError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, \"close\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    })));\n  } else {\n    return React.createElement(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"Login\"), React.createElement(TextField, {\n      className: classes.inputs,\n      variant: \"outlined\",\n      label: \"Email\",\n      type: \"email\",\n      value: loginInfo.email,\n      onChange: function onChange(e) {\n        return setLoginInfo(_objectSpread({}, loginInfo, {\n          email: e.target.value\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      className: classes.inputs,\n      variant: \"outlined\",\n      label: \"Password\",\n      type: \"password\",\n      value: loginInfo.password,\n      onChange: function onChange(e) {\n        return setLoginInfo(_objectSpread({}, loginInfo, {\n          password: e.target.value\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), React.createElement(Button, {\n      className: classes.submit,\n      onClick: handleSubmit,\n      variant: \"contained\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \"Submit\")), React.createElement(Button, {\n      className: classes.loginSignup,\n      onClick: function onClick() {\n        return setSignup(!signup);\n      },\n      variant: \"contained\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"body1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, \"Not Signed Up?\")), React.createElement(Snackbar, {\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'center'\n      },\n      open: success.open,\n      autoHideDuration: 6000,\n      onClose: closeSuccess,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, React.createElement(SnackbarContent, {\n      className: classes.success,\n      message: React.createElement(Typography, {\n        className: classes.message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        style: {\n          marginRight: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, \"error\"), success.message),\n      action: React.createElement(Button, {\n        onClick: closeSuccess,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }, \"close\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    })), React.createElement(Snackbar, {\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'center'\n      },\n      open: error.open,\n      autoHideDuration: 6000,\n      onClose: closeError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(SnackbarContent, {\n      className: classes.error,\n      message: React.createElement(Typography, {\n        className: classes.message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        style: {\n          marginRight: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, \"error\"), error.message),\n      action: React.createElement(Button, {\n        onClick: closeError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }, \"close\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    })));\n  }\n};\n\nexport default Login;","map":{"version":3,"sources":["/Users/God/Desktop/github/mtndream/MtnDream/client/src/components/Login/Login.js"],"names":["React","useState","makeStyles","green","Paper","Typography","TextField","Button","Icon","Snackbar","SnackbarContent","signupInit","username","email","password","loginInit","useStyles","theme","paper","width","padding","position","top","left","transform","display","justifyContent","alignItems","flexWrap","inputs","marginTop","submit","color","loginSignup","error","backgroundColor","palette","dark","success","message","Login","props","classes","signup","setSignup","signupInfo","setSignupInfo","loginInfo","setLoginInfo","open","setSuccess","setError","closeError","closeSuccess","handleSubmit","fetch","method","body","JSON","stringify","headers","then","res","json","result","catch","close","e","target","value","vertical","horizontal","marginRight"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\n\nimport { Paper, Typography, TextField, Button, Icon, Snackbar, SnackbarContent } from '@material-ui/core';\n\nconst signupInit = {\n    username: '',\n    email: '',\n    password: '',\n};\n\nconst loginInit = {\n    email: '',\n    password: '',\n};\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        width: '60%',\n        padding: 40,\n        position: 'fixed',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexWrap: 'wrap',\n    },\n    inputs: {\n        width: '100%',\n        marginTop: 20,\n    },\n    submit: {\n        width: '100%',\n        padding: 10,\n        marginTop: 20,\n        color: 'rgb(255, 255, 255)',\n    },\n    loginSignup: {\n        width: '100%',\n        padding: 10,\n        marginTop: 20,\n    },\n    error: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    success: {\n        backgroundColor: green[600],\n    },\n    message: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n}));\n\nconst Login = (props) => {\n\n    const classes = useStyles();\n\n    const [signup, setSignup] = useState(false);\n    const [signupInfo, setSignupInfo] = useState({ ...signupInit });\n    const [loginInfo, setLoginInfo] = useState({ ...loginInit });\n\n    const [success, setSuccess] = useState({\n        open: false,\n        message: '',\n    });\n    const [error, setError] = useState({\n        open: false,\n        message: '',\n    });\n\n    const closeError = () => { setError({ open: false, message: '' }); };\n    const closeSuccess = () => { setSuccess({ open: false, message: 'Article Saved!' }); };\n\n    const handleSubmit = () => {\n        if (signup) {\n            fetch('/api/users/signup', {\n                method: 'POST',\n                body: JSON.stringify(signupInfo),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then(res => res.json())\n                .then((result) => {\n                    if (result.error) { return setError({ open: true, message: result.message }); }\n                    setSuccess({ open: true, message: 'Sign up successful!' });\n                    setSignupInfo({ ...signupInit });\n                    return setSignup(!signup);\n                })\n                .catch((error) => { setError({ open: true, message: error }); });\n        } else {\n            fetch('/api/users/login', {\n                method: 'POST',\n                body: JSON.stringify(loginInfo),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then(res => res.json())\n                .then((result) => {\n                    if (result.error) {\n                        return setError({ open: true, message: result.message });\n                    }\n                    return props.close();\n                })\n                .catch((error) => {\n                    setError({ open: true, message: error });\n                });\n        }\n    };\n\n    if (signup) {\n        return (\n            <Paper className={classes.paper}>\n    \n                <Typography variant=\"h2\">\n                    Sign Up\n                </Typography>\n    \n                <TextField\n                    className={classes.inputs}\n                    variant=\"outlined\"\n                    label=\"Username\"\n                    value={signupInfo.username}\n                    onChange={(e) => setSignupInfo({ ...signupInfo, username: e.target.value })}\n                />\n    \n                <TextField\n                    className={classes.inputs}\n                    variant=\"outlined\"\n                    label=\"Email\"\n                    type=\"email\"\n                    value={signupInfo.email}\n                    onChange={(e) => setSignupInfo({ ...signupInfo, email: e.target.value })}\n                />\n    \n                <TextField\n                    className={classes.inputs}\n                    variant=\"outlined\"\n                    label=\"Password\"\n                    type=\"password\"\n                    value={signupInfo.password}\n                    onChange={(e) => setSignupInfo({ ...signupInfo, password: e.target.value })}\n                />\n    \n                <Button\n                    className={classes.submit}\n                    onClick={handleSubmit}\n                    variant=\"contained\"\n                >\n                    <Typography variant=\"h6\">\n                        Submit\n                    </Typography>\n                </Button>\n    \n                <Button\n                    className={classes.loginSignup}\n                    onClick={() => setSignup(!signup)}\n                    variant=\"contained\"\n                >\n                    <Typography variant=\"body1\">\n                        Already Signed Up?\n                    </Typography>\n                </Button>\n\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: 'top',\n                        horizontal: 'center',\n                    }}\n                    open={success.open}\n                    autoHideDuration={6000}\n                    onClose={closeSuccess}\n                >\n                    <SnackbarContent\n                        className={classes.success}\n                        message={\n                            <Typography className={classes.message}>\n\n                                <Icon style={{ marginRight: 10 }}>\n                                    error\n                                </Icon>\n\n                                {success.message}\n\n                            </Typography>\n                        }\n                        action={\n                            <Button onClick={closeSuccess}>\n                                <Icon>close</Icon>\n                            </Button>\n                        }\n                    />\n                </Snackbar>\n\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: 'top',\n                        horizontal: 'center',\n                    }}\n                    open={error.open}\n                    autoHideDuration={6000}\n                    onClose={closeError}\n                >\n                    <SnackbarContent\n                        className={classes.error}\n                        message={\n                            <Typography className={classes.message}>\n\n                                <Icon style={{ marginRight: 10 }}>\n                                    error\n                                </Icon>\n\n                                {error.message}\n\n                            </Typography>\n                        }\n                        action={\n                            <Button onClick={closeError}>\n                                <Icon>close</Icon>\n                            </Button>\n                        }\n                    />\n                </Snackbar>\n            \n            </Paper>\n        );    \n    } else {\n        return (\n            <Paper className={classes.paper}>\n    \n                <Typography variant=\"h2\">\n                    Login\n                </Typography>\n    \n                <TextField\n                    className={classes.inputs}\n                    variant=\"outlined\"\n                    label=\"Email\"\n                    type=\"email\"\n                    value={loginInfo.email}\n                    onChange={(e) => setLoginInfo({ ...loginInfo, email: e.target.value })}\n                />\n    \n                <TextField\n                    className={classes.inputs}\n                    variant=\"outlined\"\n                    label=\"Password\"\n                    type=\"password\"\n                    value={loginInfo.password}\n                    onChange={(e) => setLoginInfo({ ...loginInfo, password: e.target.value })}\n                />\n    \n                <Button\n                    className={classes.submit}\n                    onClick={handleSubmit}\n                    variant=\"contained\"\n                >\n                    <Typography variant=\"h6\">\n                        Submit\n                    </Typography>\n                </Button>\n    \n                <Button\n                    className={classes.loginSignup}\n                    onClick={() => setSignup(!signup)}\n                    variant=\"contained\"\n                >\n                    <Typography variant=\"body1\">\n                        Not Signed Up?\n                    </Typography>\n                </Button>\n\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: 'top',\n                        horizontal: 'center',\n                    }}\n                    open={success.open}\n                    autoHideDuration={6000}\n                    onClose={closeSuccess}\n                >\n                    <SnackbarContent\n                        className={classes.success}\n                        message={\n                            <Typography className={classes.message}>\n\n                                <Icon style={{ marginRight: 10 }}>\n                                    error\n                                </Icon>\n\n                                {success.message}\n\n                            </Typography>\n                        }\n                        action={\n                            <Button onClick={closeSuccess}>\n                                <Icon>close</Icon>\n                            </Button>\n                        }\n                    />\n                </Snackbar>\n\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: 'top',\n                        horizontal: 'center',\n                    }}\n                    open={error.open}\n                    autoHideDuration={6000}\n                    onClose={closeError}\n                >\n                    <SnackbarContent\n                        className={classes.error}\n                        message={\n                            <Typography className={classes.message}>\n\n                                <Icon style={{ marginRight: 10 }}>\n                                    error\n                                </Icon>\n\n                                {error.message}\n\n                            </Typography>\n                        }\n                        action={\n                            <Button onClick={closeError}>\n                                <Icon>close</Icon>\n                            </Button>\n                        }\n                    />\n                </Snackbar>\n            \n            </Paper>\n        );\n    }\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}