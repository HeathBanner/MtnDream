{"ast":null,"code":"import _toConsumableArray from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/God/Desktop/github/mtndream/MtnDream/client/src/Context/EditorContext.js\";\nimport React, { useState, createContext, useEffect } from 'react';\nimport { initialPreview, initialImg, initialArticle, initialNotify } from './Services/EditorServices';\nexport var EditorContext = createContext();\nexport var EditorProvider = function EditorProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      editMode = _useState2[0],\n      setEditMode = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      articleList = _useState4[0],\n      setArticleList = _useState4[1];\n\n  var _useState5 = useState(initialArticle),\n      _useState6 = _slicedToArray(_useState5, 2),\n      article = _useState6[0],\n      setArticle = _useState6[1];\n\n  var _useState7 = useState(initialNotify),\n      _useState8 = _slicedToArray(_useState7, 2),\n      notify = _useState8[0],\n      setNotify = _useState8[1]; // Once component mounts it will fetch a list of the\n  // top ten most recent articles\n\n\n  useEffect(function () {\n    handleList();\n  }, []);\n\n  var handleList =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _ref3, handleFetchList, result;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return import(\"./Services/EditorServices\");\n\n            case 2:\n              _ref3 = _context.sent;\n              handleFetchList = _ref3.handleFetchList;\n              _context.next = 6;\n              return handleFetchList();\n\n            case 6:\n              result = _context.sent;\n              setArticleList(result);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleList() {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // Function toggles edit mode on or off\n\n\n  var handleMode = function handleMode() {\n    return setEditMode(!editMode);\n  };\n\n  var openNotify = function openNotify(newNotify) {\n    return setNotify(_objectSpread({}, notify, newNotify));\n  };\n\n  var closeNotify = function closeNotify() {\n    return setNotify(initialNotify);\n  }; // Once the user clicks on the article they wish to edit, it will then\n  // grab the article elements and set them to state.\n\n\n  var editArticle =\n  /*#__PURE__*/\n  function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(title) {\n      var _ref5, fetchEditArticle, result;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(title === 'new')) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              _context2.next = 4;\n              return import(\"./Services/EditorServices\");\n\n            case 4:\n              _ref5 = _context2.sent;\n              fetchEditArticle = _ref5.fetchEditArticle;\n              _context2.next = 8;\n              return fetchEditArticle(title);\n\n            case 8:\n              result = _context2.sent;\n              setArticle(_objectSpread({}, article, result));\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function editArticle(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }(); // Once the user clicks on any element. The \"section mode\" will\n  // switch to the appropriate state to handle further edits within the element\n\n\n  var handleSectionMode = function handleSectionMode(newSection) {\n    console.log(newSection);\n    setArticle(_objectSpread({}, article, {\n      sectionMode: _objectSpread({}, newSection)\n    }));\n  }; // This function will set the Title state to published if the article\n  // was successfully stored within the database\n\n\n  var setPublished = function setPublished() {\n    setArticle(_objectSpread({}, article, {\n      title: _objectSpread({}, article.title, {\n        isPublished: true\n      })\n    }));\n  }; // This function will create a new body element within the state\n\n\n  var handleNewBody = function handleNewBody() {\n    var newBody = article.body;\n    newBody.push(initialPreview);\n    setArticle(_objectSpread({}, article, {\n      body: newBody\n    }));\n  }; // This function will create a new Image element within the\n  // Body and update the state\n\n\n  var newImgEl = function newImgEl() {\n    var newBody = article.body;\n    newBody.push(_objectSpread({}, initialImg));\n    setArticle(_objectSpread({}, article, {\n      body: newBody\n    }));\n  };\n\n  var handleImage = function handleImage(value, section) {\n    if (!value) return;\n    var newBody = article.body;\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      var result;\n      var parsed = e.target.result.split(\"base64,\");\n\n      if (section.El === 'image') {\n        newBody[section.index].src = parsed[1];\n        console.log('HIT');\n        result = _objectSpread({}, article, {\n          body: newBody\n        });\n      } else {\n        result = _objectSpread({}, article, {\n          jumbotron: _objectSpread({}, article.jumbotron, {\n            src: parsed[1]\n          })\n        });\n      }\n\n      setArticle(result);\n    };\n\n    reader.readAsDataURL(value);\n  }; // This function will check which section the user has selected and\n  // update the state with the new input\n\n\n  var handleInput =\n  /*#__PURE__*/\n  function () {\n    var _ref6 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(value, section) {\n      var _ref7, handleInputSwitch, result;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return import(\"./Services/EditorServices\");\n\n            case 2:\n              _ref7 = _context3.sent;\n              handleInputSwitch = _ref7.handleInputSwitch;\n              _context3.next = 6;\n              return handleInputSwitch(value, section, article);\n\n            case 6:\n              result = _context3.sent;\n              if (result) setArticle(result);\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function handleInput(_x2, _x3) {\n      return _ref6.apply(this, arguments);\n    };\n  }(); // This function will check which section the user is in and\n  // change the font value to the selected font\n\n\n  var handleFont =\n  /*#__PURE__*/\n  function () {\n    var _ref8 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4(newFont) {\n      var _ref9, handleFontSwitch, result;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return import(\"./Services/EditorServices\");\n\n            case 2:\n              _ref9 = _context4.sent;\n              handleFontSwitch = _ref9.handleFontSwitch;\n              result = handleFontSwitch(newFont, article);\n              setArticle(result);\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function handleFont(_x4) {\n      return _ref8.apply(this, arguments);\n    };\n  }(); // This function will check with section the user is in\n  // and update the value with the new selected value\n\n\n  var handleStyling =\n  /*#__PURE__*/\n  function () {\n    var _ref10 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5(style) {\n      var _ref11, handleStylingSwitch, result;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return import(\"./Services/EditorServices\");\n\n            case 2:\n              _ref11 = _context5.sent;\n              handleStylingSwitch = _ref11.handleStylingSwitch;\n              result = handleStylingSwitch(style, article);\n              setArticle(result);\n\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function handleStyling(_x5) {\n      return _ref10.apply(this, arguments);\n    };\n  }(); // This function will check with section the user is in\n  // and update the value with the new selected value\n\n\n  var handleJustify =\n  /*#__PURE__*/\n  function () {\n    var _ref12 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6(justification) {\n      var _ref13, handleJustifySwitch, result;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return import(\"./Services/EditorServices\");\n\n            case 2:\n              _ref13 = _context6.sent;\n              handleJustifySwitch = _ref13.handleJustifySwitch;\n              result = handleJustifySwitch(justification, article);\n              setArticle(result);\n\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function handleJustify(_x6) {\n      return _ref12.apply(this, arguments);\n    };\n  }(); // This function will check with section the user is in\n  // and update the value with the new selected value\n\n\n  var handleTextStyle =\n  /*#__PURE__*/\n  function () {\n    var _ref14 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee7(style) {\n      var _ref15, handleTextStyleSwitch, result;\n\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return import(\"./Services/EditorServices\");\n\n            case 2:\n              _ref15 = _context7.sent;\n              handleTextStyleSwitch = _ref15.handleTextStyleSwitch;\n              result = handleTextStyleSwitch(style, article);\n              setArticle(result);\n\n            case 6:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function handleTextStyle(_x7) {\n      return _ref14.apply(this, arguments);\n    };\n  }(); // This function will check with section the user is in\n  // and update the value with the new selected value\n\n\n  var handleTextColor =\n  /*#__PURE__*/\n  function () {\n    var _ref16 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee8(color) {\n      var _ref17, handleTextColorSwitch, result;\n\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return import(\"./Services/EditorServices\");\n\n            case 2:\n              _ref17 = _context8.sent;\n              handleTextColorSwitch = _ref17.handleTextColorSwitch;\n              result = handleTextColorSwitch(color, article);\n              setArticle(result);\n\n            case 6:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function handleTextColor(_x8) {\n      return _ref16.apply(this, arguments);\n    };\n  }(); // This function will check with section the user is in\n  // and update the value with the new selected value\n\n\n  var handleMarginTop = function handleMarginTop(e) {\n    var _article$sectionMode = article.sectionMode,\n        el = _article$sectionMode.el,\n        index = _article$sectionMode.index;\n\n    if (el === 'title') {\n      return setArticle(_objectSpread({}, article, {\n        title: _objectSpread({}, article.title, {\n          marginTop: e.target.value\n        })\n      }));\n    } else if (el === 'body' || el === 'image') {\n      var newBody = article.body;\n      newBody[index].marginTop = e.target.value;\n      return setArticle(_objectSpread({}, article, {\n        body: _toConsumableArray(newBody)\n      }));\n    }\n  }; // This function will check with section the user is in\n  // and update the value with the new selected value\n\n\n  var handleMarginBottom = function handleMarginBottom(e) {\n    var _article$sectionMode2 = article.sectionMode,\n        el = _article$sectionMode2.el,\n        index = _article$sectionMode2.index;\n\n    if (el === 'title') {\n      return setArticle(_objectSpread({}, article, {\n        title: _objectSpread({}, article.title, {\n          marginBottom: e.target.value\n        })\n      }));\n    } else if (el === 'body' || el === 'image') {\n      var newBody = article.body;\n      newBody[index].marginBottom = e.target.value;\n      return setArticle(_objectSpread({}, article, {\n        body: _toConsumableArray(newBody)\n      }));\n    }\n  }; // All functions and variables listed will be shared with the child consumers\n\n\n  return React.createElement(EditorContext.Provider, {\n    value: _objectSpread({\n      notify: notify,\n      openNotify: openNotify,\n      closeNotify: closeNotify,\n      handleInput: handleInput,\n      handleImage: handleImage,\n      handleStyling: handleStyling,\n      handleFont: handleFont,\n      handleJustify: handleJustify,\n      handleTextStyle: handleTextStyle,\n      handleTextColor: handleTextColor,\n      handleMarginTop: handleMarginTop,\n      handleMarginBottom: handleMarginBottom,\n      handleMode: handleMode,\n      handleSectionMode: handleSectionMode,\n      setPublished: setPublished,\n      articleList: articleList,\n      editMode: editMode,\n      editArticle: editArticle,\n      handleNewBody: handleNewBody,\n      newImgEl: newImgEl\n    }, article),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, children);\n};","map":{"version":3,"sources":["/Users/God/Desktop/github/mtndream/MtnDream/client/src/Context/EditorContext.js"],"names":["React","useState","createContext","useEffect","initialPreview","initialImg","initialArticle","initialNotify","EditorContext","EditorProvider","children","editMode","setEditMode","articleList","setArticleList","article","setArticle","notify","setNotify","handleList","handleFetchList","result","handleMode","openNotify","newNotify","closeNotify","editArticle","title","fetchEditArticle","handleSectionMode","newSection","console","log","sectionMode","setPublished","isPublished","handleNewBody","newBody","body","push","newImgEl","handleImage","value","section","reader","FileReader","onload","e","parsed","target","split","El","index","src","jumbotron","readAsDataURL","handleInput","handleInputSwitch","handleFont","newFont","handleFontSwitch","handleStyling","style","handleStylingSwitch","handleJustify","justification","handleJustifySwitch","handleTextStyle","handleTextStyleSwitch","handleTextColor","color","handleTextColorSwitch","handleMarginTop","el","marginTop","handleMarginBottom","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, createContext, useEffect } from 'react';\nimport { initialPreview, initialImg, initialArticle, initialNotify } from './Services/EditorServices';\n\nexport const EditorContext = createContext();\n\nexport const EditorProvider = ({ children }) => {\n\n    const [editMode, setEditMode] = useState(false);\n    const [articleList, setArticleList] = useState('');\n    const [article, setArticle] = useState(initialArticle);\n    const [notify, setNotify] = useState(initialNotify);\n    \n    // Once component mounts it will fetch a list of the\n    // top ten most recent articles\n    useEffect(() => { handleList() }, []);\n\n    const handleList = async () => {\n        const { handleFetchList } = await import(\"./Services/EditorServices\");\n        const result = await handleFetchList();\n        setArticleList(result);\n    };\n\n    // Function toggles edit mode on or off\n    const handleMode = () => setEditMode(!editMode);\n\n    const openNotify = (newNotify) => setNotify({ ...notify, ...newNotify });\n    const closeNotify = () => setNotify(initialNotify);\n\n    // Once the user clicks on the article they wish to edit, it will then\n    // grab the article elements and set them to state.\n    const editArticle = async (title) => {\n        if (title === 'new') return; \n        const { fetchEditArticle } = await import(\"./Services/EditorServices\");\n        const result = await fetchEditArticle(title);\n\n        setArticle({ ...article, ...result });\n    };\n\n    // Once the user clicks on any element. The \"section mode\" will\n    // switch to the appropriate state to handle further edits within the element\n    const handleSectionMode = (newSection) => {\n        console.log(newSection);\n        setArticle({\n            ...article,\n            sectionMode: { ...newSection }\n        });\n    };\n\n    // This function will set the Title state to published if the article\n    // was successfully stored within the database\n    const setPublished = () => {\n        setArticle({\n            ...article,\n            title: { ...article.title, isPublished: true }\n        });\n    };\n\n    // This function will create a new body element within the state\n    const handleNewBody = () => {\n        const newBody = article.body;\n        newBody.push(initialPreview);\n        setArticle({\n            ...article,\n            body: newBody\n        });\n    };\n\n    // This function will create a new Image element within the\n    // Body and update the state\n    const newImgEl = () => {\n        const newBody = article.body;\n        newBody.push({ ...initialImg });\n        setArticle({\n            ...article,\n            body: newBody\n        });\n    };\n\n    const handleImage = (value, section) => {\n        if (!value) return;\n        let newBody = article.body;\n        let reader = new FileReader();\n        reader.onload = (e) => {\n            let result;\n            const parsed = e.target.result.split(\"base64,\");\n            if (section.El === 'image') {\n                newBody[section.index].src = parsed[1];\n                console.log('HIT')\n                result = { ...article, body: newBody };\n            } else {\n                result = {\n                    ...article,\n                    jumbotron: {\n                        ...article.jumbotron,\n                        src: parsed[1]\n                    }\n                };\n            }\n            setArticle(result);\n        };\n        reader.readAsDataURL(value);\n    };\n\n    // This function will check which section the user has selected and\n    // update the state with the new input\n    const handleInput = async (value, section) => {\n        const { handleInputSwitch } = await import(\"./Services/EditorServices\");\n        const result = await handleInputSwitch(value, section, article);\n        if (result) setArticle(result);\n    };\n\n    // This function will check which section the user is in and\n    // change the font value to the selected font\n    const handleFont = async ( newFont ) => {\n        const { handleFontSwitch } = await import(\"./Services/EditorServices\");\n        const result = handleFontSwitch(newFont, article);\n        setArticle(result);\n    };\n\n    // This function will check with section the user is in\n    // and update the value with the new selected value\n    const handleStyling = async (style) => {\n        const { handleStylingSwitch } = await import(\"./Services/EditorServices\");\n        const result = handleStylingSwitch(style, article);\n        setArticle(result);\n    };\n\n    // This function will check with section the user is in\n    // and update the value with the new selected value\n    const handleJustify = async (justification) => {\n        const { handleJustifySwitch } = await import(\"./Services/EditorServices\");\n        const result = handleJustifySwitch(justification, article);\n        setArticle(result);\n    };\n\n    // This function will check with section the user is in\n    // and update the value with the new selected value\n    const handleTextStyle = async (style) => {\n        const { handleTextStyleSwitch } = await import(\"./Services/EditorServices\");\n        const result = handleTextStyleSwitch(style, article);\n        setArticle(result);\n    };\n\n    // This function will check with section the user is in\n    // and update the value with the new selected value\n    const handleTextColor = async (color) => {\n        const { handleTextColorSwitch } = await import(\"./Services/EditorServices\");\n        const result = handleTextColorSwitch(color, article);\n        setArticle(result);\n    };\n\n    // This function will check with section the user is in\n    // and update the value with the new selected value\n    const handleMarginTop = (e) => {\n        const { el, index } = article.sectionMode;\n        if (el === 'title') {\n            return setArticle({\n                ...article,\n                title: {\n                    ...article.title,\n                    marginTop: e.target.value\n                }\n            });\n        } else if ( (el === 'body') || (el === 'image') ) {\n            let newBody = article.body;\n            newBody[index].marginTop = e.target.value;\n            return setArticle({ ...article, body: [ ...newBody ] });\n        }\n    };\n\n    // This function will check with section the user is in\n    // and update the value with the new selected value\n    const handleMarginBottom = (e) => {\n        const { el, index } = article.sectionMode;\n        if (el === 'title') {\n            return setArticle({\n                ...article,\n                title: {\n                    ...article.title,\n                    marginBottom: e.target.value \n                }\n            });\n        } else if ( (el === 'body') || (el === 'image') ) {\n            let newBody = article.body;\n            newBody[index].marginBottom = e.target.value;\n            return setArticle({ ...article, body: [ ...newBody ] });\n        }\n    };\n\n    // All functions and variables listed will be shared with the child consumers\n    return (\n        <EditorContext.Provider\n            value={{\n                notify,\n                openNotify,\n                closeNotify,\n                handleInput,\n                handleImage,\n                handleStyling,\n                handleFont,\n                handleJustify,\n                handleTextStyle,\n                handleTextColor,\n                handleMarginTop,\n                handleMarginBottom,\n                handleMode,\n                handleSectionMode,\n                setPublished,\n                articleList,\n                editMode,\n                editArticle,\n                handleNewBody,\n                newImgEl,\n                ...article\n            }}\n        >\n            {children}\n        </EditorContext.Provider>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}