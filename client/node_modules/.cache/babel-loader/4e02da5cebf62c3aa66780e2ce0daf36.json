{"ast":null,"code":"import _toConsumableArray from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/God/Desktop/github/mtndream/MtnDream/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/God/Desktop/github/mtndream/MtnDream/client/src/Context/EditorContext.js\";\nimport React, { useState, createContext, useEffect } from 'react';\nimport { initialPreview, initialImg, initialArticle } from './Services/EditorServices';\nexport var EditorContext = createContext();\nexport var EditorProvider = function EditorProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      editMode = _useState2[0],\n      setEditMode = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      articleList = _useState4[0],\n      setArticleList = _useState4[1];\n\n  var _useState5 = useState(initialArticle),\n      _useState6 = _slicedToArray(_useState5, 2),\n      article = _useState6[0],\n      setArticle = _useState6[1];\n\n  console.log(initialArticle); // Once component mounts it will fetch a list of the\n  // top ten most recent articles\n\n  useEffect(function () {\n    handleList();\n  }, []);\n\n  var handleList =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _ref3, handleFetchList, result;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return import(\"./Services/EditorServices\");\n\n            case 2:\n              _ref3 = _context.sent;\n              handleFetchList = _ref3.handleFetchList;\n              _context.next = 6;\n              return handleFetchList();\n\n            case 6:\n              result = _context.sent;\n              setArticleList(result);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleList() {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // Function toggles edit mode on or off\n\n\n  var handleMode = function handleMode() {\n    return setEditMode(!editMode);\n  }; // Once the user clicks on the article they wish to edit, it will then\n  // grab the article elements and set them to state.\n\n\n  var editArticle =\n  /*#__PURE__*/\n  function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(title) {\n      var _ref5, fetchEditArticle, result;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(title === 'new')) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              _context2.next = 4;\n              return import(\"./Services/EditorServices\");\n\n            case 4:\n              _ref5 = _context2.sent;\n              fetchEditArticle = _ref5.fetchEditArticle;\n              _context2.next = 8;\n              return fetchEditArticle(title);\n\n            case 8:\n              result = _context2.sent;\n              setArticle(_objectSpread({}, article, result));\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function editArticle(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }(); // Once the user clicks on any element. The \"section mode\" will\n  // switch to the appropriate state to handle further edits within the element\n\n\n  var handleSectionMode = function handleSectionMode(newSection) {\n    setArticle(_objectSpread({}, article, {\n      sectionMode: _objectSpread({}, article.sectionMode, {\n        el: newSection\n      })\n    }));\n  }; // This function will set the Title state to published if the article\n  // was successfully stored within the database\n\n\n  var setPublished = function setPublished() {\n    setArticle(_objectSpread({}, article, {\n      title: _objectSpread({}, article.title, {\n        isPublished: true\n      })\n    }));\n  }; // This function will create a new body element within the state\n\n\n  var newBody = function newBody() {\n    var newBody = article.body;\n    console.log(newBody);\n    newBody.push(initialPreview);\n    console.log(newBody);\n    setArticle(_objectSpread({}, article, {\n      body: newBody\n    }));\n  }; // This function will create a new Image element within the\n  // Body and update the state\n\n\n  var newImgEl = function newImgEl() {\n    var newBody = article.body;\n    newBody.push(_objectSpread({}, initialImg));\n    setArticle(_objectSpread({}, article, {\n      body: newBody\n    }));\n  }; // This function will check which section the user has selected and\n  // update the state with the new input\n\n\n  var handleInput =\n  /*#__PURE__*/\n  function () {\n    var _ref6 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(value, section) {\n      var _ref7, handleInputSwitch, result;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return import(\"./Services/EditorServices\");\n\n            case 2:\n              _ref7 = _context3.sent;\n              handleInputSwitch = _ref7.handleInputSwitch;\n              // let value = section.El === 'jumbotron' || section.El === 'image' ? e.target.files[0] : e.target.value;\n              result = handleInputSwitch(value, section, article);\n              setArticle(result);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function handleInput(_x2, _x3) {\n      return _ref6.apply(this, arguments);\n    };\n  }(); // This function will check which section the user is in and\n  // change the font value to the selected font\n\n\n  var handleFont =\n  /*#__PURE__*/\n  function () {\n    var _ref8 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4(newFont) {\n      var _ref9, handleFontSwitch, result;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return import(\"./Services/EditorServices\");\n\n            case 2:\n              _ref9 = _context4.sent;\n              handleFontSwitch = _ref9.handleFontSwitch;\n              result = handleFontSwitch(newFont, article);\n              setArticle(result);\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function handleFont(_x4) {\n      return _ref8.apply(this, arguments);\n    };\n  }(); // This function will check with section the user is in\n  // and update the value with the new selected value\n\n\n  var handleStyling =\n  /*#__PURE__*/\n  function () {\n    var _ref10 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5(style) {\n      var _ref11, handleStylingSwitch, result;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return import(\"./Services/EditorServices\");\n\n            case 2:\n              _ref11 = _context5.sent;\n              handleStylingSwitch = _ref11.handleStylingSwitch;\n              result = handleStylingSwitch(style, article);\n              setArticle(result);\n\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function handleStyling(_x5) {\n      return _ref10.apply(this, arguments);\n    };\n  }(); // This function will check with section the user is in\n  // and update the value with the new selected value\n\n\n  var handleJustify =\n  /*#__PURE__*/\n  function () {\n    var _ref12 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6(justification) {\n      var _ref13, handleJustifySwitch, result;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return import(\"./Services/EditorServices\");\n\n            case 2:\n              _ref13 = _context6.sent;\n              handleJustifySwitch = _ref13.handleJustifySwitch;\n              result = handleJustifySwitch(justification, article);\n              setArticle(result);\n\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function handleJustify(_x6) {\n      return _ref12.apply(this, arguments);\n    };\n  }(); // This function will check with section the user is in\n  // and update the value with the new selected value\n\n\n  var handleTextStyle =\n  /*#__PURE__*/\n  function () {\n    var _ref14 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee7(style) {\n      var _ref15, handleTextStyleSwitch, result;\n\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return import(\"./Services/EditorServices\");\n\n            case 2:\n              _ref15 = _context7.sent;\n              handleTextStyleSwitch = _ref15.handleTextStyleSwitch;\n              result = handleTextStyleSwitch(style, article);\n              setArticle(result);\n\n            case 6:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function handleTextStyle(_x7) {\n      return _ref14.apply(this, arguments);\n    };\n  }(); // This function will check with section the user is in\n  // and update the value with the new selected value\n\n\n  var handleTextColor =\n  /*#__PURE__*/\n  function () {\n    var _ref16 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee8(color) {\n      var _ref17, handleTextColorSwitch, result;\n\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return import(\"./Services/EditorServices\");\n\n            case 2:\n              _ref17 = _context8.sent;\n              handleTextColorSwitch = _ref17.handleTextColorSwitch;\n              result = handleTextColorSwitch(color, article);\n              setArticle(result);\n\n            case 6:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function handleTextColor(_x8) {\n      return _ref16.apply(this, arguments);\n    };\n  }(); // This function will check with section the user is in\n  // and update the value with the new selected value\n\n\n  var handleMarginTop = function handleMarginTop(e) {\n    var _article$sectionMode = article.sectionMode,\n        el = _article$sectionMode.el,\n        index = _article$sectionMode.index;\n\n    if (el === 'title') {\n      return setArticle(_objectSpread({}, article, {\n        title: _objectSpread({}, article.title, {\n          marginTop: e.target.value\n        })\n      }));\n    } else if (el === 'body' || el === 'image') {\n      var _newBody = article.body;\n      _newBody[index].marginTop = e.target.value;\n      return setArticle(_objectSpread({}, article, {\n        body: _toConsumableArray(_newBody)\n      }));\n    }\n  }; // This function will check with section the user is in\n  // and update the value with the new selected value\n\n\n  var handleMarginBottom = function handleMarginBottom(e) {\n    var _article$sectionMode2 = article.sectionMode,\n        el = _article$sectionMode2.el,\n        index = _article$sectionMode2.index;\n\n    if (el === 'title') {\n      return setArticle(_objectSpread({}, article, {\n        title: _objectSpread({}, article.title, {\n          marginBottom: e.target.value\n        })\n      }));\n    } else if (el === 'body' || el === 'image') {\n      var _newBody2 = article.body;\n      _newBody2[index].marginBottom = e.target.value;\n      return setArticle(_objectSpread({}, article, {\n        body: _toConsumableArray(_newBody2)\n      }));\n    }\n  }; // All functions and variables listed will be shared with the child consumers\n\n\n  return React.createElement(EditorContext.Provider, {\n    value: _objectSpread({\n      handleInput: handleInput,\n      handleStyling: handleStyling,\n      handleFont: handleFont,\n      handleJustify: handleJustify,\n      handleTextStyle: handleTextStyle,\n      handleTextColor: handleTextColor,\n      handleMarginTop: handleMarginTop,\n      handleMarginBottom: handleMarginBottom,\n      handleMode: handleMode,\n      handleSectionMode: handleSectionMode,\n      setPublished: setPublished,\n      articleList: articleList,\n      editMode: editMode,\n      editArticle: editArticle,\n      newBody: newBody,\n      newImgEl: newImgEl\n    }, article),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, children);\n};","map":{"version":3,"sources":["/Users/God/Desktop/github/mtndream/MtnDream/client/src/Context/EditorContext.js"],"names":["React","useState","createContext","useEffect","initialPreview","initialImg","initialArticle","EditorContext","EditorProvider","children","editMode","setEditMode","articleList","setArticleList","article","setArticle","console","log","handleList","handleFetchList","result","handleMode","editArticle","title","fetchEditArticle","handleSectionMode","newSection","sectionMode","el","setPublished","isPublished","newBody","body","push","newImgEl","handleInput","value","section","handleInputSwitch","handleFont","newFont","handleFontSwitch","handleStyling","style","handleStylingSwitch","handleJustify","justification","handleJustifySwitch","handleTextStyle","handleTextStyleSwitch","handleTextColor","color","handleTextColorSwitch","handleMarginTop","e","index","marginTop","target","handleMarginBottom","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, createContext, useEffect } from 'react';\nimport { initialPreview, initialImg, initialArticle } from './Services/EditorServices';\n\nexport const EditorContext = createContext();\n\nexport const EditorProvider = ({ children }) => {\n\n    const [editMode, setEditMode] = useState(false);\n    const [articleList, setArticleList] = useState('');\n    const [article, setArticle] = useState(initialArticle);\n    console.log(initialArticle);\n    \n    // Once component mounts it will fetch a list of the\n    // top ten most recent articles\n    useEffect(() => { handleList() }, []);\n\n    const handleList = async () => {\n        const { handleFetchList } = await import(\"./Services/EditorServices\");\n        const result = await handleFetchList();\n        setArticleList(result);\n    };\n\n    // Function toggles edit mode on or off\n    const handleMode = () => setEditMode(!editMode);\n\n    // Once the user clicks on the article they wish to edit, it will then\n    // grab the article elements and set them to state.\n    const editArticle = async (title) => {\n        if (title === 'new') return; \n        const { fetchEditArticle } = await import(\"./Services/EditorServices\");\n        const result = await fetchEditArticle(title);\n\n        setArticle({ ...article, ...result });\n    };\n\n    // Once the user clicks on any element. The \"section mode\" will\n    // switch to the appropriate state to handle further edits within the element\n    const handleSectionMode = (newSection) => {\n        setArticle({\n            ...article,\n            sectionMode: { ...article.sectionMode, el: newSection }\n        });\n    };\n\n    // This function will set the Title state to published if the article\n    // was successfully stored within the database\n    const setPublished = () => {\n        setArticle({\n            ...article,\n            title: { ...article.title, isPublished: true }\n        });\n    };\n\n    // This function will create a new body element within the state\n    const newBody = () => {\n        let newBody = article.body;\n        console.log(newBody);\n        newBody.push(initialPreview);\n        console.log(newBody);\n        setArticle({\n            ...article,\n            body: newBody\n        });\n    };\n\n    // This function will create a new Image element within the\n    // Body and update the state\n    const newImgEl = () => {\n        const newBody = article.body;\n        newBody.push({ ...initialImg });\n        setArticle({\n            ...article,\n            body: newBody\n        });\n    };\n\n    // This function will check which section the user has selected and\n    // update the state with the new input\n    const handleInput = async (value, section) => {\n        const { handleInputSwitch } = await import(\"./Services/EditorServices\");\n        // let value = section.El === 'jumbotron' || section.El === 'image' ? e.target.files[0] : e.target.value;\n        const result = handleInputSwitch(value, section, article);\n        setArticle(result);\n    };\n\n    // This function will check which section the user is in and\n    // change the font value to the selected font\n    const handleFont = async ( newFont ) => {\n        const { handleFontSwitch } = await import(\"./Services/EditorServices\");\n        const result = handleFontSwitch(newFont, article);\n        setArticle(result);\n    };\n\n    // This function will check with section the user is in\n    // and update the value with the new selected value\n    const handleStyling = async (style) => {\n        const { handleStylingSwitch } = await import(\"./Services/EditorServices\");\n        const result = handleStylingSwitch(style, article);\n        setArticle(result);\n    };\n\n    // This function will check with section the user is in\n    // and update the value with the new selected value\n    const handleJustify = async (justification) => {\n        const { handleJustifySwitch } = await import(\"./Services/EditorServices\");\n        const result = handleJustifySwitch(justification, article);\n        setArticle(result);\n    };\n\n    // This function will check with section the user is in\n    // and update the value with the new selected value\n    const handleTextStyle = async (style) => {\n        const { handleTextStyleSwitch } = await import(\"./Services/EditorServices\");\n        const result = handleTextStyleSwitch(style, article);\n        setArticle(result);\n    };\n\n    // This function will check with section the user is in\n    // and update the value with the new selected value\n    const handleTextColor = async (color) => {\n        const { handleTextColorSwitch } = await import(\"./Services/EditorServices\");\n        const result = handleTextColorSwitch(color, article);\n        setArticle(result);\n    };\n\n    // This function will check with section the user is in\n    // and update the value with the new selected value\n    const handleMarginTop = (e) => {\n        const { el, index } = article.sectionMode;\n        if (el === 'title') {\n            return setArticle({\n                ...article,\n                title: {\n                    ...article.title,\n                    marginTop: e.target.value\n                }\n            });\n        } else if ( (el === 'body') || (el === 'image') ) {\n            let newBody = article.body;\n            newBody[index].marginTop = e.target.value;\n            return setArticle({ ...article, body: [ ...newBody ] });\n        }\n    };\n\n    // This function will check with section the user is in\n    // and update the value with the new selected value\n    const handleMarginBottom = (e) => {\n        const { el, index } = article.sectionMode;\n        if (el === 'title') {\n            return setArticle({\n                ...article,\n                title: {\n                    ...article.title,\n                    marginBottom: e.target.value \n                }\n            });\n        } else if ( (el === 'body') || (el === 'image') ) {\n            let newBody = article.body;\n            newBody[index].marginBottom = e.target.value;\n            return setArticle({ ...article, body: [ ...newBody ] });\n        }\n    };\n\n    // All functions and variables listed will be shared with the child consumers\n    return (\n        <EditorContext.Provider\n            value={{\n                handleInput,\n                handleStyling,\n                handleFont,\n                handleJustify,\n                handleTextStyle,\n                handleTextColor,\n                handleMarginTop,\n                handleMarginBottom,\n                handleMode,\n                handleSectionMode,\n                setPublished,\n                articleList,\n                editMode,\n                editArticle,\n                newBody,\n                newImgEl,\n                ...article\n            }}\n        >\n            {children}\n        </EditorContext.Provider>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}